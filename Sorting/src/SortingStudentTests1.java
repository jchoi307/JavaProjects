import org.junit.Before;
import org.junit.Test;
import java.util.Comparator;
import java.util.Random;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertTrue;
/**
 * Junghyun Kim's JUNIT on HW 7
 * @Version 1.0
 */
public class SortingStudentTests1 {
    private static final int TIMEOUT = 200;
    class TimeTicket {
        int val;
        public TimeTicket(int val) {
            this.val = val;
        }
        public boolean equals(Object d) {
            return val == ((TimeTicket)d).val;
        }
        public int compareTo(TimeTicket a) {
            return val - a.val;
        }
    }
    class IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600 implements Comparator<TimeTicket> {
        public int compare(TimeTicket a, TimeTicket b) {
            return a.val - b.val;
        }
    }    @Test(timeout = TIMEOUT)
         public void test_00001() {
        TimeTicket[] output = new TimeTicket[12];
        output[0] = new TimeTicket(-81);
        output[1] = new TimeTicket(-17);
        output[2] = new TimeTicket(15);
        output[3] = new TimeTicket(38);
        output[4] = new TimeTicket(-45);
        output[5] = new TimeTicket(-20);
        output[6] = new TimeTicket(70);
        output[7] = new TimeTicket(15);
        output[8] = new TimeTicket(-50);
        output[9] = new TimeTicket(32);
        output[10] = new TimeTicket(36);
        output[11] = new TimeTicket(-67);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[12];
        answer[0] = new TimeTicket(-81);
        answer[1] = new TimeTicket(-67);
        answer[2] = new TimeTicket(-50);
        answer[3] = new TimeTicket(-45);
        answer[4] = new TimeTicket(-20);
        answer[5] = new TimeTicket(-17);
        answer[6] = new TimeTicket(15);
        answer[7] = new TimeTicket(15);
        answer[8] = new TimeTicket(32);
        answer[9] = new TimeTicket(36);
        answer[10] = new TimeTicket(38);
        answer[11] = new TimeTicket(70);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00002() {
        TimeTicket[] output = new TimeTicket[27];
        output[0] = new TimeTicket(-28);
        output[1] = new TimeTicket(96);
        output[2] = new TimeTicket(20);
        output[3] = new TimeTicket(77);
        output[4] = new TimeTicket(23);
        output[5] = new TimeTicket(-89);
        output[6] = new TimeTicket(63);
        output[7] = new TimeTicket(70);
        output[8] = new TimeTicket(-29);
        output[9] = new TimeTicket(61);
        output[10] = new TimeTicket(-2);
        output[11] = new TimeTicket(-78);
        output[12] = new TimeTicket(-11);
        output[13] = new TimeTicket(-55);
        output[14] = new TimeTicket(-35);
        output[15] = new TimeTicket(92);
        output[16] = new TimeTicket(-30);
        output[17] = new TimeTicket(-63);
        output[18] = new TimeTicket(-65);
        output[19] = new TimeTicket(-44);
        output[20] = new TimeTicket(73);
        output[21] = new TimeTicket(-17);
        output[22] = new TimeTicket(42);
        output[23] = new TimeTicket(43);
        output[24] = new TimeTicket(77);
        output[25] = new TimeTicket(56);
        output[26] = new TimeTicket(28);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[27];
        answer[0] = new TimeTicket(-89);
        answer[1] = new TimeTicket(-78);
        answer[2] = new TimeTicket(-65);
        answer[3] = new TimeTicket(-63);
        answer[4] = new TimeTicket(-55);
        answer[5] = new TimeTicket(-44);
        answer[6] = new TimeTicket(-35);
        answer[7] = new TimeTicket(-30);
        answer[8] = new TimeTicket(-29);
        answer[9] = new TimeTicket(-28);
        answer[10] = new TimeTicket(-17);
        answer[11] = new TimeTicket(-11);
        answer[12] = new TimeTicket(-2);
        answer[13] = new TimeTicket(20);
        answer[14] = new TimeTicket(23);
        answer[15] = new TimeTicket(28);
        answer[16] = new TimeTicket(42);
        answer[17] = new TimeTicket(43);
        answer[18] = new TimeTicket(56);
        answer[19] = new TimeTicket(61);
        answer[20] = new TimeTicket(63);
        answer[21] = new TimeTicket(70);
        answer[22] = new TimeTicket(73);
        answer[23] = new TimeTicket(77);
        answer[24] = new TimeTicket(77);
        answer[25] = new TimeTicket(92);
        answer[26] = new TimeTicket(96);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00003() {
        TimeTicket[] output = new TimeTicket[18];
        output[0] = new TimeTicket(-53);
        output[1] = new TimeTicket(95);
        output[2] = new TimeTicket(-28);
        output[3] = new TimeTicket(26);
        output[4] = new TimeTicket(36);
        output[5] = new TimeTicket(0);
        output[6] = new TimeTicket(-73);
        output[7] = new TimeTicket(16);
        output[8] = new TimeTicket(-89);
        output[9] = new TimeTicket(-18);
        output[10] = new TimeTicket(-43);
        output[11] = new TimeTicket(-28);
        output[12] = new TimeTicket(81);
        output[13] = new TimeTicket(-45);
        output[14] = new TimeTicket(-67);
        output[15] = new TimeTicket(84);
        output[16] = new TimeTicket(4);
        output[17] = new TimeTicket(-24);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[18];
        answer[0] = new TimeTicket(-89);
        answer[1] = new TimeTicket(-73);
        answer[2] = new TimeTicket(-67);
        answer[3] = new TimeTicket(-53);
        answer[4] = new TimeTicket(-45);
        answer[5] = new TimeTicket(-43);
        answer[6] = new TimeTicket(-28);
        answer[7] = new TimeTicket(-28);
        answer[8] = new TimeTicket(-24);
        answer[9] = new TimeTicket(-18);
        answer[10] = new TimeTicket(0);
        answer[11] = new TimeTicket(4);
        answer[12] = new TimeTicket(16);
        answer[13] = new TimeTicket(26);
        answer[14] = new TimeTicket(36);
        answer[15] = new TimeTicket(81);
        answer[16] = new TimeTicket(84);
        answer[17] = new TimeTicket(95);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00004() {
        TimeTicket[] output = new TimeTicket[27];
        output[0] = new TimeTicket(41);
        output[1] = new TimeTicket(-71);
        output[2] = new TimeTicket(-31);
        output[3] = new TimeTicket(35);
        output[4] = new TimeTicket(-79);
        output[5] = new TimeTicket(61);
        output[6] = new TimeTicket(67);
        output[7] = new TimeTicket(0);
        output[8] = new TimeTicket(98);
        output[9] = new TimeTicket(74);
        output[10] = new TimeTicket(49);
        output[11] = new TimeTicket(23);
        output[12] = new TimeTicket(28);
        output[13] = new TimeTicket(32);
        output[14] = new TimeTicket(-38);
        output[15] = new TimeTicket(62);
        output[16] = new TimeTicket(-12);
        output[17] = new TimeTicket(-1);
        output[18] = new TimeTicket(78);
        output[19] = new TimeTicket(3);
        output[20] = new TimeTicket(81);
        output[21] = new TimeTicket(-21);
        output[22] = new TimeTicket(-30);
        output[23] = new TimeTicket(-35);
        output[24] = new TimeTicket(-83);
        output[25] = new TimeTicket(-25);
        output[26] = new TimeTicket(70);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[27];
        answer[0] = new TimeTicket(-83);
        answer[1] = new TimeTicket(-79);
        answer[2] = new TimeTicket(-71);
        answer[3] = new TimeTicket(-38);
        answer[4] = new TimeTicket(-35);
        answer[5] = new TimeTicket(-31);
        answer[6] = new TimeTicket(-30);
        answer[7] = new TimeTicket(-25);
        answer[8] = new TimeTicket(-21);
        answer[9] = new TimeTicket(-12);
        answer[10] = new TimeTicket(-1);
        answer[11] = new TimeTicket(0);
        answer[12] = new TimeTicket(3);
        answer[13] = new TimeTicket(23);
        answer[14] = new TimeTicket(28);
        answer[15] = new TimeTicket(32);
        answer[16] = new TimeTicket(35);
        answer[17] = new TimeTicket(41);
        answer[18] = new TimeTicket(49);
        answer[19] = new TimeTicket(61);
        answer[20] = new TimeTicket(62);
        answer[21] = new TimeTicket(67);
        answer[22] = new TimeTicket(70);
        answer[23] = new TimeTicket(74);
        answer[24] = new TimeTicket(78);
        answer[25] = new TimeTicket(81);
        answer[26] = new TimeTicket(98);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00005() {
        int[] output = new int[5];
        output[0] = -39;
        output[1] = -50;
        output[2] = -87;
        output[3] = -11;
        output[4] = -86;
        Sorting.radixSort(output);
        int[] answer = new int[5];
        answer[0] = -87;
        answer[1] = -86;
        answer[2] = -50;
        answer[3] = -39;
        answer[4] = -11;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00006() {
        TimeTicket[] output = new TimeTicket[4];
        output[0] = new TimeTicket(70);
        output[1] = new TimeTicket(19);
        output[2] = new TimeTicket(52);
        output[3] = new TimeTicket(7);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[4];
        answer[0] = new TimeTicket(7);
        answer[1] = new TimeTicket(19);
        answer[2] = new TimeTicket(52);
        answer[3] = new TimeTicket(70);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00007() {
        TimeTicket[] output = new TimeTicket[29];
        output[0] = new TimeTicket(54);
        output[1] = new TimeTicket(40);
        output[2] = new TimeTicket(18);
        output[3] = new TimeTicket(18);
        output[4] = new TimeTicket(-9);
        output[5] = new TimeTicket(-48);
        output[6] = new TimeTicket(99);
        output[7] = new TimeTicket(-55);
        output[8] = new TimeTicket(-50);
        output[9] = new TimeTicket(-81);
        output[10] = new TimeTicket(13);
        output[11] = new TimeTicket(12);
        output[12] = new TimeTicket(-84);
        output[13] = new TimeTicket(-67);
        output[14] = new TimeTicket(-76);
        output[15] = new TimeTicket(-11);
        output[16] = new TimeTicket(-51);
        output[17] = new TimeTicket(-86);
        output[18] = new TimeTicket(-11);
        output[19] = new TimeTicket(-97);
        output[20] = new TimeTicket(76);
        output[21] = new TimeTicket(86);
        output[22] = new TimeTicket(-1);
        output[23] = new TimeTicket(15);
        output[24] = new TimeTicket(93);
        output[25] = new TimeTicket(-41);
        output[26] = new TimeTicket(17);
        output[27] = new TimeTicket(1);
        output[28] = new TimeTicket(20);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[29];
        answer[0] = new TimeTicket(-97);
        answer[1] = new TimeTicket(-86);
        answer[2] = new TimeTicket(-84);
        answer[3] = new TimeTicket(-81);
        answer[4] = new TimeTicket(-76);
        answer[5] = new TimeTicket(-67);
        answer[6] = new TimeTicket(-55);
        answer[7] = new TimeTicket(-51);
        answer[8] = new TimeTicket(-50);
        answer[9] = new TimeTicket(-48);
        answer[10] = new TimeTicket(-41);
        answer[11] = new TimeTicket(-11);
        answer[12] = new TimeTicket(-11);
        answer[13] = new TimeTicket(-9);
        answer[14] = new TimeTicket(-1);
        answer[15] = new TimeTicket(1);
        answer[16] = new TimeTicket(12);
        answer[17] = new TimeTicket(13);
        answer[18] = new TimeTicket(15);
        answer[19] = new TimeTicket(17);
        answer[20] = new TimeTicket(18);
        answer[21] = new TimeTicket(18);
        answer[22] = new TimeTicket(20);
        answer[23] = new TimeTicket(40);
        answer[24] = new TimeTicket(54);
        answer[25] = new TimeTicket(76);
        answer[26] = new TimeTicket(86);
        answer[27] = new TimeTicket(93);
        answer[28] = new TimeTicket(99);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00008() {
        TimeTicket[] output = new TimeTicket[23];
        output[0] = new TimeTicket(45);
        output[1] = new TimeTicket(48);
        output[2] = new TimeTicket(61);
        output[3] = new TimeTicket(40);
        output[4] = new TimeTicket(-24);
        output[5] = new TimeTicket(61);
        output[6] = new TimeTicket(-15);
        output[7] = new TimeTicket(-74);
        output[8] = new TimeTicket(-3);
        output[9] = new TimeTicket(-34);
        output[10] = new TimeTicket(-57);
        output[11] = new TimeTicket(78);
        output[12] = new TimeTicket(72);
        output[13] = new TimeTicket(50);
        output[14] = new TimeTicket(-53);
        output[15] = new TimeTicket(42);
        output[16] = new TimeTicket(94);
        output[17] = new TimeTicket(-56);
        output[18] = new TimeTicket(-25);
        output[19] = new TimeTicket(-18);
        output[20] = new TimeTicket(24);
        output[21] = new TimeTicket(41);
        output[22] = new TimeTicket(-43);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[23];
        answer[0] = new TimeTicket(-74);
        answer[1] = new TimeTicket(-57);
        answer[2] = new TimeTicket(-56);
        answer[3] = new TimeTicket(-53);
        answer[4] = new TimeTicket(-43);
        answer[5] = new TimeTicket(-34);
        answer[6] = new TimeTicket(-25);
        answer[7] = new TimeTicket(-24);
        answer[8] = new TimeTicket(-18);
        answer[9] = new TimeTicket(-15);
        answer[10] = new TimeTicket(-3);
        answer[11] = new TimeTicket(24);
        answer[12] = new TimeTicket(40);
        answer[13] = new TimeTicket(41);
        answer[14] = new TimeTicket(42);
        answer[15] = new TimeTicket(45);
        answer[16] = new TimeTicket(48);
        answer[17] = new TimeTicket(50);
        answer[18] = new TimeTicket(61);
        answer[19] = new TimeTicket(61);
        answer[20] = new TimeTicket(72);
        answer[21] = new TimeTicket(78);
        answer[22] = new TimeTicket(94);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00009() {
        TimeTicket[] output = new TimeTicket[3];
        output[0] = new TimeTicket(16);
        output[1] = new TimeTicket(47);
        output[2] = new TimeTicket(-41);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[3];
        answer[0] = new TimeTicket(-41);
        answer[1] = new TimeTicket(16);
        answer[2] = new TimeTicket(47);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00010() {
        TimeTicket[] output = new TimeTicket[12];
        output[0] = new TimeTicket(75);
        output[1] = new TimeTicket(-3);
        output[2] = new TimeTicket(-36);
        output[3] = new TimeTicket(-31);
        output[4] = new TimeTicket(30);
        output[5] = new TimeTicket(-88);
        output[6] = new TimeTicket(-13);
        output[7] = new TimeTicket(37);
        output[8] = new TimeTicket(35);
        output[9] = new TimeTicket(-86);
        output[10] = new TimeTicket(34);
        output[11] = new TimeTicket(-73);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[12];
        answer[0] = new TimeTicket(-88);
        answer[1] = new TimeTicket(-86);
        answer[2] = new TimeTicket(-73);
        answer[3] = new TimeTicket(-36);
        answer[4] = new TimeTicket(-31);
        answer[5] = new TimeTicket(-13);
        answer[6] = new TimeTicket(-3);
        answer[7] = new TimeTicket(30);
        answer[8] = new TimeTicket(34);
        answer[9] = new TimeTicket(35);
        answer[10] = new TimeTicket(37);
        answer[11] = new TimeTicket(75);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00011() {
        int[] output = new int[23];
        output[0] = 11;
        output[1] = -58;
        output[2] = -16;
        output[3] = -91;
        output[4] = 44;
        output[5] = 1;
        output[6] = 53;
        output[7] = -24;
        output[8] = -44;
        output[9] = 14;
        output[10] = -75;
        output[11] = 51;
        output[12] = -30;
        output[13] = 82;
        output[14] = 92;
        output[15] = -54;
        output[16] = 35;
        output[17] = -43;
        output[18] = 41;
        output[19] = 58;
        output[20] = -95;
        output[21] = -47;
        output[22] = 4;
        Sorting.radixSort(output);
        int[] answer = new int[23];
        answer[0] = -95;
        answer[1] = -91;
        answer[2] = -75;
        answer[3] = -58;
        answer[4] = -54;
        answer[5] = -47;
        answer[6] = -44;
        answer[7] = -43;
        answer[8] = -30;
        answer[9] = -24;
        answer[10] = -16;
        answer[11] = 1;
        answer[12] = 4;
        answer[13] = 11;
        answer[14] = 14;
        answer[15] = 35;
        answer[16] = 41;
        answer[17] = 44;
        answer[18] = 51;
        answer[19] = 53;
        answer[20] = 58;
        answer[21] = 82;
        answer[22] = 92;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00012() {
        TimeTicket[] output = new TimeTicket[18];
        output[0] = new TimeTicket(-5);
        output[1] = new TimeTicket(-73);
        output[2] = new TimeTicket(44);
        output[3] = new TimeTicket(-71);
        output[4] = new TimeTicket(-65);
        output[5] = new TimeTicket(-36);
        output[6] = new TimeTicket(-80);
        output[7] = new TimeTicket(-26);
        output[8] = new TimeTicket(7);
        output[9] = new TimeTicket(44);
        output[10] = new TimeTicket(-51);
        output[11] = new TimeTicket(-43);
        output[12] = new TimeTicket(99);
        output[13] = new TimeTicket(93);
        output[14] = new TimeTicket(68);
        output[15] = new TimeTicket(-29);
        output[16] = new TimeTicket(18);
        output[17] = new TimeTicket(92);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[18];
        answer[0] = new TimeTicket(-80);
        answer[1] = new TimeTicket(-73);
        answer[2] = new TimeTicket(-71);
        answer[3] = new TimeTicket(-65);
        answer[4] = new TimeTicket(-51);
        answer[5] = new TimeTicket(-43);
        answer[6] = new TimeTicket(-36);
        answer[7] = new TimeTicket(-29);
        answer[8] = new TimeTicket(-26);
        answer[9] = new TimeTicket(-5);
        answer[10] = new TimeTicket(7);
        answer[11] = new TimeTicket(18);
        answer[12] = new TimeTicket(44);
        answer[13] = new TimeTicket(44);
        answer[14] = new TimeTicket(68);
        answer[15] = new TimeTicket(92);
        answer[16] = new TimeTicket(93);
        answer[17] = new TimeTicket(99);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00013() {
        TimeTicket[] output = new TimeTicket[29];
        output[0] = new TimeTicket(20);
        output[1] = new TimeTicket(-84);
        output[2] = new TimeTicket(27);
        output[3] = new TimeTicket(53);
        output[4] = new TimeTicket(-67);
        output[5] = new TimeTicket(39);
        output[6] = new TimeTicket(-20);
        output[7] = new TimeTicket(-47);
        output[8] = new TimeTicket(-92);
        output[9] = new TimeTicket(63);
        output[10] = new TimeTicket(-56);
        output[11] = new TimeTicket(12);
        output[12] = new TimeTicket(-31);
        output[13] = new TimeTicket(86);
        output[14] = new TimeTicket(82);
        output[15] = new TimeTicket(18);
        output[16] = new TimeTicket(76);
        output[17] = new TimeTicket(99);
        output[18] = new TimeTicket(-5);
        output[19] = new TimeTicket(26);
        output[20] = new TimeTicket(-61);
        output[21] = new TimeTicket(-77);
        output[22] = new TimeTicket(96);
        output[23] = new TimeTicket(-74);
        output[24] = new TimeTicket(31);
        output[25] = new TimeTicket(11);
        output[26] = new TimeTicket(53);
        output[27] = new TimeTicket(-84);
        output[28] = new TimeTicket(14);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[29];
        answer[0] = new TimeTicket(-92);
        answer[1] = new TimeTicket(-84);
        answer[2] = new TimeTicket(-84);
        answer[3] = new TimeTicket(-77);
        answer[4] = new TimeTicket(-74);
        answer[5] = new TimeTicket(-67);
        answer[6] = new TimeTicket(-61);
        answer[7] = new TimeTicket(-56);
        answer[8] = new TimeTicket(-47);
        answer[9] = new TimeTicket(-31);
        answer[10] = new TimeTicket(-20);
        answer[11] = new TimeTicket(-5);
        answer[12] = new TimeTicket(11);
        answer[13] = new TimeTicket(12);
        answer[14] = new TimeTicket(14);
        answer[15] = new TimeTicket(18);
        answer[16] = new TimeTicket(20);
        answer[17] = new TimeTicket(26);
        answer[18] = new TimeTicket(27);
        answer[19] = new TimeTicket(31);
        answer[20] = new TimeTicket(39);
        answer[21] = new TimeTicket(53);
        answer[22] = new TimeTicket(53);
        answer[23] = new TimeTicket(63);
        answer[24] = new TimeTicket(76);
        answer[25] = new TimeTicket(82);
        answer[26] = new TimeTicket(86);
        answer[27] = new TimeTicket(96);
        answer[28] = new TimeTicket(99);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00014() {
        TimeTicket[] output = new TimeTicket[28];
        output[0] = new TimeTicket(0);
        output[1] = new TimeTicket(32);
        output[2] = new TimeTicket(66);
        output[3] = new TimeTicket(19);
        output[4] = new TimeTicket(45);
        output[5] = new TimeTicket(-8);
        output[6] = new TimeTicket(32);
        output[7] = new TimeTicket(15);
        output[8] = new TimeTicket(96);
        output[9] = new TimeTicket(-60);
        output[10] = new TimeTicket(93);
        output[11] = new TimeTicket(-42);
        output[12] = new TimeTicket(-22);
        output[13] = new TimeTicket(-88);
        output[14] = new TimeTicket(34);
        output[15] = new TimeTicket(-56);
        output[16] = new TimeTicket(-32);
        output[17] = new TimeTicket(-95);
        output[18] = new TimeTicket(71);
        output[19] = new TimeTicket(37);
        output[20] = new TimeTicket(-1);
        output[21] = new TimeTicket(-89);
        output[22] = new TimeTicket(84);
        output[23] = new TimeTicket(81);
        output[24] = new TimeTicket(12);
        output[25] = new TimeTicket(-54);
        output[26] = new TimeTicket(-79);
        output[27] = new TimeTicket(-91);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[28];
        answer[0] = new TimeTicket(-95);
        answer[1] = new TimeTicket(-91);
        answer[2] = new TimeTicket(-89);
        answer[3] = new TimeTicket(-88);
        answer[4] = new TimeTicket(-79);
        answer[5] = new TimeTicket(-60);
        answer[6] = new TimeTicket(-56);
        answer[7] = new TimeTicket(-54);
        answer[8] = new TimeTicket(-42);
        answer[9] = new TimeTicket(-32);
        answer[10] = new TimeTicket(-22);
        answer[11] = new TimeTicket(-8);
        answer[12] = new TimeTicket(-1);
        answer[13] = new TimeTicket(0);
        answer[14] = new TimeTicket(12);
        answer[15] = new TimeTicket(15);
        answer[16] = new TimeTicket(19);
        answer[17] = new TimeTicket(32);
        answer[18] = new TimeTicket(32);
        answer[19] = new TimeTicket(34);
        answer[20] = new TimeTicket(37);
        answer[21] = new TimeTicket(45);
        answer[22] = new TimeTicket(66);
        answer[23] = new TimeTicket(71);
        answer[24] = new TimeTicket(81);
        answer[25] = new TimeTicket(84);
        answer[26] = new TimeTicket(93);
        answer[27] = new TimeTicket(96);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00015() {
        TimeTicket[] output = new TimeTicket[17];
        output[0] = new TimeTicket(63);
        output[1] = new TimeTicket(59);
        output[2] = new TimeTicket(20);
        output[3] = new TimeTicket(79);
        output[4] = new TimeTicket(99);
        output[5] = new TimeTicket(98);
        output[6] = new TimeTicket(-71);
        output[7] = new TimeTicket(35);
        output[8] = new TimeTicket(-6);
        output[9] = new TimeTicket(23);
        output[10] = new TimeTicket(-44);
        output[11] = new TimeTicket(-77);
        output[12] = new TimeTicket(-34);
        output[13] = new TimeTicket(79);
        output[14] = new TimeTicket(13);
        output[15] = new TimeTicket(-72);
        output[16] = new TimeTicket(39);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[17];
        answer[0] = new TimeTicket(-77);
        answer[1] = new TimeTicket(-72);
        answer[2] = new TimeTicket(-71);
        answer[3] = new TimeTicket(-44);
        answer[4] = new TimeTicket(-34);
        answer[5] = new TimeTicket(-6);
        answer[6] = new TimeTicket(13);
        answer[7] = new TimeTicket(20);
        answer[8] = new TimeTicket(23);
        answer[9] = new TimeTicket(35);
        answer[10] = new TimeTicket(39);
        answer[11] = new TimeTicket(59);
        answer[12] = new TimeTicket(63);
        answer[13] = new TimeTicket(79);
        answer[14] = new TimeTicket(79);
        answer[15] = new TimeTicket(98);
        answer[16] = new TimeTicket(99);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00016() {
        TimeTicket[] output = new TimeTicket[16];
        output[0] = new TimeTicket(-71);
        output[1] = new TimeTicket(-75);
        output[2] = new TimeTicket(-87);
        output[3] = new TimeTicket(-1);
        output[4] = new TimeTicket(78);
        output[5] = new TimeTicket(-80);
        output[6] = new TimeTicket(51);
        output[7] = new TimeTicket(-86);
        output[8] = new TimeTicket(-27);
        output[9] = new TimeTicket(45);
        output[10] = new TimeTicket(-20);
        output[11] = new TimeTicket(21);
        output[12] = new TimeTicket(97);
        output[13] = new TimeTicket(79);
        output[14] = new TimeTicket(-57);
        output[15] = new TimeTicket(-20);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[16];
        answer[0] = new TimeTicket(-87);
        answer[1] = new TimeTicket(-86);
        answer[2] = new TimeTicket(-80);
        answer[3] = new TimeTicket(-75);
        answer[4] = new TimeTicket(-71);
        answer[5] = new TimeTicket(-57);
        answer[6] = new TimeTicket(-27);
        answer[7] = new TimeTicket(-20);
        answer[8] = new TimeTicket(-20);
        answer[9] = new TimeTicket(-1);
        answer[10] = new TimeTicket(21);
        answer[11] = new TimeTicket(45);
        answer[12] = new TimeTicket(51);
        answer[13] = new TimeTicket(78);
        answer[14] = new TimeTicket(79);
        answer[15] = new TimeTicket(97);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00017() {
        int[] output = new int[14];
        output[0] = -72;
        output[1] = -25;
        output[2] = -14;
        output[3] = -77;
        output[4] = 84;
        output[5] = -32;
        output[6] = 82;
        output[7] = 0;
        output[8] = -51;
        output[9] = 83;
        output[10] = -99;
        output[11] = 86;
        output[12] = -40;
        output[13] = -94;
        Sorting.radixSort(output);
        int[] answer = new int[14];
        answer[0] = -99;
        answer[1] = -94;
        answer[2] = -77;
        answer[3] = -72;
        answer[4] = -51;
        answer[5] = -40;
        answer[6] = -32;
        answer[7] = -25;
        answer[8] = -14;
        answer[9] = 0;
        answer[10] = 82;
        answer[11] = 83;
        answer[12] = 84;
        answer[13] = 86;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00018() {
        TimeTicket[] output = new TimeTicket[25];
        output[0] = new TimeTicket(13);
        output[1] = new TimeTicket(-81);
        output[2] = new TimeTicket(35);
        output[3] = new TimeTicket(60);
        output[4] = new TimeTicket(-4);
        output[5] = new TimeTicket(-75);
        output[6] = new TimeTicket(27);
        output[7] = new TimeTicket(-83);
        output[8] = new TimeTicket(-61);
        output[9] = new TimeTicket(-48);
        output[10] = new TimeTicket(-87);
        output[11] = new TimeTicket(-51);
        output[12] = new TimeTicket(55);
        output[13] = new TimeTicket(40);
        output[14] = new TimeTicket(34);
        output[15] = new TimeTicket(63);
        output[16] = new TimeTicket(56);
        output[17] = new TimeTicket(-70);
        output[18] = new TimeTicket(-26);
        output[19] = new TimeTicket(75);
        output[20] = new TimeTicket(-89);
        output[21] = new TimeTicket(9);
        output[22] = new TimeTicket(-15);
        output[23] = new TimeTicket(-74);
        output[24] = new TimeTicket(40);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[25];
        answer[0] = new TimeTicket(-89);
        answer[1] = new TimeTicket(-87);
        answer[2] = new TimeTicket(-83);
        answer[3] = new TimeTicket(-81);
        answer[4] = new TimeTicket(-75);
        answer[5] = new TimeTicket(-74);
        answer[6] = new TimeTicket(-70);
        answer[7] = new TimeTicket(-61);
        answer[8] = new TimeTicket(-51);
        answer[9] = new TimeTicket(-48);
        answer[10] = new TimeTicket(-26);
        answer[11] = new TimeTicket(-15);
        answer[12] = new TimeTicket(-4);
        answer[13] = new TimeTicket(9);
        answer[14] = new TimeTicket(13);
        answer[15] = new TimeTicket(27);
        answer[16] = new TimeTicket(34);
        answer[17] = new TimeTicket(35);
        answer[18] = new TimeTicket(40);
        answer[19] = new TimeTicket(40);
        answer[20] = new TimeTicket(55);
        answer[21] = new TimeTicket(56);
        answer[22] = new TimeTicket(60);
        answer[23] = new TimeTicket(63);
        answer[24] = new TimeTicket(75);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00019() {
        TimeTicket[] output = new TimeTicket[27];
        output[0] = new TimeTicket(19);
        output[1] = new TimeTicket(71);
        output[2] = new TimeTicket(-97);
        output[3] = new TimeTicket(99);
        output[4] = new TimeTicket(95);
        output[5] = new TimeTicket(40);
        output[6] = new TimeTicket(-22);
        output[7] = new TimeTicket(80);
        output[8] = new TimeTicket(-8);
        output[9] = new TimeTicket(30);
        output[10] = new TimeTicket(-44);
        output[11] = new TimeTicket(92);
        output[12] = new TimeTicket(-69);
        output[13] = new TimeTicket(67);
        output[14] = new TimeTicket(-12);
        output[15] = new TimeTicket(97);
        output[16] = new TimeTicket(4);
        output[17] = new TimeTicket(50);
        output[18] = new TimeTicket(-47);
        output[19] = new TimeTicket(50);
        output[20] = new TimeTicket(36);
        output[21] = new TimeTicket(72);
        output[22] = new TimeTicket(-71);
        output[23] = new TimeTicket(-17);
        output[24] = new TimeTicket(-58);
        output[25] = new TimeTicket(31);
        output[26] = new TimeTicket(-77);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[27];
        answer[0] = new TimeTicket(-97);
        answer[1] = new TimeTicket(-77);
        answer[2] = new TimeTicket(-71);
        answer[3] = new TimeTicket(-69);
        answer[4] = new TimeTicket(-58);
        answer[5] = new TimeTicket(-47);
        answer[6] = new TimeTicket(-44);
        answer[7] = new TimeTicket(-22);
        answer[8] = new TimeTicket(-17);
        answer[9] = new TimeTicket(-12);
        answer[10] = new TimeTicket(-8);
        answer[11] = new TimeTicket(4);
        answer[12] = new TimeTicket(19);
        answer[13] = new TimeTicket(30);
        answer[14] = new TimeTicket(31);
        answer[15] = new TimeTicket(36);
        answer[16] = new TimeTicket(40);
        answer[17] = new TimeTicket(50);
        answer[18] = new TimeTicket(50);
        answer[19] = new TimeTicket(67);
        answer[20] = new TimeTicket(71);
        answer[21] = new TimeTicket(72);
        answer[22] = new TimeTicket(80);
        answer[23] = new TimeTicket(92);
        answer[24] = new TimeTicket(95);
        answer[25] = new TimeTicket(97);
        answer[26] = new TimeTicket(99);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00020() {
        TimeTicket[] output = new TimeTicket[13];
        output[0] = new TimeTicket(5);
        output[1] = new TimeTicket(-36);
        output[2] = new TimeTicket(0);
        output[3] = new TimeTicket(93);
        output[4] = new TimeTicket(-15);
        output[5] = new TimeTicket(20);
        output[6] = new TimeTicket(9);
        output[7] = new TimeTicket(70);
        output[8] = new TimeTicket(-93);
        output[9] = new TimeTicket(-11);
        output[10] = new TimeTicket(62);
        output[11] = new TimeTicket(-80);
        output[12] = new TimeTicket(22);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[13];
        answer[0] = new TimeTicket(-93);
        answer[1] = new TimeTicket(-80);
        answer[2] = new TimeTicket(-36);
        answer[3] = new TimeTicket(-15);
        answer[4] = new TimeTicket(-11);
        answer[5] = new TimeTicket(0);
        answer[6] = new TimeTicket(5);
        answer[7] = new TimeTicket(9);
        answer[8] = new TimeTicket(20);
        answer[9] = new TimeTicket(22);
        answer[10] = new TimeTicket(62);
        answer[11] = new TimeTicket(70);
        answer[12] = new TimeTicket(93);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00021() {
        TimeTicket[] output = new TimeTicket[29];
        output[0] = new TimeTicket(-53);
        output[1] = new TimeTicket(54);
        output[2] = new TimeTicket(-85);
        output[3] = new TimeTicket(2);
        output[4] = new TimeTicket(32);
        output[5] = new TimeTicket(71);
        output[6] = new TimeTicket(-58);
        output[7] = new TimeTicket(63);
        output[8] = new TimeTicket(86);
        output[9] = new TimeTicket(-53);
        output[10] = new TimeTicket(6);
        output[11] = new TimeTicket(15);
        output[12] = new TimeTicket(56);
        output[13] = new TimeTicket(77);
        output[14] = new TimeTicket(13);
        output[15] = new TimeTicket(-33);
        output[16] = new TimeTicket(12);
        output[17] = new TimeTicket(10);
        output[18] = new TimeTicket(-32);
        output[19] = new TimeTicket(13);
        output[20] = new TimeTicket(89);
        output[21] = new TimeTicket(-90);
        output[22] = new TimeTicket(-41);
        output[23] = new TimeTicket(2);
        output[24] = new TimeTicket(63);
        output[25] = new TimeTicket(44);
        output[26] = new TimeTicket(64);
        output[27] = new TimeTicket(5);
        output[28] = new TimeTicket(-22);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[29];
        answer[0] = new TimeTicket(-90);
        answer[1] = new TimeTicket(-85);
        answer[2] = new TimeTicket(-58);
        answer[3] = new TimeTicket(-53);
        answer[4] = new TimeTicket(-53);
        answer[5] = new TimeTicket(-41);
        answer[6] = new TimeTicket(-33);
        answer[7] = new TimeTicket(-32);
        answer[8] = new TimeTicket(-22);
        answer[9] = new TimeTicket(2);
        answer[10] = new TimeTicket(2);
        answer[11] = new TimeTicket(5);
        answer[12] = new TimeTicket(6);
        answer[13] = new TimeTicket(10);
        answer[14] = new TimeTicket(12);
        answer[15] = new TimeTicket(13);
        answer[16] = new TimeTicket(13);
        answer[17] = new TimeTicket(15);
        answer[18] = new TimeTicket(32);
        answer[19] = new TimeTicket(44);
        answer[20] = new TimeTicket(54);
        answer[21] = new TimeTicket(56);
        answer[22] = new TimeTicket(63);
        answer[23] = new TimeTicket(63);
        answer[24] = new TimeTicket(64);
        answer[25] = new TimeTicket(71);
        answer[26] = new TimeTicket(77);
        answer[27] = new TimeTicket(86);
        answer[28] = new TimeTicket(89);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00022() {
        TimeTicket[] output = new TimeTicket[4];
        output[0] = new TimeTicket(0);
        output[1] = new TimeTicket(95);
        output[2] = new TimeTicket(8);
        output[3] = new TimeTicket(-57);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[4];
        answer[0] = new TimeTicket(-57);
        answer[1] = new TimeTicket(0);
        answer[2] = new TimeTicket(8);
        answer[3] = new TimeTicket(95);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00023() {
        int[] output = new int[23];
        output[0] = 36;
        output[1] = 1;
        output[2] = -6;
        output[3] = -70;
        output[4] = -96;
        output[5] = -20;
        output[6] = -95;
        output[7] = -7;
        output[8] = 7;
        output[9] = 70;
        output[10] = 44;
        output[11] = -30;
        output[12] = -66;
        output[13] = 33;
        output[14] = 35;
        output[15] = 2;
        output[16] = 50;
        output[17] = 53;
        output[18] = 33;
        output[19] = -76;
        output[20] = 99;
        output[21] = -49;
        output[22] = 24;
        Sorting.radixSort(output);
        int[] answer = new int[23];
        answer[0] = -96;
        answer[1] = -95;
        answer[2] = -76;
        answer[3] = -70;
        answer[4] = -66;
        answer[5] = -49;
        answer[6] = -30;
        answer[7] = -20;
        answer[8] = -7;
        answer[9] = -6;
        answer[10] = 1;
        answer[11] = 2;
        answer[12] = 7;
        answer[13] = 24;
        answer[14] = 33;
        answer[15] = 33;
        answer[16] = 35;
        answer[17] = 36;
        answer[18] = 44;
        answer[19] = 50;
        answer[20] = 53;
        answer[21] = 70;
        answer[22] = 99;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00024() {
        TimeTicket[] output = new TimeTicket[30];
        output[0] = new TimeTicket(-27);
        output[1] = new TimeTicket(60);
        output[2] = new TimeTicket(-37);
        output[3] = new TimeTicket(35);
        output[4] = new TimeTicket(8);
        output[5] = new TimeTicket(-56);
        output[6] = new TimeTicket(-21);
        output[7] = new TimeTicket(96);
        output[8] = new TimeTicket(36);
        output[9] = new TimeTicket(-16);
        output[10] = new TimeTicket(42);
        output[11] = new TimeTicket(8);
        output[12] = new TimeTicket(40);
        output[13] = new TimeTicket(32);
        output[14] = new TimeTicket(-14);
        output[15] = new TimeTicket(-7);
        output[16] = new TimeTicket(-48);
        output[17] = new TimeTicket(-71);
        output[18] = new TimeTicket(-96);
        output[19] = new TimeTicket(66);
        output[20] = new TimeTicket(11);
        output[21] = new TimeTicket(56);
        output[22] = new TimeTicket(73);
        output[23] = new TimeTicket(-1);
        output[24] = new TimeTicket(96);
        output[25] = new TimeTicket(27);
        output[26] = new TimeTicket(57);
        output[27] = new TimeTicket(99);
        output[28] = new TimeTicket(-33);
        output[29] = new TimeTicket(71);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[30];
        answer[0] = new TimeTicket(-96);
        answer[1] = new TimeTicket(-71);
        answer[2] = new TimeTicket(-56);
        answer[3] = new TimeTicket(-48);
        answer[4] = new TimeTicket(-37);
        answer[5] = new TimeTicket(-33);
        answer[6] = new TimeTicket(-27);
        answer[7] = new TimeTicket(-21);
        answer[8] = new TimeTicket(-16);
        answer[9] = new TimeTicket(-14);
        answer[10] = new TimeTicket(-7);
        answer[11] = new TimeTicket(-1);
        answer[12] = new TimeTicket(8);
        answer[13] = new TimeTicket(8);
        answer[14] = new TimeTicket(11);
        answer[15] = new TimeTicket(27);
        answer[16] = new TimeTicket(32);
        answer[17] = new TimeTicket(35);
        answer[18] = new TimeTicket(36);
        answer[19] = new TimeTicket(40);
        answer[20] = new TimeTicket(42);
        answer[21] = new TimeTicket(56);
        answer[22] = new TimeTicket(57);
        answer[23] = new TimeTicket(60);
        answer[24] = new TimeTicket(66);
        answer[25] = new TimeTicket(71);
        answer[26] = new TimeTicket(73);
        answer[27] = new TimeTicket(96);
        answer[28] = new TimeTicket(96);
        answer[29] = new TimeTicket(99);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00025() {
        TimeTicket[] output = new TimeTicket[10];
        output[0] = new TimeTicket(47);
        output[1] = new TimeTicket(1);
        output[2] = new TimeTicket(23);
        output[3] = new TimeTicket(44);
        output[4] = new TimeTicket(13);
        output[5] = new TimeTicket(63);
        output[6] = new TimeTicket(-93);
        output[7] = new TimeTicket(-93);
        output[8] = new TimeTicket(-7);
        output[9] = new TimeTicket(-57);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[10];
        answer[0] = new TimeTicket(-93);
        answer[1] = new TimeTicket(-93);
        answer[2] = new TimeTicket(-57);
        answer[3] = new TimeTicket(-7);
        answer[4] = new TimeTicket(1);
        answer[5] = new TimeTicket(13);
        answer[6] = new TimeTicket(23);
        answer[7] = new TimeTicket(44);
        answer[8] = new TimeTicket(47);
        answer[9] = new TimeTicket(63);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00026() {
        TimeTicket[] output = new TimeTicket[23];
        output[0] = new TimeTicket(78);
        output[1] = new TimeTicket(64);
        output[2] = new TimeTicket(-44);
        output[3] = new TimeTicket(79);
        output[4] = new TimeTicket(-10);
        output[5] = new TimeTicket(-36);
        output[6] = new TimeTicket(4);
        output[7] = new TimeTicket(4);
        output[8] = new TimeTicket(-78);
        output[9] = new TimeTicket(74);
        output[10] = new TimeTicket(-99);
        output[11] = new TimeTicket(80);
        output[12] = new TimeTicket(-54);
        output[13] = new TimeTicket(91);
        output[14] = new TimeTicket(-5);
        output[15] = new TimeTicket(-91);
        output[16] = new TimeTicket(-95);
        output[17] = new TimeTicket(41);
        output[18] = new TimeTicket(-70);
        output[19] = new TimeTicket(91);
        output[20] = new TimeTicket(-79);
        output[21] = new TimeTicket(-68);
        output[22] = new TimeTicket(-3);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[23];
        answer[0] = new TimeTicket(-99);
        answer[1] = new TimeTicket(-95);
        answer[2] = new TimeTicket(-91);
        answer[3] = new TimeTicket(-79);
        answer[4] = new TimeTicket(-78);
        answer[5] = new TimeTicket(-70);
        answer[6] = new TimeTicket(-68);
        answer[7] = new TimeTicket(-54);
        answer[8] = new TimeTicket(-44);
        answer[9] = new TimeTicket(-36);
        answer[10] = new TimeTicket(-10);
        answer[11] = new TimeTicket(-5);
        answer[12] = new TimeTicket(-3);
        answer[13] = new TimeTicket(4);
        answer[14] = new TimeTicket(4);
        answer[15] = new TimeTicket(41);
        answer[16] = new TimeTicket(64);
        answer[17] = new TimeTicket(74);
        answer[18] = new TimeTicket(78);
        answer[19] = new TimeTicket(79);
        answer[20] = new TimeTicket(80);
        answer[21] = new TimeTicket(91);
        answer[22] = new TimeTicket(91);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00027() {
        TimeTicket[] output = new TimeTicket[3];
        output[0] = new TimeTicket(69);
        output[1] = new TimeTicket(40);
        output[2] = new TimeTicket(27);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[3];
        answer[0] = new TimeTicket(27);
        answer[1] = new TimeTicket(40);
        answer[2] = new TimeTicket(69);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00028() {
        TimeTicket[] output = new TimeTicket[9];
        output[0] = new TimeTicket(86);
        output[1] = new TimeTicket(-80);
        output[2] = new TimeTicket(-29);
        output[3] = new TimeTicket(58);
        output[4] = new TimeTicket(71);
        output[5] = new TimeTicket(69);
        output[6] = new TimeTicket(-76);
        output[7] = new TimeTicket(89);
        output[8] = new TimeTicket(37);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[9];
        answer[0] = new TimeTicket(-80);
        answer[1] = new TimeTicket(-76);
        answer[2] = new TimeTicket(-29);
        answer[3] = new TimeTicket(37);
        answer[4] = new TimeTicket(58);
        answer[5] = new TimeTicket(69);
        answer[6] = new TimeTicket(71);
        answer[7] = new TimeTicket(86);
        answer[8] = new TimeTicket(89);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00029() {
        int[] output = new int[21];
        output[0] = -45;
        output[1] = -87;
        output[2] = 31;
        output[3] = -90;
        output[4] = -6;
        output[5] = 86;
        output[6] = -95;
        output[7] = 99;
        output[8] = 21;
        output[9] = 26;
        output[10] = -2;
        output[11] = -91;
        output[12] = 15;
        output[13] = 83;
        output[14] = -76;
        output[15] = 58;
        output[16] = 95;
        output[17] = -82;
        output[18] = 5;
        output[19] = 71;
        output[20] = -62;
        Sorting.radixSort(output);
        int[] answer = new int[21];
        answer[0] = -95;
        answer[1] = -91;
        answer[2] = -90;
        answer[3] = -87;
        answer[4] = -82;
        answer[5] = -76;
        answer[6] = -62;
        answer[7] = -45;
        answer[8] = -6;
        answer[9] = -2;
        answer[10] = 5;
        answer[11] = 15;
        answer[12] = 21;
        answer[13] = 26;
        answer[14] = 31;
        answer[15] = 58;
        answer[16] = 71;
        answer[17] = 83;
        answer[18] = 86;
        answer[19] = 95;
        answer[20] = 99;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00030() {
        TimeTicket[] output = new TimeTicket[12];
        output[0] = new TimeTicket(2);
        output[1] = new TimeTicket(54);
        output[2] = new TimeTicket(94);
        output[3] = new TimeTicket(28);
        output[4] = new TimeTicket(66);
        output[5] = new TimeTicket(66);
        output[6] = new TimeTicket(-47);
        output[7] = new TimeTicket(-37);
        output[8] = new TimeTicket(20);
        output[9] = new TimeTicket(27);
        output[10] = new TimeTicket(-43);
        output[11] = new TimeTicket(5);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[12];
        answer[0] = new TimeTicket(-47);
        answer[1] = new TimeTicket(-43);
        answer[2] = new TimeTicket(-37);
        answer[3] = new TimeTicket(2);
        answer[4] = new TimeTicket(5);
        answer[5] = new TimeTicket(20);
        answer[6] = new TimeTicket(27);
        answer[7] = new TimeTicket(28);
        answer[8] = new TimeTicket(54);
        answer[9] = new TimeTicket(66);
        answer[10] = new TimeTicket(66);
        answer[11] = new TimeTicket(94);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00031() {
        TimeTicket[] output = new TimeTicket[15];
        output[0] = new TimeTicket(55);
        output[1] = new TimeTicket(95);
        output[2] = new TimeTicket(12);
        output[3] = new TimeTicket(0);
        output[4] = new TimeTicket(-72);
        output[5] = new TimeTicket(-61);
        output[6] = new TimeTicket(8);
        output[7] = new TimeTicket(-86);
        output[8] = new TimeTicket(-3);
        output[9] = new TimeTicket(-43);
        output[10] = new TimeTicket(-18);
        output[11] = new TimeTicket(-31);
        output[12] = new TimeTicket(71);
        output[13] = new TimeTicket(-23);
        output[14] = new TimeTicket(1);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[15];
        answer[0] = new TimeTicket(-86);
        answer[1] = new TimeTicket(-72);
        answer[2] = new TimeTicket(-61);
        answer[3] = new TimeTicket(-43);
        answer[4] = new TimeTicket(-31);
        answer[5] = new TimeTicket(-23);
        answer[6] = new TimeTicket(-18);
        answer[7] = new TimeTicket(-3);
        answer[8] = new TimeTicket(0);
        answer[9] = new TimeTicket(1);
        answer[10] = new TimeTicket(8);
        answer[11] = new TimeTicket(12);
        answer[12] = new TimeTicket(55);
        answer[13] = new TimeTicket(71);
        answer[14] = new TimeTicket(95);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00032() {
        TimeTicket[] output = new TimeTicket[4];
        output[0] = new TimeTicket(-22);
        output[1] = new TimeTicket(-19);
        output[2] = new TimeTicket(-78);
        output[3] = new TimeTicket(42);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[4];
        answer[0] = new TimeTicket(-78);
        answer[1] = new TimeTicket(-22);
        answer[2] = new TimeTicket(-19);
        answer[3] = new TimeTicket(42);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00033() {
        TimeTicket[] output = new TimeTicket[17];
        output[0] = new TimeTicket(4);
        output[1] = new TimeTicket(57);
        output[2] = new TimeTicket(-31);
        output[3] = new TimeTicket(-98);
        output[4] = new TimeTicket(-2);
        output[5] = new TimeTicket(-85);
        output[6] = new TimeTicket(25);
        output[7] = new TimeTicket(-37);
        output[8] = new TimeTicket(-64);
        output[9] = new TimeTicket(-14);
        output[10] = new TimeTicket(-25);
        output[11] = new TimeTicket(42);
        output[12] = new TimeTicket(-58);
        output[13] = new TimeTicket(-31);
        output[14] = new TimeTicket(70);
        output[15] = new TimeTicket(38);
        output[16] = new TimeTicket(-35);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[17];
        answer[0] = new TimeTicket(-98);
        answer[1] = new TimeTicket(-85);
        answer[2] = new TimeTicket(-64);
        answer[3] = new TimeTicket(-58);
        answer[4] = new TimeTicket(-37);
        answer[5] = new TimeTicket(-35);
        answer[6] = new TimeTicket(-31);
        answer[7] = new TimeTicket(-31);
        answer[8] = new TimeTicket(-25);
        answer[9] = new TimeTicket(-14);
        answer[10] = new TimeTicket(-2);
        answer[11] = new TimeTicket(4);
        answer[12] = new TimeTicket(25);
        answer[13] = new TimeTicket(38);
        answer[14] = new TimeTicket(42);
        answer[15] = new TimeTicket(57);
        answer[16] = new TimeTicket(70);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00034() {
        TimeTicket[] output = new TimeTicket[27];
        output[0] = new TimeTicket(64);
        output[1] = new TimeTicket(26);
        output[2] = new TimeTicket(61);
        output[3] = new TimeTicket(62);
        output[4] = new TimeTicket(-7);
        output[5] = new TimeTicket(34);
        output[6] = new TimeTicket(14);
        output[7] = new TimeTicket(-99);
        output[8] = new TimeTicket(0);
        output[9] = new TimeTicket(6);
        output[10] = new TimeTicket(-44);
        output[11] = new TimeTicket(-6);
        output[12] = new TimeTicket(-78);
        output[13] = new TimeTicket(-68);
        output[14] = new TimeTicket(12);
        output[15] = new TimeTicket(-61);
        output[16] = new TimeTicket(81);
        output[17] = new TimeTicket(65);
        output[18] = new TimeTicket(69);
        output[19] = new TimeTicket(-42);
        output[20] = new TimeTicket(30);
        output[21] = new TimeTicket(-1);
        output[22] = new TimeTicket(8);
        output[23] = new TimeTicket(-89);
        output[24] = new TimeTicket(68);
        output[25] = new TimeTicket(98);
        output[26] = new TimeTicket(5);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[27];
        answer[0] = new TimeTicket(-99);
        answer[1] = new TimeTicket(-89);
        answer[2] = new TimeTicket(-78);
        answer[3] = new TimeTicket(-68);
        answer[4] = new TimeTicket(-61);
        answer[5] = new TimeTicket(-44);
        answer[6] = new TimeTicket(-42);
        answer[7] = new TimeTicket(-7);
        answer[8] = new TimeTicket(-6);
        answer[9] = new TimeTicket(-1);
        answer[10] = new TimeTicket(0);
        answer[11] = new TimeTicket(5);
        answer[12] = new TimeTicket(6);
        answer[13] = new TimeTicket(8);
        answer[14] = new TimeTicket(12);
        answer[15] = new TimeTicket(14);
        answer[16] = new TimeTicket(26);
        answer[17] = new TimeTicket(30);
        answer[18] = new TimeTicket(34);
        answer[19] = new TimeTicket(61);
        answer[20] = new TimeTicket(62);
        answer[21] = new TimeTicket(64);
        answer[22] = new TimeTicket(65);
        answer[23] = new TimeTicket(68);
        answer[24] = new TimeTicket(69);
        answer[25] = new TimeTicket(81);
        answer[26] = new TimeTicket(98);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00035() {
        int[] output = new int[6];
        output[0] = -69;
        output[1] = 5;
        output[2] = 33;
        output[3] = -72;
        output[4] = -91;
        output[5] = -39;
        Sorting.radixSort(output);
        int[] answer = new int[6];
        answer[0] = -91;
        answer[1] = -72;
        answer[2] = -69;
        answer[3] = -39;
        answer[4] = 5;
        answer[5] = 33;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00036() {
        TimeTicket[] output = new TimeTicket[24];
        output[0] = new TimeTicket(-54);
        output[1] = new TimeTicket(25);
        output[2] = new TimeTicket(67);
        output[3] = new TimeTicket(-96);
        output[4] = new TimeTicket(-1);
        output[5] = new TimeTicket(16);
        output[6] = new TimeTicket(88);
        output[7] = new TimeTicket(97);
        output[8] = new TimeTicket(-35);
        output[9] = new TimeTicket(59);
        output[10] = new TimeTicket(12);
        output[11] = new TimeTicket(-47);
        output[12] = new TimeTicket(65);
        output[13] = new TimeTicket(-87);
        output[14] = new TimeTicket(86);
        output[15] = new TimeTicket(-67);
        output[16] = new TimeTicket(-45);
        output[17] = new TimeTicket(-25);
        output[18] = new TimeTicket(-36);
        output[19] = new TimeTicket(47);
        output[20] = new TimeTicket(-67);
        output[21] = new TimeTicket(-2);
        output[22] = new TimeTicket(4);
        output[23] = new TimeTicket(-11);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[24];
        answer[0] = new TimeTicket(-96);
        answer[1] = new TimeTicket(-87);
        answer[2] = new TimeTicket(-67);
        answer[3] = new TimeTicket(-67);
        answer[4] = new TimeTicket(-54);
        answer[5] = new TimeTicket(-47);
        answer[6] = new TimeTicket(-45);
        answer[7] = new TimeTicket(-36);
        answer[8] = new TimeTicket(-35);
        answer[9] = new TimeTicket(-25);
        answer[10] = new TimeTicket(-11);
        answer[11] = new TimeTicket(-2);
        answer[12] = new TimeTicket(-1);
        answer[13] = new TimeTicket(4);
        answer[14] = new TimeTicket(12);
        answer[15] = new TimeTicket(16);
        answer[16] = new TimeTicket(25);
        answer[17] = new TimeTicket(47);
        answer[18] = new TimeTicket(59);
        answer[19] = new TimeTicket(65);
        answer[20] = new TimeTicket(67);
        answer[21] = new TimeTicket(86);
        answer[22] = new TimeTicket(88);
        answer[23] = new TimeTicket(97);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00037() {
        TimeTicket[] output = new TimeTicket[12];
        output[0] = new TimeTicket(-85);
        output[1] = new TimeTicket(-47);
        output[2] = new TimeTicket(58);
        output[3] = new TimeTicket(78);
        output[4] = new TimeTicket(15);
        output[5] = new TimeTicket(-32);
        output[6] = new TimeTicket(53);
        output[7] = new TimeTicket(-43);
        output[8] = new TimeTicket(7);
        output[9] = new TimeTicket(36);
        output[10] = new TimeTicket(96);
        output[11] = new TimeTicket(44);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[12];
        answer[0] = new TimeTicket(-85);
        answer[1] = new TimeTicket(-47);
        answer[2] = new TimeTicket(-43);
        answer[3] = new TimeTicket(-32);
        answer[4] = new TimeTicket(7);
        answer[5] = new TimeTicket(15);
        answer[6] = new TimeTicket(36);
        answer[7] = new TimeTicket(44);
        answer[8] = new TimeTicket(53);
        answer[9] = new TimeTicket(58);
        answer[10] = new TimeTicket(78);
        answer[11] = new TimeTicket(96);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00038() {
        TimeTicket[] output = new TimeTicket[21];
        output[0] = new TimeTicket(-11);
        output[1] = new TimeTicket(68);
        output[2] = new TimeTicket(-50);
        output[3] = new TimeTicket(-54);
        output[4] = new TimeTicket(-26);
        output[5] = new TimeTicket(-78);
        output[6] = new TimeTicket(37);
        output[7] = new TimeTicket(27);
        output[8] = new TimeTicket(26);
        output[9] = new TimeTicket(68);
        output[10] = new TimeTicket(-50);
        output[11] = new TimeTicket(96);
        output[12] = new TimeTicket(43);
        output[13] = new TimeTicket(-92);
        output[14] = new TimeTicket(16);
        output[15] = new TimeTicket(-18);
        output[16] = new TimeTicket(-72);
        output[17] = new TimeTicket(6);
        output[18] = new TimeTicket(56);
        output[19] = new TimeTicket(-30);
        output[20] = new TimeTicket(24);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[21];
        answer[0] = new TimeTicket(-92);
        answer[1] = new TimeTicket(-78);
        answer[2] = new TimeTicket(-72);
        answer[3] = new TimeTicket(-54);
        answer[4] = new TimeTicket(-50);
        answer[5] = new TimeTicket(-50);
        answer[6] = new TimeTicket(-30);
        answer[7] = new TimeTicket(-26);
        answer[8] = new TimeTicket(-18);
        answer[9] = new TimeTicket(-11);
        answer[10] = new TimeTicket(6);
        answer[11] = new TimeTicket(16);
        answer[12] = new TimeTicket(24);
        answer[13] = new TimeTicket(26);
        answer[14] = new TimeTicket(27);
        answer[15] = new TimeTicket(37);
        answer[16] = new TimeTicket(43);
        answer[17] = new TimeTicket(56);
        answer[18] = new TimeTicket(68);
        answer[19] = new TimeTicket(68);
        answer[20] = new TimeTicket(96);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00039() {
        TimeTicket[] output = new TimeTicket[26];
        output[0] = new TimeTicket(56);
        output[1] = new TimeTicket(-74);
        output[2] = new TimeTicket(47);
        output[3] = new TimeTicket(-51);
        output[4] = new TimeTicket(8);
        output[5] = new TimeTicket(90);
        output[6] = new TimeTicket(-23);
        output[7] = new TimeTicket(-8);
        output[8] = new TimeTicket(-96);
        output[9] = new TimeTicket(-90);
        output[10] = new TimeTicket(76);
        output[11] = new TimeTicket(18);
        output[12] = new TimeTicket(-68);
        output[13] = new TimeTicket(-86);
        output[14] = new TimeTicket(89);
        output[15] = new TimeTicket(16);
        output[16] = new TimeTicket(-58);
        output[17] = new TimeTicket(60);
        output[18] = new TimeTicket(-96);
        output[19] = new TimeTicket(-97);
        output[20] = new TimeTicket(16);
        output[21] = new TimeTicket(53);
        output[22] = new TimeTicket(3);
        output[23] = new TimeTicket(-97);
        output[24] = new TimeTicket(36);
        output[25] = new TimeTicket(-38);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[26];
        answer[0] = new TimeTicket(-97);
        answer[1] = new TimeTicket(-97);
        answer[2] = new TimeTicket(-96);
        answer[3] = new TimeTicket(-96);
        answer[4] = new TimeTicket(-90);
        answer[5] = new TimeTicket(-86);
        answer[6] = new TimeTicket(-74);
        answer[7] = new TimeTicket(-68);
        answer[8] = new TimeTicket(-58);
        answer[9] = new TimeTicket(-51);
        answer[10] = new TimeTicket(-38);
        answer[11] = new TimeTicket(-23);
        answer[12] = new TimeTicket(-8);
        answer[13] = new TimeTicket(3);
        answer[14] = new TimeTicket(8);
        answer[15] = new TimeTicket(16);
        answer[16] = new TimeTicket(16);
        answer[17] = new TimeTicket(18);
        answer[18] = new TimeTicket(36);
        answer[19] = new TimeTicket(47);
        answer[20] = new TimeTicket(53);
        answer[21] = new TimeTicket(56);
        answer[22] = new TimeTicket(60);
        answer[23] = new TimeTicket(76);
        answer[24] = new TimeTicket(89);
        answer[25] = new TimeTicket(90);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00040() {
        TimeTicket[] output = new TimeTicket[13];
        output[0] = new TimeTicket(-66);
        output[1] = new TimeTicket(19);
        output[2] = new TimeTicket(98);
        output[3] = new TimeTicket(92);
        output[4] = new TimeTicket(-16);
        output[5] = new TimeTicket(-14);
        output[6] = new TimeTicket(-64);
        output[7] = new TimeTicket(70);
        output[8] = new TimeTicket(47);
        output[9] = new TimeTicket(18);
        output[10] = new TimeTicket(10);
        output[11] = new TimeTicket(85);
        output[12] = new TimeTicket(55);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[13];
        answer[0] = new TimeTicket(-66);
        answer[1] = new TimeTicket(-64);
        answer[2] = new TimeTicket(-16);
        answer[3] = new TimeTicket(-14);
        answer[4] = new TimeTicket(10);
        answer[5] = new TimeTicket(18);
        answer[6] = new TimeTicket(19);
        answer[7] = new TimeTicket(47);
        answer[8] = new TimeTicket(55);
        answer[9] = new TimeTicket(70);
        answer[10] = new TimeTicket(85);
        answer[11] = new TimeTicket(92);
        answer[12] = new TimeTicket(98);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00041() {
        int[] output = new int[17];
        output[0] = -22;
        output[1] = 43;
        output[2] = -2;
        output[3] = -33;
        output[4] = 98;
        output[5] = -80;
        output[6] = 4;
        output[7] = -1;
        output[8] = 17;
        output[9] = 2;
        output[10] = -51;
        output[11] = -34;
        output[12] = 79;
        output[13] = 26;
        output[14] = 61;
        output[15] = 98;
        output[16] = -77;
        Sorting.radixSort(output);
        int[] answer = new int[17];
        answer[0] = -80;
        answer[1] = -77;
        answer[2] = -51;
        answer[3] = -34;
        answer[4] = -33;
        answer[5] = -22;
        answer[6] = -2;
        answer[7] = -1;
        answer[8] = 2;
        answer[9] = 4;
        answer[10] = 17;
        answer[11] = 26;
        answer[12] = 43;
        answer[13] = 61;
        answer[14] = 79;
        answer[15] = 98;
        answer[16] = 98;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00042() {
        TimeTicket[] output = new TimeTicket[13];
        output[0] = new TimeTicket(-44);
        output[1] = new TimeTicket(-98);
        output[2] = new TimeTicket(-30);
        output[3] = new TimeTicket(-19);
        output[4] = new TimeTicket(5);
        output[5] = new TimeTicket(-13);
        output[6] = new TimeTicket(-93);
        output[7] = new TimeTicket(-71);
        output[8] = new TimeTicket(-66);
        output[9] = new TimeTicket(17);
        output[10] = new TimeTicket(76);
        output[11] = new TimeTicket(-36);
        output[12] = new TimeTicket(5);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[13];
        answer[0] = new TimeTicket(-98);
        answer[1] = new TimeTicket(-93);
        answer[2] = new TimeTicket(-71);
        answer[3] = new TimeTicket(-66);
        answer[4] = new TimeTicket(-44);
        answer[5] = new TimeTicket(-36);
        answer[6] = new TimeTicket(-30);
        answer[7] = new TimeTicket(-19);
        answer[8] = new TimeTicket(-13);
        answer[9] = new TimeTicket(5);
        answer[10] = new TimeTicket(5);
        answer[11] = new TimeTicket(17);
        answer[12] = new TimeTicket(76);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00043() {
        TimeTicket[] output = new TimeTicket[13];
        output[0] = new TimeTicket(-1);
        output[1] = new TimeTicket(68);
        output[2] = new TimeTicket(90);
        output[3] = new TimeTicket(-80);
        output[4] = new TimeTicket(-2);
        output[5] = new TimeTicket(-50);
        output[6] = new TimeTicket(75);
        output[7] = new TimeTicket(-99);
        output[8] = new TimeTicket(42);
        output[9] = new TimeTicket(27);
        output[10] = new TimeTicket(-93);
        output[11] = new TimeTicket(-63);
        output[12] = new TimeTicket(-92);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[13];
        answer[0] = new TimeTicket(-99);
        answer[1] = new TimeTicket(-93);
        answer[2] = new TimeTicket(-92);
        answer[3] = new TimeTicket(-80);
        answer[4] = new TimeTicket(-63);
        answer[5] = new TimeTicket(-50);
        answer[6] = new TimeTicket(-2);
        answer[7] = new TimeTicket(-1);
        answer[8] = new TimeTicket(27);
        answer[9] = new TimeTicket(42);
        answer[10] = new TimeTicket(68);
        answer[11] = new TimeTicket(75);
        answer[12] = new TimeTicket(90);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00044() {
        TimeTicket[] output = new TimeTicket[21];
        output[0] = new TimeTicket(50);
        output[1] = new TimeTicket(45);
        output[2] = new TimeTicket(8);
        output[3] = new TimeTicket(82);
        output[4] = new TimeTicket(87);
        output[5] = new TimeTicket(76);
        output[6] = new TimeTicket(-96);
        output[7] = new TimeTicket(-72);
        output[8] = new TimeTicket(96);
        output[9] = new TimeTicket(-67);
        output[10] = new TimeTicket(-40);
        output[11] = new TimeTicket(85);
        output[12] = new TimeTicket(-98);
        output[13] = new TimeTicket(-64);
        output[14] = new TimeTicket(86);
        output[15] = new TimeTicket(99);
        output[16] = new TimeTicket(-66);
        output[17] = new TimeTicket(52);
        output[18] = new TimeTicket(30);
        output[19] = new TimeTicket(-39);
        output[20] = new TimeTicket(-81);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[21];
        answer[0] = new TimeTicket(-98);
        answer[1] = new TimeTicket(-96);
        answer[2] = new TimeTicket(-81);
        answer[3] = new TimeTicket(-72);
        answer[4] = new TimeTicket(-67);
        answer[5] = new TimeTicket(-66);
        answer[6] = new TimeTicket(-64);
        answer[7] = new TimeTicket(-40);
        answer[8] = new TimeTicket(-39);
        answer[9] = new TimeTicket(8);
        answer[10] = new TimeTicket(30);
        answer[11] = new TimeTicket(45);
        answer[12] = new TimeTicket(50);
        answer[13] = new TimeTicket(52);
        answer[14] = new TimeTicket(76);
        answer[15] = new TimeTicket(82);
        answer[16] = new TimeTicket(85);
        answer[17] = new TimeTicket(86);
        answer[18] = new TimeTicket(87);
        answer[19] = new TimeTicket(96);
        answer[20] = new TimeTicket(99);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00045() {
        TimeTicket[] output = new TimeTicket[26];
        output[0] = new TimeTicket(57);
        output[1] = new TimeTicket(-91);
        output[2] = new TimeTicket(83);
        output[3] = new TimeTicket(-88);
        output[4] = new TimeTicket(63);
        output[5] = new TimeTicket(-34);
        output[6] = new TimeTicket(55);
        output[7] = new TimeTicket(10);
        output[8] = new TimeTicket(-6);
        output[9] = new TimeTicket(-32);
        output[10] = new TimeTicket(-82);
        output[11] = new TimeTicket(-98);
        output[12] = new TimeTicket(-56);
        output[13] = new TimeTicket(-15);
        output[14] = new TimeTicket(61);
        output[15] = new TimeTicket(26);
        output[16] = new TimeTicket(-69);
        output[17] = new TimeTicket(96);
        output[18] = new TimeTicket(-4);
        output[19] = new TimeTicket(-50);
        output[20] = new TimeTicket(35);
        output[21] = new TimeTicket(38);
        output[22] = new TimeTicket(34);
        output[23] = new TimeTicket(-40);
        output[24] = new TimeTicket(-21);
        output[25] = new TimeTicket(-58);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[26];
        answer[0] = new TimeTicket(-98);
        answer[1] = new TimeTicket(-91);
        answer[2] = new TimeTicket(-88);
        answer[3] = new TimeTicket(-82);
        answer[4] = new TimeTicket(-69);
        answer[5] = new TimeTicket(-58);
        answer[6] = new TimeTicket(-56);
        answer[7] = new TimeTicket(-50);
        answer[8] = new TimeTicket(-40);
        answer[9] = new TimeTicket(-34);
        answer[10] = new TimeTicket(-32);
        answer[11] = new TimeTicket(-21);
        answer[12] = new TimeTicket(-15);
        answer[13] = new TimeTicket(-6);
        answer[14] = new TimeTicket(-4);
        answer[15] = new TimeTicket(10);
        answer[16] = new TimeTicket(26);
        answer[17] = new TimeTicket(34);
        answer[18] = new TimeTicket(35);
        answer[19] = new TimeTicket(38);
        answer[20] = new TimeTicket(55);
        answer[21] = new TimeTicket(57);
        answer[22] = new TimeTicket(61);
        answer[23] = new TimeTicket(63);
        answer[24] = new TimeTicket(83);
        answer[25] = new TimeTicket(96);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00046() {
        TimeTicket[] output = new TimeTicket[12];
        output[0] = new TimeTicket(-49);
        output[1] = new TimeTicket(14);
        output[2] = new TimeTicket(-33);
        output[3] = new TimeTicket(79);
        output[4] = new TimeTicket(-51);
        output[5] = new TimeTicket(73);
        output[6] = new TimeTicket(-47);
        output[7] = new TimeTicket(57);
        output[8] = new TimeTicket(11);
        output[9] = new TimeTicket(67);
        output[10] = new TimeTicket(-83);
        output[11] = new TimeTicket(96);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[12];
        answer[0] = new TimeTicket(-83);
        answer[1] = new TimeTicket(-51);
        answer[2] = new TimeTicket(-49);
        answer[3] = new TimeTicket(-47);
        answer[4] = new TimeTicket(-33);
        answer[5] = new TimeTicket(11);
        answer[6] = new TimeTicket(14);
        answer[7] = new TimeTicket(57);
        answer[8] = new TimeTicket(67);
        answer[9] = new TimeTicket(73);
        answer[10] = new TimeTicket(79);
        answer[11] = new TimeTicket(96);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00047() {
        int[] output = new int[2];
        output[0] = -61;
        output[1] = -43;
        Sorting.radixSort(output);
        int[] answer = new int[2];
        answer[0] = -61;
        answer[1] = -43;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00048() {
        TimeTicket[] output = new TimeTicket[10];
        output[0] = new TimeTicket(88);
        output[1] = new TimeTicket(97);
        output[2] = new TimeTicket(62);
        output[3] = new TimeTicket(3);
        output[4] = new TimeTicket(63);
        output[5] = new TimeTicket(-9);
        output[6] = new TimeTicket(56);
        output[7] = new TimeTicket(-62);
        output[8] = new TimeTicket(11);
        output[9] = new TimeTicket(47);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[10];
        answer[0] = new TimeTicket(-62);
        answer[1] = new TimeTicket(-9);
        answer[2] = new TimeTicket(3);
        answer[3] = new TimeTicket(11);
        answer[4] = new TimeTicket(47);
        answer[5] = new TimeTicket(56);
        answer[6] = new TimeTicket(62);
        answer[7] = new TimeTicket(63);
        answer[8] = new TimeTicket(88);
        answer[9] = new TimeTicket(97);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00049() {
        TimeTicket[] output = new TimeTicket[8];
        output[0] = new TimeTicket(-64);
        output[1] = new TimeTicket(-41);
        output[2] = new TimeTicket(90);
        output[3] = new TimeTicket(-59);
        output[4] = new TimeTicket(-34);
        output[5] = new TimeTicket(-2);
        output[6] = new TimeTicket(31);
        output[7] = new TimeTicket(31);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[8];
        answer[0] = new TimeTicket(-64);
        answer[1] = new TimeTicket(-59);
        answer[2] = new TimeTicket(-41);
        answer[3] = new TimeTicket(-34);
        answer[4] = new TimeTicket(-2);
        answer[5] = new TimeTicket(31);
        answer[6] = new TimeTicket(31);
        answer[7] = new TimeTicket(90);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00050() {
        TimeTicket[] output = new TimeTicket[27];
        output[0] = new TimeTicket(-17);
        output[1] = new TimeTicket(69);
        output[2] = new TimeTicket(70);
        output[3] = new TimeTicket(-90);
        output[4] = new TimeTicket(15);
        output[5] = new TimeTicket(-21);
        output[6] = new TimeTicket(-13);
        output[7] = new TimeTicket(8);
        output[8] = new TimeTicket(18);
        output[9] = new TimeTicket(70);
        output[10] = new TimeTicket(-84);
        output[11] = new TimeTicket(69);
        output[12] = new TimeTicket(46);
        output[13] = new TimeTicket(-93);
        output[14] = new TimeTicket(1);
        output[15] = new TimeTicket(78);
        output[16] = new TimeTicket(80);
        output[17] = new TimeTicket(-92);
        output[18] = new TimeTicket(1);
        output[19] = new TimeTicket(-73);
        output[20] = new TimeTicket(-87);
        output[21] = new TimeTicket(57);
        output[22] = new TimeTicket(-1);
        output[23] = new TimeTicket(69);
        output[24] = new TimeTicket(-39);
        output[25] = new TimeTicket(-97);
        output[26] = new TimeTicket(3);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[27];
        answer[0] = new TimeTicket(-97);
        answer[1] = new TimeTicket(-93);
        answer[2] = new TimeTicket(-92);
        answer[3] = new TimeTicket(-90);
        answer[4] = new TimeTicket(-87);
        answer[5] = new TimeTicket(-84);
        answer[6] = new TimeTicket(-73);
        answer[7] = new TimeTicket(-39);
        answer[8] = new TimeTicket(-21);
        answer[9] = new TimeTicket(-17);
        answer[10] = new TimeTicket(-13);
        answer[11] = new TimeTicket(-1);
        answer[12] = new TimeTicket(1);
        answer[13] = new TimeTicket(1);
        answer[14] = new TimeTicket(3);
        answer[15] = new TimeTicket(8);
        answer[16] = new TimeTicket(15);
        answer[17] = new TimeTicket(18);
        answer[18] = new TimeTicket(46);
        answer[19] = new TimeTicket(57);
        answer[20] = new TimeTicket(69);
        answer[21] = new TimeTicket(69);
        answer[22] = new TimeTicket(69);
        answer[23] = new TimeTicket(70);
        answer[24] = new TimeTicket(70);
        answer[25] = new TimeTicket(78);
        answer[26] = new TimeTicket(80);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00051() {
        TimeTicket[] output = new TimeTicket[25];
        output[0] = new TimeTicket(-26);
        output[1] = new TimeTicket(-12);
        output[2] = new TimeTicket(-41);
        output[3] = new TimeTicket(27);
        output[4] = new TimeTicket(80);
        output[5] = new TimeTicket(29);
        output[6] = new TimeTicket(73);
        output[7] = new TimeTicket(20);
        output[8] = new TimeTicket(70);
        output[9] = new TimeTicket(68);
        output[10] = new TimeTicket(91);
        output[11] = new TimeTicket(40);
        output[12] = new TimeTicket(83);
        output[13] = new TimeTicket(79);
        output[14] = new TimeTicket(30);
        output[15] = new TimeTicket(-8);
        output[16] = new TimeTicket(4);
        output[17] = new TimeTicket(-1);
        output[18] = new TimeTicket(97);
        output[19] = new TimeTicket(81);
        output[20] = new TimeTicket(99);
        output[21] = new TimeTicket(-51);
        output[22] = new TimeTicket(47);
        output[23] = new TimeTicket(-11);
        output[24] = new TimeTicket(25);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[25];
        answer[0] = new TimeTicket(-51);
        answer[1] = new TimeTicket(-41);
        answer[2] = new TimeTicket(-26);
        answer[3] = new TimeTicket(-12);
        answer[4] = new TimeTicket(-11);
        answer[5] = new TimeTicket(-8);
        answer[6] = new TimeTicket(-1);
        answer[7] = new TimeTicket(4);
        answer[8] = new TimeTicket(20);
        answer[9] = new TimeTicket(25);
        answer[10] = new TimeTicket(27);
        answer[11] = new TimeTicket(29);
        answer[12] = new TimeTicket(30);
        answer[13] = new TimeTicket(40);
        answer[14] = new TimeTicket(47);
        answer[15] = new TimeTicket(68);
        answer[16] = new TimeTicket(70);
        answer[17] = new TimeTicket(73);
        answer[18] = new TimeTicket(79);
        answer[19] = new TimeTicket(80);
        answer[20] = new TimeTicket(81);
        answer[21] = new TimeTicket(83);
        answer[22] = new TimeTicket(91);
        answer[23] = new TimeTicket(97);
        answer[24] = new TimeTicket(99);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00052() {
        TimeTicket[] output = new TimeTicket[30];
        output[0] = new TimeTicket(56);
        output[1] = new TimeTicket(14);
        output[2] = new TimeTicket(83);
        output[3] = new TimeTicket(-46);
        output[4] = new TimeTicket(-65);
        output[5] = new TimeTicket(-80);
        output[6] = new TimeTicket(-5);
        output[7] = new TimeTicket(-30);
        output[8] = new TimeTicket(49);
        output[9] = new TimeTicket(99);
        output[10] = new TimeTicket(91);
        output[11] = new TimeTicket(-22);
        output[12] = new TimeTicket(92);
        output[13] = new TimeTicket(21);
        output[14] = new TimeTicket(-11);
        output[15] = new TimeTicket(-80);
        output[16] = new TimeTicket(80);
        output[17] = new TimeTicket(-77);
        output[18] = new TimeTicket(57);
        output[19] = new TimeTicket(97);
        output[20] = new TimeTicket(60);
        output[21] = new TimeTicket(81);
        output[22] = new TimeTicket(-13);
        output[23] = new TimeTicket(-96);
        output[24] = new TimeTicket(69);
        output[25] = new TimeTicket(65);
        output[26] = new TimeTicket(51);
        output[27] = new TimeTicket(-4);
        output[28] = new TimeTicket(7);
        output[29] = new TimeTicket(2);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[30];
        answer[0] = new TimeTicket(-96);
        answer[1] = new TimeTicket(-80);
        answer[2] = new TimeTicket(-80);
        answer[3] = new TimeTicket(-77);
        answer[4] = new TimeTicket(-65);
        answer[5] = new TimeTicket(-46);
        answer[6] = new TimeTicket(-30);
        answer[7] = new TimeTicket(-22);
        answer[8] = new TimeTicket(-13);
        answer[9] = new TimeTicket(-11);
        answer[10] = new TimeTicket(-5);
        answer[11] = new TimeTicket(-4);
        answer[12] = new TimeTicket(2);
        answer[13] = new TimeTicket(7);
        answer[14] = new TimeTicket(14);
        answer[15] = new TimeTicket(21);
        answer[16] = new TimeTicket(49);
        answer[17] = new TimeTicket(51);
        answer[18] = new TimeTicket(56);
        answer[19] = new TimeTicket(57);
        answer[20] = new TimeTicket(60);
        answer[21] = new TimeTicket(65);
        answer[22] = new TimeTicket(69);
        answer[23] = new TimeTicket(80);
        answer[24] = new TimeTicket(81);
        answer[25] = new TimeTicket(83);
        answer[26] = new TimeTicket(91);
        answer[27] = new TimeTicket(92);
        answer[28] = new TimeTicket(97);
        answer[29] = new TimeTicket(99);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00053() {
        int[] output = new int[21];
        output[0] = -21;
        output[1] = 87;
        output[2] = -8;
        output[3] = -7;
        output[4] = 71;
        output[5] = 56;
        output[6] = -60;
        output[7] = 23;
        output[8] = -94;
        output[9] = 82;
        output[10] = 45;
        output[11] = 56;
        output[12] = -22;
        output[13] = 45;
        output[14] = -95;
        output[15] = 96;
        output[16] = 72;
        output[17] = 77;
        output[18] = 38;
        output[19] = -54;
        output[20] = 55;
        Sorting.radixSort(output);
        int[] answer = new int[21];
        answer[0] = -95;
        answer[1] = -94;
        answer[2] = -60;
        answer[3] = -54;
        answer[4] = -22;
        answer[5] = -21;
        answer[6] = -8;
        answer[7] = -7;
        answer[8] = 23;
        answer[9] = 38;
        answer[10] = 45;
        answer[11] = 45;
        answer[12] = 55;
        answer[13] = 56;
        answer[14] = 56;
        answer[15] = 71;
        answer[16] = 72;
        answer[17] = 77;
        answer[18] = 82;
        answer[19] = 87;
        answer[20] = 96;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00054() {
        TimeTicket[] output = new TimeTicket[20];
        output[0] = new TimeTicket(17);
        output[1] = new TimeTicket(-6);
        output[2] = new TimeTicket(0);
        output[3] = new TimeTicket(86);
        output[4] = new TimeTicket(-59);
        output[5] = new TimeTicket(-5);
        output[6] = new TimeTicket(-79);
        output[7] = new TimeTicket(22);
        output[8] = new TimeTicket(-64);
        output[9] = new TimeTicket(-21);
        output[10] = new TimeTicket(-75);
        output[11] = new TimeTicket(20);
        output[12] = new TimeTicket(-31);
        output[13] = new TimeTicket(-74);
        output[14] = new TimeTicket(19);
        output[15] = new TimeTicket(-91);
        output[16] = new TimeTicket(34);
        output[17] = new TimeTicket(38);
        output[18] = new TimeTicket(47);
        output[19] = new TimeTicket(-81);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[20];
        answer[0] = new TimeTicket(-91);
        answer[1] = new TimeTicket(-81);
        answer[2] = new TimeTicket(-79);
        answer[3] = new TimeTicket(-75);
        answer[4] = new TimeTicket(-74);
        answer[5] = new TimeTicket(-64);
        answer[6] = new TimeTicket(-59);
        answer[7] = new TimeTicket(-31);
        answer[8] = new TimeTicket(-21);
        answer[9] = new TimeTicket(-6);
        answer[10] = new TimeTicket(-5);
        answer[11] = new TimeTicket(0);
        answer[12] = new TimeTicket(17);
        answer[13] = new TimeTicket(19);
        answer[14] = new TimeTicket(20);
        answer[15] = new TimeTicket(22);
        answer[16] = new TimeTicket(34);
        answer[17] = new TimeTicket(38);
        answer[18] = new TimeTicket(47);
        answer[19] = new TimeTicket(86);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00055() {
        TimeTicket[] output = new TimeTicket[19];
        output[0] = new TimeTicket(-45);
        output[1] = new TimeTicket(22);
        output[2] = new TimeTicket(59);
        output[3] = new TimeTicket(-91);
        output[4] = new TimeTicket(63);
        output[5] = new TimeTicket(-90);
        output[6] = new TimeTicket(29);
        output[7] = new TimeTicket(7);
        output[8] = new TimeTicket(49);
        output[9] = new TimeTicket(-95);
        output[10] = new TimeTicket(70);
        output[11] = new TimeTicket(74);
        output[12] = new TimeTicket(80);
        output[13] = new TimeTicket(-80);
        output[14] = new TimeTicket(-65);
        output[15] = new TimeTicket(-63);
        output[16] = new TimeTicket(25);
        output[17] = new TimeTicket(71);
        output[18] = new TimeTicket(71);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[19];
        answer[0] = new TimeTicket(-95);
        answer[1] = new TimeTicket(-91);
        answer[2] = new TimeTicket(-90);
        answer[3] = new TimeTicket(-80);
        answer[4] = new TimeTicket(-65);
        answer[5] = new TimeTicket(-63);
        answer[6] = new TimeTicket(-45);
        answer[7] = new TimeTicket(7);
        answer[8] = new TimeTicket(22);
        answer[9] = new TimeTicket(25);
        answer[10] = new TimeTicket(29);
        answer[11] = new TimeTicket(49);
        answer[12] = new TimeTicket(59);
        answer[13] = new TimeTicket(63);
        answer[14] = new TimeTicket(70);
        answer[15] = new TimeTicket(71);
        answer[16] = new TimeTicket(71);
        answer[17] = new TimeTicket(74);
        answer[18] = new TimeTicket(80);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00056() {
        TimeTicket[] output = new TimeTicket[27];
        output[0] = new TimeTicket(-29);
        output[1] = new TimeTicket(13);
        output[2] = new TimeTicket(-19);
        output[3] = new TimeTicket(-30);
        output[4] = new TimeTicket(-66);
        output[5] = new TimeTicket(-27);
        output[6] = new TimeTicket(-77);
        output[7] = new TimeTicket(-28);
        output[8] = new TimeTicket(-91);
        output[9] = new TimeTicket(-36);
        output[10] = new TimeTicket(27);
        output[11] = new TimeTicket(13);
        output[12] = new TimeTicket(-20);
        output[13] = new TimeTicket(-58);
        output[14] = new TimeTicket(-54);
        output[15] = new TimeTicket(18);
        output[16] = new TimeTicket(-68);
        output[17] = new TimeTicket(74);
        output[18] = new TimeTicket(25);
        output[19] = new TimeTicket(-3);
        output[20] = new TimeTicket(-83);
        output[21] = new TimeTicket(72);
        output[22] = new TimeTicket(-89);
        output[23] = new TimeTicket(-44);
        output[24] = new TimeTicket(-81);
        output[25] = new TimeTicket(74);
        output[26] = new TimeTicket(-25);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[27];
        answer[0] = new TimeTicket(-91);
        answer[1] = new TimeTicket(-89);
        answer[2] = new TimeTicket(-83);
        answer[3] = new TimeTicket(-81);
        answer[4] = new TimeTicket(-77);
        answer[5] = new TimeTicket(-68);
        answer[6] = new TimeTicket(-66);
        answer[7] = new TimeTicket(-58);
        answer[8] = new TimeTicket(-54);
        answer[9] = new TimeTicket(-44);
        answer[10] = new TimeTicket(-36);
        answer[11] = new TimeTicket(-30);
        answer[12] = new TimeTicket(-29);
        answer[13] = new TimeTicket(-28);
        answer[14] = new TimeTicket(-27);
        answer[15] = new TimeTicket(-25);
        answer[16] = new TimeTicket(-20);
        answer[17] = new TimeTicket(-19);
        answer[18] = new TimeTicket(-3);
        answer[19] = new TimeTicket(13);
        answer[20] = new TimeTicket(13);
        answer[21] = new TimeTicket(18);
        answer[22] = new TimeTicket(25);
        answer[23] = new TimeTicket(27);
        answer[24] = new TimeTicket(72);
        answer[25] = new TimeTicket(74);
        answer[26] = new TimeTicket(74);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00057() {
        TimeTicket[] output = new TimeTicket[19];
        output[0] = new TimeTicket(-81);
        output[1] = new TimeTicket(-82);
        output[2] = new TimeTicket(49);
        output[3] = new TimeTicket(-26);
        output[4] = new TimeTicket(97);
        output[5] = new TimeTicket(8);
        output[6] = new TimeTicket(-23);
        output[7] = new TimeTicket(98);
        output[8] = new TimeTicket(-18);
        output[9] = new TimeTicket(-55);
        output[10] = new TimeTicket(4);
        output[11] = new TimeTicket(-21);
        output[12] = new TimeTicket(-35);
        output[13] = new TimeTicket(-41);
        output[14] = new TimeTicket(-87);
        output[15] = new TimeTicket(38);
        output[16] = new TimeTicket(-23);
        output[17] = new TimeTicket(-97);
        output[18] = new TimeTicket(46);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[19];
        answer[0] = new TimeTicket(-97);
        answer[1] = new TimeTicket(-87);
        answer[2] = new TimeTicket(-82);
        answer[3] = new TimeTicket(-81);
        answer[4] = new TimeTicket(-55);
        answer[5] = new TimeTicket(-41);
        answer[6] = new TimeTicket(-35);
        answer[7] = new TimeTicket(-26);
        answer[8] = new TimeTicket(-23);
        answer[9] = new TimeTicket(-23);
        answer[10] = new TimeTicket(-21);
        answer[11] = new TimeTicket(-18);
        answer[12] = new TimeTicket(4);
        answer[13] = new TimeTicket(8);
        answer[14] = new TimeTicket(38);
        answer[15] = new TimeTicket(46);
        answer[16] = new TimeTicket(49);
        answer[17] = new TimeTicket(97);
        answer[18] = new TimeTicket(98);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00058() {
        TimeTicket[] output = new TimeTicket[30];
        output[0] = new TimeTicket(-23);
        output[1] = new TimeTicket(95);
        output[2] = new TimeTicket(-39);
        output[3] = new TimeTicket(-13);
        output[4] = new TimeTicket(-62);
        output[5] = new TimeTicket(22);
        output[6] = new TimeTicket(-76);
        output[7] = new TimeTicket(-89);
        output[8] = new TimeTicket(-74);
        output[9] = new TimeTicket(-22);
        output[10] = new TimeTicket(67);
        output[11] = new TimeTicket(68);
        output[12] = new TimeTicket(41);
        output[13] = new TimeTicket(-91);
        output[14] = new TimeTicket(96);
        output[15] = new TimeTicket(-87);
        output[16] = new TimeTicket(95);
        output[17] = new TimeTicket(21);
        output[18] = new TimeTicket(64);
        output[19] = new TimeTicket(-50);
        output[20] = new TimeTicket(-42);
        output[21] = new TimeTicket(-6);
        output[22] = new TimeTicket(-14);
        output[23] = new TimeTicket(16);
        output[24] = new TimeTicket(91);
        output[25] = new TimeTicket(-91);
        output[26] = new TimeTicket(-53);
        output[27] = new TimeTicket(-38);
        output[28] = new TimeTicket(-23);
        output[29] = new TimeTicket(13);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[30];
        answer[0] = new TimeTicket(-91);
        answer[1] = new TimeTicket(-91);
        answer[2] = new TimeTicket(-89);
        answer[3] = new TimeTicket(-87);
        answer[4] = new TimeTicket(-76);
        answer[5] = new TimeTicket(-74);
        answer[6] = new TimeTicket(-62);
        answer[7] = new TimeTicket(-53);
        answer[8] = new TimeTicket(-50);
        answer[9] = new TimeTicket(-42);
        answer[10] = new TimeTicket(-39);
        answer[11] = new TimeTicket(-38);
        answer[12] = new TimeTicket(-23);
        answer[13] = new TimeTicket(-23);
        answer[14] = new TimeTicket(-22);
        answer[15] = new TimeTicket(-14);
        answer[16] = new TimeTicket(-13);
        answer[17] = new TimeTicket(-6);
        answer[18] = new TimeTicket(13);
        answer[19] = new TimeTicket(16);
        answer[20] = new TimeTicket(21);
        answer[21] = new TimeTicket(22);
        answer[22] = new TimeTicket(41);
        answer[23] = new TimeTicket(64);
        answer[24] = new TimeTicket(67);
        answer[25] = new TimeTicket(68);
        answer[26] = new TimeTicket(91);
        answer[27] = new TimeTicket(95);
        answer[28] = new TimeTicket(95);
        answer[29] = new TimeTicket(96);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00059() {
        int[] output = new int[26];
        output[0] = -67;
        output[1] = -49;
        output[2] = 53;
        output[3] = -66;
        output[4] = 20;
        output[5] = -49;
        output[6] = -87;
        output[7] = -43;
        output[8] = -22;
        output[9] = 6;
        output[10] = 74;
        output[11] = 14;
        output[12] = -83;
        output[13] = -9;
        output[14] = -20;
        output[15] = 38;
        output[16] = 77;
        output[17] = 14;
        output[18] = 10;
        output[19] = 26;
        output[20] = -50;
        output[21] = -65;
        output[22] = -72;
        output[23] = -88;
        output[24] = 87;
        output[25] = -49;
        Sorting.radixSort(output);
        int[] answer = new int[26];
        answer[0] = -88;
        answer[1] = -87;
        answer[2] = -83;
        answer[3] = -72;
        answer[4] = -67;
        answer[5] = -66;
        answer[6] = -65;
        answer[7] = -50;
        answer[8] = -49;
        answer[9] = -49;
        answer[10] = -49;
        answer[11] = -43;
        answer[12] = -22;
        answer[13] = -20;
        answer[14] = -9;
        answer[15] = 6;
        answer[16] = 10;
        answer[17] = 14;
        answer[18] = 14;
        answer[19] = 20;
        answer[20] = 26;
        answer[21] = 38;
        answer[22] = 53;
        answer[23] = 74;
        answer[24] = 77;
        answer[25] = 87;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00060() {
        TimeTicket[] output = new TimeTicket[26];
        output[0] = new TimeTicket(94);
        output[1] = new TimeTicket(89);
        output[2] = new TimeTicket(-29);
        output[3] = new TimeTicket(66);
        output[4] = new TimeTicket(-58);
        output[5] = new TimeTicket(76);
        output[6] = new TimeTicket(-58);
        output[7] = new TimeTicket(-24);
        output[8] = new TimeTicket(28);
        output[9] = new TimeTicket(63);
        output[10] = new TimeTicket(-74);
        output[11] = new TimeTicket(75);
        output[12] = new TimeTicket(17);
        output[13] = new TimeTicket(-66);
        output[14] = new TimeTicket(-51);
        output[15] = new TimeTicket(92);
        output[16] = new TimeTicket(81);
        output[17] = new TimeTicket(33);
        output[18] = new TimeTicket(-94);
        output[19] = new TimeTicket(-27);
        output[20] = new TimeTicket(59);
        output[21] = new TimeTicket(99);
        output[22] = new TimeTicket(-41);
        output[23] = new TimeTicket(79);
        output[24] = new TimeTicket(-53);
        output[25] = new TimeTicket(56);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[26];
        answer[0] = new TimeTicket(-94);
        answer[1] = new TimeTicket(-74);
        answer[2] = new TimeTicket(-66);
        answer[3] = new TimeTicket(-58);
        answer[4] = new TimeTicket(-58);
        answer[5] = new TimeTicket(-53);
        answer[6] = new TimeTicket(-51);
        answer[7] = new TimeTicket(-41);
        answer[8] = new TimeTicket(-29);
        answer[9] = new TimeTicket(-27);
        answer[10] = new TimeTicket(-24);
        answer[11] = new TimeTicket(17);
        answer[12] = new TimeTicket(28);
        answer[13] = new TimeTicket(33);
        answer[14] = new TimeTicket(56);
        answer[15] = new TimeTicket(59);
        answer[16] = new TimeTicket(63);
        answer[17] = new TimeTicket(66);
        answer[18] = new TimeTicket(75);
        answer[19] = new TimeTicket(76);
        answer[20] = new TimeTicket(79);
        answer[21] = new TimeTicket(81);
        answer[22] = new TimeTicket(89);
        answer[23] = new TimeTicket(92);
        answer[24] = new TimeTicket(94);
        answer[25] = new TimeTicket(99);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00061() {
        TimeTicket[] output = new TimeTicket[2];
        output[0] = new TimeTicket(18);
        output[1] = new TimeTicket(-5);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[2];
        answer[0] = new TimeTicket(-5);
        answer[1] = new TimeTicket(18);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00062() {
        TimeTicket[] output = new TimeTicket[25];
        output[0] = new TimeTicket(30);
        output[1] = new TimeTicket(29);
        output[2] = new TimeTicket(55);
        output[3] = new TimeTicket(25);
        output[4] = new TimeTicket(92);
        output[5] = new TimeTicket(22);
        output[6] = new TimeTicket(83);
        output[7] = new TimeTicket(70);
        output[8] = new TimeTicket(-4);
        output[9] = new TimeTicket(81);
        output[10] = new TimeTicket(37);
        output[11] = new TimeTicket(96);
        output[12] = new TimeTicket(-18);
        output[13] = new TimeTicket(55);
        output[14] = new TimeTicket(97);
        output[15] = new TimeTicket(35);
        output[16] = new TimeTicket(-7);
        output[17] = new TimeTicket(-78);
        output[18] = new TimeTicket(-44);
        output[19] = new TimeTicket(-45);
        output[20] = new TimeTicket(16);
        output[21] = new TimeTicket(52);
        output[22] = new TimeTicket(-87);
        output[23] = new TimeTicket(-64);
        output[24] = new TimeTicket(-37);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[25];
        answer[0] = new TimeTicket(-87);
        answer[1] = new TimeTicket(-78);
        answer[2] = new TimeTicket(-64);
        answer[3] = new TimeTicket(-45);
        answer[4] = new TimeTicket(-44);
        answer[5] = new TimeTicket(-37);
        answer[6] = new TimeTicket(-18);
        answer[7] = new TimeTicket(-7);
        answer[8] = new TimeTicket(-4);
        answer[9] = new TimeTicket(16);
        answer[10] = new TimeTicket(22);
        answer[11] = new TimeTicket(25);
        answer[12] = new TimeTicket(29);
        answer[13] = new TimeTicket(30);
        answer[14] = new TimeTicket(35);
        answer[15] = new TimeTicket(37);
        answer[16] = new TimeTicket(52);
        answer[17] = new TimeTicket(55);
        answer[18] = new TimeTicket(55);
        answer[19] = new TimeTicket(70);
        answer[20] = new TimeTicket(81);
        answer[21] = new TimeTicket(83);
        answer[22] = new TimeTicket(92);
        answer[23] = new TimeTicket(96);
        answer[24] = new TimeTicket(97);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00063() {
        TimeTicket[] output = new TimeTicket[14];
        output[0] = new TimeTicket(-79);
        output[1] = new TimeTicket(85);
        output[2] = new TimeTicket(-30);
        output[3] = new TimeTicket(-44);
        output[4] = new TimeTicket(-80);
        output[5] = new TimeTicket(39);
        output[6] = new TimeTicket(13);
        output[7] = new TimeTicket(-19);
        output[8] = new TimeTicket(-91);
        output[9] = new TimeTicket(49);
        output[10] = new TimeTicket(94);
        output[11] = new TimeTicket(69);
        output[12] = new TimeTicket(96);
        output[13] = new TimeTicket(-47);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[14];
        answer[0] = new TimeTicket(-91);
        answer[1] = new TimeTicket(-80);
        answer[2] = new TimeTicket(-79);
        answer[3] = new TimeTicket(-47);
        answer[4] = new TimeTicket(-44);
        answer[5] = new TimeTicket(-30);
        answer[6] = new TimeTicket(-19);
        answer[7] = new TimeTicket(13);
        answer[8] = new TimeTicket(39);
        answer[9] = new TimeTicket(49);
        answer[10] = new TimeTicket(69);
        answer[11] = new TimeTicket(85);
        answer[12] = new TimeTicket(94);
        answer[13] = new TimeTicket(96);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00064() {
        TimeTicket[] output = new TimeTicket[15];
        output[0] = new TimeTicket(62);
        output[1] = new TimeTicket(-29);
        output[2] = new TimeTicket(-58);
        output[3] = new TimeTicket(15);
        output[4] = new TimeTicket(-28);
        output[5] = new TimeTicket(-93);
        output[6] = new TimeTicket(82);
        output[7] = new TimeTicket(50);
        output[8] = new TimeTicket(96);
        output[9] = new TimeTicket(65);
        output[10] = new TimeTicket(52);
        output[11] = new TimeTicket(98);
        output[12] = new TimeTicket(-51);
        output[13] = new TimeTicket(45);
        output[14] = new TimeTicket(0);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[15];
        answer[0] = new TimeTicket(-93);
        answer[1] = new TimeTicket(-58);
        answer[2] = new TimeTicket(-51);
        answer[3] = new TimeTicket(-29);
        answer[4] = new TimeTicket(-28);
        answer[5] = new TimeTicket(0);
        answer[6] = new TimeTicket(15);
        answer[7] = new TimeTicket(45);
        answer[8] = new TimeTicket(50);
        answer[9] = new TimeTicket(52);
        answer[10] = new TimeTicket(62);
        answer[11] = new TimeTicket(65);
        answer[12] = new TimeTicket(82);
        answer[13] = new TimeTicket(96);
        answer[14] = new TimeTicket(98);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00065() {
        int[] output = new int[17];
        output[0] = -35;
        output[1] = -50;
        output[2] = -76;
        output[3] = 43;
        output[4] = 52;
        output[5] = 86;
        output[6] = 23;
        output[7] = -36;
        output[8] = -88;
        output[9] = 80;
        output[10] = 29;
        output[11] = 73;
        output[12] = -31;
        output[13] = 26;
        output[14] = -19;
        output[15] = 1;
        output[16] = -41;
        Sorting.radixSort(output);
        int[] answer = new int[17];
        answer[0] = -88;
        answer[1] = -76;
        answer[2] = -50;
        answer[3] = -41;
        answer[4] = -36;
        answer[5] = -35;
        answer[6] = -31;
        answer[7] = -19;
        answer[8] = 1;
        answer[9] = 23;
        answer[10] = 26;
        answer[11] = 29;
        answer[12] = 43;
        answer[13] = 52;
        answer[14] = 73;
        answer[15] = 80;
        answer[16] = 86;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00066() {
        TimeTicket[] output = new TimeTicket[27];
        output[0] = new TimeTicket(34);
        output[1] = new TimeTicket(-25);
        output[2] = new TimeTicket(4);
        output[3] = new TimeTicket(87);
        output[4] = new TimeTicket(50);
        output[5] = new TimeTicket(21);
        output[6] = new TimeTicket(-3);
        output[7] = new TimeTicket(56);
        output[8] = new TimeTicket(-55);
        output[9] = new TimeTicket(10);
        output[10] = new TimeTicket(-33);
        output[11] = new TimeTicket(-3);
        output[12] = new TimeTicket(-22);
        output[13] = new TimeTicket(-80);
        output[14] = new TimeTicket(58);
        output[15] = new TimeTicket(-35);
        output[16] = new TimeTicket(1);
        output[17] = new TimeTicket(5);
        output[18] = new TimeTicket(98);
        output[19] = new TimeTicket(80);
        output[20] = new TimeTicket(-47);
        output[21] = new TimeTicket(-19);
        output[22] = new TimeTicket(-48);
        output[23] = new TimeTicket(-79);
        output[24] = new TimeTicket(48);
        output[25] = new TimeTicket(12);
        output[26] = new TimeTicket(70);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[27];
        answer[0] = new TimeTicket(-80);
        answer[1] = new TimeTicket(-79);
        answer[2] = new TimeTicket(-55);
        answer[3] = new TimeTicket(-48);
        answer[4] = new TimeTicket(-47);
        answer[5] = new TimeTicket(-35);
        answer[6] = new TimeTicket(-33);
        answer[7] = new TimeTicket(-25);
        answer[8] = new TimeTicket(-22);
        answer[9] = new TimeTicket(-19);
        answer[10] = new TimeTicket(-3);
        answer[11] = new TimeTicket(-3);
        answer[12] = new TimeTicket(1);
        answer[13] = new TimeTicket(4);
        answer[14] = new TimeTicket(5);
        answer[15] = new TimeTicket(10);
        answer[16] = new TimeTicket(12);
        answer[17] = new TimeTicket(21);
        answer[18] = new TimeTicket(34);
        answer[19] = new TimeTicket(48);
        answer[20] = new TimeTicket(50);
        answer[21] = new TimeTicket(56);
        answer[22] = new TimeTicket(58);
        answer[23] = new TimeTicket(70);
        answer[24] = new TimeTicket(80);
        answer[25] = new TimeTicket(87);
        answer[26] = new TimeTicket(98);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00067() {
        TimeTicket[] output = new TimeTicket[27];
        output[0] = new TimeTicket(1);
        output[1] = new TimeTicket(-3);
        output[2] = new TimeTicket(-87);
        output[3] = new TimeTicket(-97);
        output[4] = new TimeTicket(44);
        output[5] = new TimeTicket(-97);
        output[6] = new TimeTicket(86);
        output[7] = new TimeTicket(26);
        output[8] = new TimeTicket(26);
        output[9] = new TimeTicket(-11);
        output[10] = new TimeTicket(-65);
        output[11] = new TimeTicket(-86);
        output[12] = new TimeTicket(77);
        output[13] = new TimeTicket(14);
        output[14] = new TimeTicket(-67);
        output[15] = new TimeTicket(42);
        output[16] = new TimeTicket(-36);
        output[17] = new TimeTicket(12);
        output[18] = new TimeTicket(-99);
        output[19] = new TimeTicket(-91);
        output[20] = new TimeTicket(-47);
        output[21] = new TimeTicket(-35);
        output[22] = new TimeTicket(87);
        output[23] = new TimeTicket(-60);
        output[24] = new TimeTicket(57);
        output[25] = new TimeTicket(61);
        output[26] = new TimeTicket(-35);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[27];
        answer[0] = new TimeTicket(-99);
        answer[1] = new TimeTicket(-97);
        answer[2] = new TimeTicket(-97);
        answer[3] = new TimeTicket(-91);
        answer[4] = new TimeTicket(-87);
        answer[5] = new TimeTicket(-86);
        answer[6] = new TimeTicket(-67);
        answer[7] = new TimeTicket(-65);
        answer[8] = new TimeTicket(-60);
        answer[9] = new TimeTicket(-47);
        answer[10] = new TimeTicket(-36);
        answer[11] = new TimeTicket(-35);
        answer[12] = new TimeTicket(-35);
        answer[13] = new TimeTicket(-11);
        answer[14] = new TimeTicket(-3);
        answer[15] = new TimeTicket(1);
        answer[16] = new TimeTicket(12);
        answer[17] = new TimeTicket(14);
        answer[18] = new TimeTicket(26);
        answer[19] = new TimeTicket(26);
        answer[20] = new TimeTicket(42);
        answer[21] = new TimeTicket(44);
        answer[22] = new TimeTicket(57);
        answer[23] = new TimeTicket(61);
        answer[24] = new TimeTicket(77);
        answer[25] = new TimeTicket(86);
        answer[26] = new TimeTicket(87);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00068() {
        TimeTicket[] output = new TimeTicket[7];
        output[0] = new TimeTicket(91);
        output[1] = new TimeTicket(38);
        output[2] = new TimeTicket(-21);
        output[3] = new TimeTicket(95);
        output[4] = new TimeTicket(-73);
        output[5] = new TimeTicket(42);
        output[6] = new TimeTicket(69);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[7];
        answer[0] = new TimeTicket(-73);
        answer[1] = new TimeTicket(-21);
        answer[2] = new TimeTicket(38);
        answer[3] = new TimeTicket(42);
        answer[4] = new TimeTicket(69);
        answer[5] = new TimeTicket(91);
        answer[6] = new TimeTicket(95);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00069() {
        TimeTicket[] output = new TimeTicket[27];
        output[0] = new TimeTicket(73);
        output[1] = new TimeTicket(-13);
        output[2] = new TimeTicket(-3);
        output[3] = new TimeTicket(-12);
        output[4] = new TimeTicket(14);
        output[5] = new TimeTicket(47);
        output[6] = new TimeTicket(3);
        output[7] = new TimeTicket(41);
        output[8] = new TimeTicket(-50);
        output[9] = new TimeTicket(-61);
        output[10] = new TimeTicket(-90);
        output[11] = new TimeTicket(-35);
        output[12] = new TimeTicket(-35);
        output[13] = new TimeTicket(0);
        output[14] = new TimeTicket(-23);
        output[15] = new TimeTicket(54);
        output[16] = new TimeTicket(-45);
        output[17] = new TimeTicket(-24);
        output[18] = new TimeTicket(66);
        output[19] = new TimeTicket(69);
        output[20] = new TimeTicket(69);
        output[21] = new TimeTicket(-41);
        output[22] = new TimeTicket(-73);
        output[23] = new TimeTicket(-42);
        output[24] = new TimeTicket(-85);
        output[25] = new TimeTicket(76);
        output[26] = new TimeTicket(54);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[27];
        answer[0] = new TimeTicket(-90);
        answer[1] = new TimeTicket(-85);
        answer[2] = new TimeTicket(-73);
        answer[3] = new TimeTicket(-61);
        answer[4] = new TimeTicket(-50);
        answer[5] = new TimeTicket(-45);
        answer[6] = new TimeTicket(-42);
        answer[7] = new TimeTicket(-41);
        answer[8] = new TimeTicket(-35);
        answer[9] = new TimeTicket(-35);
        answer[10] = new TimeTicket(-24);
        answer[11] = new TimeTicket(-23);
        answer[12] = new TimeTicket(-13);
        answer[13] = new TimeTicket(-12);
        answer[14] = new TimeTicket(-3);
        answer[15] = new TimeTicket(0);
        answer[16] = new TimeTicket(3);
        answer[17] = new TimeTicket(14);
        answer[18] = new TimeTicket(41);
        answer[19] = new TimeTicket(47);
        answer[20] = new TimeTicket(54);
        answer[21] = new TimeTicket(54);
        answer[22] = new TimeTicket(66);
        answer[23] = new TimeTicket(69);
        answer[24] = new TimeTicket(69);
        answer[25] = new TimeTicket(73);
        answer[26] = new TimeTicket(76);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00070() {
        TimeTicket[] output = new TimeTicket[11];
        output[0] = new TimeTicket(-32);
        output[1] = new TimeTicket(32);
        output[2] = new TimeTicket(0);
        output[3] = new TimeTicket(-23);
        output[4] = new TimeTicket(20);
        output[5] = new TimeTicket(66);
        output[6] = new TimeTicket(83);
        output[7] = new TimeTicket(-84);
        output[8] = new TimeTicket(44);
        output[9] = new TimeTicket(52);
        output[10] = new TimeTicket(0);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[11];
        answer[0] = new TimeTicket(-84);
        answer[1] = new TimeTicket(-32);
        answer[2] = new TimeTicket(-23);
        answer[3] = new TimeTicket(0);
        answer[4] = new TimeTicket(0);
        answer[5] = new TimeTicket(20);
        answer[6] = new TimeTicket(32);
        answer[7] = new TimeTicket(44);
        answer[8] = new TimeTicket(52);
        answer[9] = new TimeTicket(66);
        answer[10] = new TimeTicket(83);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00071() {
        int[] output = new int[10];
        output[0] = 47;
        output[1] = -16;
        output[2] = 74;
        output[3] = -55;
        output[4] = 42;
        output[5] = -98;
        output[6] = 81;
        output[7] = -2;
        output[8] = 38;
        output[9] = 68;
        Sorting.radixSort(output);
        int[] answer = new int[10];
        answer[0] = -98;
        answer[1] = -55;
        answer[2] = -16;
        answer[3] = -2;
        answer[4] = 38;
        answer[5] = 42;
        answer[6] = 47;
        answer[7] = 68;
        answer[8] = 74;
        answer[9] = 81;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00072() {
        TimeTicket[] output = new TimeTicket[2];
        output[0] = new TimeTicket(98);
        output[1] = new TimeTicket(29);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[2];
        answer[0] = new TimeTicket(29);
        answer[1] = new TimeTicket(98);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00073() {
        TimeTicket[] output = new TimeTicket[9];
        output[0] = new TimeTicket(-40);
        output[1] = new TimeTicket(-48);
        output[2] = new TimeTicket(3);
        output[3] = new TimeTicket(35);
        output[4] = new TimeTicket(57);
        output[5] = new TimeTicket(19);
        output[6] = new TimeTicket(22);
        output[7] = new TimeTicket(-64);
        output[8] = new TimeTicket(87);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[9];
        answer[0] = new TimeTicket(-64);
        answer[1] = new TimeTicket(-48);
        answer[2] = new TimeTicket(-40);
        answer[3] = new TimeTicket(3);
        answer[4] = new TimeTicket(19);
        answer[5] = new TimeTicket(22);
        answer[6] = new TimeTicket(35);
        answer[7] = new TimeTicket(57);
        answer[8] = new TimeTicket(87);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00074() {
        TimeTicket[] output = new TimeTicket[11];
        output[0] = new TimeTicket(83);
        output[1] = new TimeTicket(95);
        output[2] = new TimeTicket(32);
        output[3] = new TimeTicket(-25);
        output[4] = new TimeTicket(82);
        output[5] = new TimeTicket(94);
        output[6] = new TimeTicket(-41);
        output[7] = new TimeTicket(38);
        output[8] = new TimeTicket(-43);
        output[9] = new TimeTicket(45);
        output[10] = new TimeTicket(51);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[11];
        answer[0] = new TimeTicket(-43);
        answer[1] = new TimeTicket(-41);
        answer[2] = new TimeTicket(-25);
        answer[3] = new TimeTicket(32);
        answer[4] = new TimeTicket(38);
        answer[5] = new TimeTicket(45);
        answer[6] = new TimeTicket(51);
        answer[7] = new TimeTicket(82);
        answer[8] = new TimeTicket(83);
        answer[9] = new TimeTicket(94);
        answer[10] = new TimeTicket(95);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00075() {
        TimeTicket[] output = new TimeTicket[4];
        output[0] = new TimeTicket(-27);
        output[1] = new TimeTicket(92);
        output[2] = new TimeTicket(4);
        output[3] = new TimeTicket(80);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[4];
        answer[0] = new TimeTicket(-27);
        answer[1] = new TimeTicket(4);
        answer[2] = new TimeTicket(80);
        answer[3] = new TimeTicket(92);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00076() {
        TimeTicket[] output = new TimeTicket[24];
        output[0] = new TimeTicket(-40);
        output[1] = new TimeTicket(44);
        output[2] = new TimeTicket(30);
        output[3] = new TimeTicket(78);
        output[4] = new TimeTicket(26);
        output[5] = new TimeTicket(-25);
        output[6] = new TimeTicket(25);
        output[7] = new TimeTicket(-17);
        output[8] = new TimeTicket(37);
        output[9] = new TimeTicket(56);
        output[10] = new TimeTicket(99);
        output[11] = new TimeTicket(53);
        output[12] = new TimeTicket(43);
        output[13] = new TimeTicket(75);
        output[14] = new TimeTicket(-11);
        output[15] = new TimeTicket(-61);
        output[16] = new TimeTicket(37);
        output[17] = new TimeTicket(77);
        output[18] = new TimeTicket(71);
        output[19] = new TimeTicket(-62);
        output[20] = new TimeTicket(3);
        output[21] = new TimeTicket(-40);
        output[22] = new TimeTicket(-88);
        output[23] = new TimeTicket(79);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[24];
        answer[0] = new TimeTicket(-88);
        answer[1] = new TimeTicket(-62);
        answer[2] = new TimeTicket(-61);
        answer[3] = new TimeTicket(-40);
        answer[4] = new TimeTicket(-40);
        answer[5] = new TimeTicket(-25);
        answer[6] = new TimeTicket(-17);
        answer[7] = new TimeTicket(-11);
        answer[8] = new TimeTicket(3);
        answer[9] = new TimeTicket(25);
        answer[10] = new TimeTicket(26);
        answer[11] = new TimeTicket(30);
        answer[12] = new TimeTicket(37);
        answer[13] = new TimeTicket(37);
        answer[14] = new TimeTicket(43);
        answer[15] = new TimeTicket(44);
        answer[16] = new TimeTicket(53);
        answer[17] = new TimeTicket(56);
        answer[18] = new TimeTicket(71);
        answer[19] = new TimeTicket(75);
        answer[20] = new TimeTicket(77);
        answer[21] = new TimeTicket(78);
        answer[22] = new TimeTicket(79);
        answer[23] = new TimeTicket(99);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00077() {
        int[] output = new int[9];
        output[0] = 18;
        output[1] = 43;
        output[2] = 45;
        output[3] = -13;
        output[4] = 72;
        output[5] = 49;
        output[6] = -57;
        output[7] = -79;
        output[8] = -10;
        Sorting.radixSort(output);
        int[] answer = new int[9];
        answer[0] = -79;
        answer[1] = -57;
        answer[2] = -13;
        answer[3] = -10;
        answer[4] = 18;
        answer[5] = 43;
        answer[6] = 45;
        answer[7] = 49;
        answer[8] = 72;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00078() {
        TimeTicket[] output = new TimeTicket[20];
        output[0] = new TimeTicket(-31);
        output[1] = new TimeTicket(-39);
        output[2] = new TimeTicket(-99);
        output[3] = new TimeTicket(72);
        output[4] = new TimeTicket(-54);
        output[5] = new TimeTicket(72);
        output[6] = new TimeTicket(-81);
        output[7] = new TimeTicket(-42);
        output[8] = new TimeTicket(60);
        output[9] = new TimeTicket(35);
        output[10] = new TimeTicket(96);
        output[11] = new TimeTicket(0);
        output[12] = new TimeTicket(92);
        output[13] = new TimeTicket(-32);
        output[14] = new TimeTicket(84);
        output[15] = new TimeTicket(-95);
        output[16] = new TimeTicket(58);
        output[17] = new TimeTicket(27);
        output[18] = new TimeTicket(-84);
        output[19] = new TimeTicket(55);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[20];
        answer[0] = new TimeTicket(-99);
        answer[1] = new TimeTicket(-95);
        answer[2] = new TimeTicket(-84);
        answer[3] = new TimeTicket(-81);
        answer[4] = new TimeTicket(-54);
        answer[5] = new TimeTicket(-42);
        answer[6] = new TimeTicket(-39);
        answer[7] = new TimeTicket(-32);
        answer[8] = new TimeTicket(-31);
        answer[9] = new TimeTicket(0);
        answer[10] = new TimeTicket(27);
        answer[11] = new TimeTicket(35);
        answer[12] = new TimeTicket(55);
        answer[13] = new TimeTicket(58);
        answer[14] = new TimeTicket(60);
        answer[15] = new TimeTicket(72);
        answer[16] = new TimeTicket(72);
        answer[17] = new TimeTicket(84);
        answer[18] = new TimeTicket(92);
        answer[19] = new TimeTicket(96);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00079() {
        TimeTicket[] output = new TimeTicket[13];
        output[0] = new TimeTicket(98);
        output[1] = new TimeTicket(90);
        output[2] = new TimeTicket(-71);
        output[3] = new TimeTicket(78);
        output[4] = new TimeTicket(-96);
        output[5] = new TimeTicket(75);
        output[6] = new TimeTicket(-44);
        output[7] = new TimeTicket(83);
        output[8] = new TimeTicket(77);
        output[9] = new TimeTicket(71);
        output[10] = new TimeTicket(2);
        output[11] = new TimeTicket(-23);
        output[12] = new TimeTicket(87);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[13];
        answer[0] = new TimeTicket(-96);
        answer[1] = new TimeTicket(-71);
        answer[2] = new TimeTicket(-44);
        answer[3] = new TimeTicket(-23);
        answer[4] = new TimeTicket(2);
        answer[5] = new TimeTicket(71);
        answer[6] = new TimeTicket(75);
        answer[7] = new TimeTicket(77);
        answer[8] = new TimeTicket(78);
        answer[9] = new TimeTicket(83);
        answer[10] = new TimeTicket(87);
        answer[11] = new TimeTicket(90);
        answer[12] = new TimeTicket(98);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00080() {
        TimeTicket[] output = new TimeTicket[15];
        output[0] = new TimeTicket(-35);
        output[1] = new TimeTicket(-49);
        output[2] = new TimeTicket(73);
        output[3] = new TimeTicket(32);
        output[4] = new TimeTicket(44);
        output[5] = new TimeTicket(-55);
        output[6] = new TimeTicket(-64);
        output[7] = new TimeTicket(11);
        output[8] = new TimeTicket(-34);
        output[9] = new TimeTicket(-45);
        output[10] = new TimeTicket(-91);
        output[11] = new TimeTicket(46);
        output[12] = new TimeTicket(-19);
        output[13] = new TimeTicket(56);
        output[14] = new TimeTicket(-60);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[15];
        answer[0] = new TimeTicket(-91);
        answer[1] = new TimeTicket(-64);
        answer[2] = new TimeTicket(-60);
        answer[3] = new TimeTicket(-55);
        answer[4] = new TimeTicket(-49);
        answer[5] = new TimeTicket(-45);
        answer[6] = new TimeTicket(-35);
        answer[7] = new TimeTicket(-34);
        answer[8] = new TimeTicket(-19);
        answer[9] = new TimeTicket(11);
        answer[10] = new TimeTicket(32);
        answer[11] = new TimeTicket(44);
        answer[12] = new TimeTicket(46);
        answer[13] = new TimeTicket(56);
        answer[14] = new TimeTicket(73);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00081() {
        TimeTicket[] output = new TimeTicket[20];
        output[0] = new TimeTicket(99);
        output[1] = new TimeTicket(-69);
        output[2] = new TimeTicket(-96);
        output[3] = new TimeTicket(4);
        output[4] = new TimeTicket(31);
        output[5] = new TimeTicket(46);
        output[6] = new TimeTicket(29);
        output[7] = new TimeTicket(72);
        output[8] = new TimeTicket(-60);
        output[9] = new TimeTicket(35);
        output[10] = new TimeTicket(23);
        output[11] = new TimeTicket(38);
        output[12] = new TimeTicket(25);
        output[13] = new TimeTicket(18);
        output[14] = new TimeTicket(61);
        output[15] = new TimeTicket(-90);
        output[16] = new TimeTicket(43);
        output[17] = new TimeTicket(43);
        output[18] = new TimeTicket(-34);
        output[19] = new TimeTicket(-86);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[20];
        answer[0] = new TimeTicket(-96);
        answer[1] = new TimeTicket(-90);
        answer[2] = new TimeTicket(-86);
        answer[3] = new TimeTicket(-69);
        answer[4] = new TimeTicket(-60);
        answer[5] = new TimeTicket(-34);
        answer[6] = new TimeTicket(4);
        answer[7] = new TimeTicket(18);
        answer[8] = new TimeTicket(23);
        answer[9] = new TimeTicket(25);
        answer[10] = new TimeTicket(29);
        answer[11] = new TimeTicket(31);
        answer[12] = new TimeTicket(35);
        answer[13] = new TimeTicket(38);
        answer[14] = new TimeTicket(43);
        answer[15] = new TimeTicket(43);
        answer[16] = new TimeTicket(46);
        answer[17] = new TimeTicket(61);
        answer[18] = new TimeTicket(72);
        answer[19] = new TimeTicket(99);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00082() {
        TimeTicket[] output = new TimeTicket[23];
        output[0] = new TimeTicket(66);
        output[1] = new TimeTicket(15);
        output[2] = new TimeTicket(57);
        output[3] = new TimeTicket(30);
        output[4] = new TimeTicket(-44);
        output[5] = new TimeTicket(49);
        output[6] = new TimeTicket(56);
        output[7] = new TimeTicket(-83);
        output[8] = new TimeTicket(19);
        output[9] = new TimeTicket(71);
        output[10] = new TimeTicket(-56);
        output[11] = new TimeTicket(-29);
        output[12] = new TimeTicket(40);
        output[13] = new TimeTicket(-74);
        output[14] = new TimeTicket(51);
        output[15] = new TimeTicket(17);
        output[16] = new TimeTicket(74);
        output[17] = new TimeTicket(11);
        output[18] = new TimeTicket(80);
        output[19] = new TimeTicket(73);
        output[20] = new TimeTicket(22);
        output[21] = new TimeTicket(49);
        output[22] = new TimeTicket(34);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[23];
        answer[0] = new TimeTicket(-83);
        answer[1] = new TimeTicket(-74);
        answer[2] = new TimeTicket(-56);
        answer[3] = new TimeTicket(-44);
        answer[4] = new TimeTicket(-29);
        answer[5] = new TimeTicket(11);
        answer[6] = new TimeTicket(15);
        answer[7] = new TimeTicket(17);
        answer[8] = new TimeTicket(19);
        answer[9] = new TimeTicket(22);
        answer[10] = new TimeTicket(30);
        answer[11] = new TimeTicket(34);
        answer[12] = new TimeTicket(40);
        answer[13] = new TimeTicket(49);
        answer[14] = new TimeTicket(49);
        answer[15] = new TimeTicket(51);
        answer[16] = new TimeTicket(56);
        answer[17] = new TimeTicket(57);
        answer[18] = new TimeTicket(66);
        answer[19] = new TimeTicket(71);
        answer[20] = new TimeTicket(73);
        answer[21] = new TimeTicket(74);
        answer[22] = new TimeTicket(80);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00083() {
        int[] output = new int[10];
        output[0] = -6;
        output[1] = -32;
        output[2] = -81;
        output[3] = -20;
        output[4] = -63;
        output[5] = -95;
        output[6] = 27;
        output[7] = -71;
        output[8] = -32;
        output[9] = 77;
        Sorting.radixSort(output);
        int[] answer = new int[10];
        answer[0] = -95;
        answer[1] = -81;
        answer[2] = -71;
        answer[3] = -63;
        answer[4] = -32;
        answer[5] = -32;
        answer[6] = -20;
        answer[7] = -6;
        answer[8] = 27;
        answer[9] = 77;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00084() {
        TimeTicket[] output = new TimeTicket[10];
        output[0] = new TimeTicket(66);
        output[1] = new TimeTicket(66);
        output[2] = new TimeTicket(6);
        output[3] = new TimeTicket(43);
        output[4] = new TimeTicket(66);
        output[5] = new TimeTicket(-17);
        output[6] = new TimeTicket(-99);
        output[7] = new TimeTicket(-18);
        output[8] = new TimeTicket(92);
        output[9] = new TimeTicket(-64);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[10];
        answer[0] = new TimeTicket(-99);
        answer[1] = new TimeTicket(-64);
        answer[2] = new TimeTicket(-18);
        answer[3] = new TimeTicket(-17);
        answer[4] = new TimeTicket(6);
        answer[5] = new TimeTicket(43);
        answer[6] = new TimeTicket(66);
        answer[7] = new TimeTicket(66);
        answer[8] = new TimeTicket(66);
        answer[9] = new TimeTicket(92);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00085() {
        TimeTicket[] output = new TimeTicket[14];
        output[0] = new TimeTicket(-21);
        output[1] = new TimeTicket(24);
        output[2] = new TimeTicket(38);
        output[3] = new TimeTicket(-86);
        output[4] = new TimeTicket(-80);
        output[5] = new TimeTicket(40);
        output[6] = new TimeTicket(34);
        output[7] = new TimeTicket(-95);
        output[8] = new TimeTicket(-67);
        output[9] = new TimeTicket(-35);
        output[10] = new TimeTicket(-36);
        output[11] = new TimeTicket(60);
        output[12] = new TimeTicket(18);
        output[13] = new TimeTicket(-31);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[14];
        answer[0] = new TimeTicket(-95);
        answer[1] = new TimeTicket(-86);
        answer[2] = new TimeTicket(-80);
        answer[3] = new TimeTicket(-67);
        answer[4] = new TimeTicket(-36);
        answer[5] = new TimeTicket(-35);
        answer[6] = new TimeTicket(-31);
        answer[7] = new TimeTicket(-21);
        answer[8] = new TimeTicket(18);
        answer[9] = new TimeTicket(24);
        answer[10] = new TimeTicket(34);
        answer[11] = new TimeTicket(38);
        answer[12] = new TimeTicket(40);
        answer[13] = new TimeTicket(60);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00086() {
        TimeTicket[] output = new TimeTicket[1];
        output[0] = new TimeTicket(39);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[1];
        answer[0] = new TimeTicket(39);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00087() {
        TimeTicket[] output = new TimeTicket[17];
        output[0] = new TimeTicket(78);
        output[1] = new TimeTicket(60);
        output[2] = new TimeTicket(55);
        output[3] = new TimeTicket(89);
        output[4] = new TimeTicket(16);
        output[5] = new TimeTicket(58);
        output[6] = new TimeTicket(39);
        output[7] = new TimeTicket(-80);
        output[8] = new TimeTicket(53);
        output[9] = new TimeTicket(66);
        output[10] = new TimeTicket(77);
        output[11] = new TimeTicket(-40);
        output[12] = new TimeTicket(-90);
        output[13] = new TimeTicket(-5);
        output[14] = new TimeTicket(-83);
        output[15] = new TimeTicket(-70);
        output[16] = new TimeTicket(-97);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[17];
        answer[0] = new TimeTicket(-97);
        answer[1] = new TimeTicket(-90);
        answer[2] = new TimeTicket(-83);
        answer[3] = new TimeTicket(-80);
        answer[4] = new TimeTicket(-70);
        answer[5] = new TimeTicket(-40);
        answer[6] = new TimeTicket(-5);
        answer[7] = new TimeTicket(16);
        answer[8] = new TimeTicket(39);
        answer[9] = new TimeTicket(53);
        answer[10] = new TimeTicket(55);
        answer[11] = new TimeTicket(58);
        answer[12] = new TimeTicket(60);
        answer[13] = new TimeTicket(66);
        answer[14] = new TimeTicket(77);
        answer[15] = new TimeTicket(78);
        answer[16] = new TimeTicket(89);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00088() {
        TimeTicket[] output = new TimeTicket[20];
        output[0] = new TimeTicket(-65);
        output[1] = new TimeTicket(-52);
        output[2] = new TimeTicket(0);
        output[3] = new TimeTicket(-40);
        output[4] = new TimeTicket(-92);
        output[5] = new TimeTicket(14);
        output[6] = new TimeTicket(-8);
        output[7] = new TimeTicket(4);
        output[8] = new TimeTicket(50);
        output[9] = new TimeTicket(-28);
        output[10] = new TimeTicket(-1);
        output[11] = new TimeTicket(-67);
        output[12] = new TimeTicket(32);
        output[13] = new TimeTicket(25);
        output[14] = new TimeTicket(46);
        output[15] = new TimeTicket(52);
        output[16] = new TimeTicket(-1);
        output[17] = new TimeTicket(-46);
        output[18] = new TimeTicket(21);
        output[19] = new TimeTicket(-27);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[20];
        answer[0] = new TimeTicket(-92);
        answer[1] = new TimeTicket(-67);
        answer[2] = new TimeTicket(-65);
        answer[3] = new TimeTicket(-52);
        answer[4] = new TimeTicket(-46);
        answer[5] = new TimeTicket(-40);
        answer[6] = new TimeTicket(-28);
        answer[7] = new TimeTicket(-27);
        answer[8] = new TimeTicket(-8);
        answer[9] = new TimeTicket(-1);
        answer[10] = new TimeTicket(-1);
        answer[11] = new TimeTicket(0);
        answer[12] = new TimeTicket(4);
        answer[13] = new TimeTicket(14);
        answer[14] = new TimeTicket(21);
        answer[15] = new TimeTicket(25);
        answer[16] = new TimeTicket(32);
        answer[17] = new TimeTicket(46);
        answer[18] = new TimeTicket(50);
        answer[19] = new TimeTicket(52);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00089() {
        int[] output = new int[4];
        output[0] = 56;
        output[1] = 22;
        output[2] = 79;
        output[3] = -50;
        Sorting.radixSort(output);
        int[] answer = new int[4];
        answer[0] = -50;
        answer[1] = 22;
        answer[2] = 56;
        answer[3] = 79;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00090() {
        TimeTicket[] output = new TimeTicket[20];
        output[0] = new TimeTicket(-43);
        output[1] = new TimeTicket(-87);
        output[2] = new TimeTicket(-4);
        output[3] = new TimeTicket(0);
        output[4] = new TimeTicket(66);
        output[5] = new TimeTicket(-92);
        output[6] = new TimeTicket(-16);
        output[7] = new TimeTicket(-8);
        output[8] = new TimeTicket(33);
        output[9] = new TimeTicket(23);
        output[10] = new TimeTicket(-98);
        output[11] = new TimeTicket(7);
        output[12] = new TimeTicket(-56);
        output[13] = new TimeTicket(-53);
        output[14] = new TimeTicket(-60);
        output[15] = new TimeTicket(33);
        output[16] = new TimeTicket(74);
        output[17] = new TimeTicket(-34);
        output[18] = new TimeTicket(69);
        output[19] = new TimeTicket(26);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[20];
        answer[0] = new TimeTicket(-98);
        answer[1] = new TimeTicket(-92);
        answer[2] = new TimeTicket(-87);
        answer[3] = new TimeTicket(-60);
        answer[4] = new TimeTicket(-56);
        answer[5] = new TimeTicket(-53);
        answer[6] = new TimeTicket(-43);
        answer[7] = new TimeTicket(-34);
        answer[8] = new TimeTicket(-16);
        answer[9] = new TimeTicket(-8);
        answer[10] = new TimeTicket(-4);
        answer[11] = new TimeTicket(0);
        answer[12] = new TimeTicket(7);
        answer[13] = new TimeTicket(23);
        answer[14] = new TimeTicket(26);
        answer[15] = new TimeTicket(33);
        answer[16] = new TimeTicket(33);
        answer[17] = new TimeTicket(66);
        answer[18] = new TimeTicket(69);
        answer[19] = new TimeTicket(74);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00091() {
        TimeTicket[] output = new TimeTicket[18];
        output[0] = new TimeTicket(59);
        output[1] = new TimeTicket(88);
        output[2] = new TimeTicket(30);
        output[3] = new TimeTicket(-66);
        output[4] = new TimeTicket(-48);
        output[5] = new TimeTicket(-60);
        output[6] = new TimeTicket(-81);
        output[7] = new TimeTicket(-37);
        output[8] = new TimeTicket(82);
        output[9] = new TimeTicket(-34);
        output[10] = new TimeTicket(28);
        output[11] = new TimeTicket(-45);
        output[12] = new TimeTicket(-40);
        output[13] = new TimeTicket(16);
        output[14] = new TimeTicket(-34);
        output[15] = new TimeTicket(-17);
        output[16] = new TimeTicket(-91);
        output[17] = new TimeTicket(-3);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[18];
        answer[0] = new TimeTicket(-91);
        answer[1] = new TimeTicket(-81);
        answer[2] = new TimeTicket(-66);
        answer[3] = new TimeTicket(-60);
        answer[4] = new TimeTicket(-48);
        answer[5] = new TimeTicket(-45);
        answer[6] = new TimeTicket(-40);
        answer[7] = new TimeTicket(-37);
        answer[8] = new TimeTicket(-34);
        answer[9] = new TimeTicket(-34);
        answer[10] = new TimeTicket(-17);
        answer[11] = new TimeTicket(-3);
        answer[12] = new TimeTicket(16);
        answer[13] = new TimeTicket(28);
        answer[14] = new TimeTicket(30);
        answer[15] = new TimeTicket(59);
        answer[16] = new TimeTicket(82);
        answer[17] = new TimeTicket(88);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00092() {
        TimeTicket[] output = new TimeTicket[8];
        output[0] = new TimeTicket(96);
        output[1] = new TimeTicket(-28);
        output[2] = new TimeTicket(-98);
        output[3] = new TimeTicket(38);
        output[4] = new TimeTicket(-4);
        output[5] = new TimeTicket(32);
        output[6] = new TimeTicket(45);
        output[7] = new TimeTicket(83);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[8];
        answer[0] = new TimeTicket(-98);
        answer[1] = new TimeTicket(-28);
        answer[2] = new TimeTicket(-4);
        answer[3] = new TimeTicket(32);
        answer[4] = new TimeTicket(38);
        answer[5] = new TimeTicket(45);
        answer[6] = new TimeTicket(83);
        answer[7] = new TimeTicket(96);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00093() {
        TimeTicket[] output = new TimeTicket[26];
        output[0] = new TimeTicket(64);
        output[1] = new TimeTicket(-16);
        output[2] = new TimeTicket(62);
        output[3] = new TimeTicket(-15);
        output[4] = new TimeTicket(-77);
        output[5] = new TimeTicket(-63);
        output[6] = new TimeTicket(-89);
        output[7] = new TimeTicket(29);
        output[8] = new TimeTicket(-47);
        output[9] = new TimeTicket(48);
        output[10] = new TimeTicket(98);
        output[11] = new TimeTicket(-99);
        output[12] = new TimeTicket(41);
        output[13] = new TimeTicket(66);
        output[14] = new TimeTicket(18);
        output[15] = new TimeTicket(-14);
        output[16] = new TimeTicket(-42);
        output[17] = new TimeTicket(12);
        output[18] = new TimeTicket(67);
        output[19] = new TimeTicket(62);
        output[20] = new TimeTicket(-44);
        output[21] = new TimeTicket(-93);
        output[22] = new TimeTicket(26);
        output[23] = new TimeTicket(4);
        output[24] = new TimeTicket(53);
        output[25] = new TimeTicket(-16);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[26];
        answer[0] = new TimeTicket(-99);
        answer[1] = new TimeTicket(-93);
        answer[2] = new TimeTicket(-89);
        answer[3] = new TimeTicket(-77);
        answer[4] = new TimeTicket(-63);
        answer[5] = new TimeTicket(-47);
        answer[6] = new TimeTicket(-44);
        answer[7] = new TimeTicket(-42);
        answer[8] = new TimeTicket(-16);
        answer[9] = new TimeTicket(-16);
        answer[10] = new TimeTicket(-15);
        answer[11] = new TimeTicket(-14);
        answer[12] = new TimeTicket(4);
        answer[13] = new TimeTicket(12);
        answer[14] = new TimeTicket(18);
        answer[15] = new TimeTicket(26);
        answer[16] = new TimeTicket(29);
        answer[17] = new TimeTicket(41);
        answer[18] = new TimeTicket(48);
        answer[19] = new TimeTicket(53);
        answer[20] = new TimeTicket(62);
        answer[21] = new TimeTicket(62);
        answer[22] = new TimeTicket(64);
        answer[23] = new TimeTicket(66);
        answer[24] = new TimeTicket(67);
        answer[25] = new TimeTicket(98);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00094() {
        TimeTicket[] output = new TimeTicket[25];
        output[0] = new TimeTicket(-5);
        output[1] = new TimeTicket(69);
        output[2] = new TimeTicket(-33);
        output[3] = new TimeTicket(19);
        output[4] = new TimeTicket(-33);
        output[5] = new TimeTicket(-38);
        output[6] = new TimeTicket(88);
        output[7] = new TimeTicket(17);
        output[8] = new TimeTicket(-33);
        output[9] = new TimeTicket(-47);
        output[10] = new TimeTicket(-19);
        output[11] = new TimeTicket(-15);
        output[12] = new TimeTicket(66);
        output[13] = new TimeTicket(-88);
        output[14] = new TimeTicket(64);
        output[15] = new TimeTicket(20);
        output[16] = new TimeTicket(4);
        output[17] = new TimeTicket(63);
        output[18] = new TimeTicket(18);
        output[19] = new TimeTicket(-24);
        output[20] = new TimeTicket(-52);
        output[21] = new TimeTicket(70);
        output[22] = new TimeTicket(35);
        output[23] = new TimeTicket(47);
        output[24] = new TimeTicket(-99);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[25];
        answer[0] = new TimeTicket(-99);
        answer[1] = new TimeTicket(-88);
        answer[2] = new TimeTicket(-52);
        answer[3] = new TimeTicket(-47);
        answer[4] = new TimeTicket(-38);
        answer[5] = new TimeTicket(-33);
        answer[6] = new TimeTicket(-33);
        answer[7] = new TimeTicket(-33);
        answer[8] = new TimeTicket(-24);
        answer[9] = new TimeTicket(-19);
        answer[10] = new TimeTicket(-15);
        answer[11] = new TimeTicket(-5);
        answer[12] = new TimeTicket(4);
        answer[13] = new TimeTicket(17);
        answer[14] = new TimeTicket(18);
        answer[15] = new TimeTicket(19);
        answer[16] = new TimeTicket(20);
        answer[17] = new TimeTicket(35);
        answer[18] = new TimeTicket(47);
        answer[19] = new TimeTicket(63);
        answer[20] = new TimeTicket(64);
        answer[21] = new TimeTicket(66);
        answer[22] = new TimeTicket(69);
        answer[23] = new TimeTicket(70);
        answer[24] = new TimeTicket(88);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00095() {
        int[] output = new int[19];
        output[0] = 33;
        output[1] = 83;
        output[2] = -99;
        output[3] = -96;
        output[4] = -68;
        output[5] = -80;
        output[6] = -47;
        output[7] = -75;
        output[8] = 58;
        output[9] = -56;
        output[10] = -97;
        output[11] = 9;
        output[12] = -16;
        output[13] = 79;
        output[14] = -44;
        output[15] = 40;
        output[16] = 7;
        output[17] = -28;
        output[18] = -48;
        Sorting.radixSort(output);
        int[] answer = new int[19];
        answer[0] = -99;
        answer[1] = -97;
        answer[2] = -96;
        answer[3] = -80;
        answer[4] = -75;
        answer[5] = -68;
        answer[6] = -56;
        answer[7] = -48;
        answer[8] = -47;
        answer[9] = -44;
        answer[10] = -28;
        answer[11] = -16;
        answer[12] = 7;
        answer[13] = 9;
        answer[14] = 33;
        answer[15] = 40;
        answer[16] = 58;
        answer[17] = 79;
        answer[18] = 83;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00096() {
        TimeTicket[] output = new TimeTicket[13];
        output[0] = new TimeTicket(-42);
        output[1] = new TimeTicket(-26);
        output[2] = new TimeTicket(-11);
        output[3] = new TimeTicket(-56);
        output[4] = new TimeTicket(64);
        output[5] = new TimeTicket(34);
        output[6] = new TimeTicket(-52);
        output[7] = new TimeTicket(20);
        output[8] = new TimeTicket(31);
        output[9] = new TimeTicket(-96);
        output[10] = new TimeTicket(-45);
        output[11] = new TimeTicket(9);
        output[12] = new TimeTicket(46);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[13];
        answer[0] = new TimeTicket(-96);
        answer[1] = new TimeTicket(-56);
        answer[2] = new TimeTicket(-52);
        answer[3] = new TimeTicket(-45);
        answer[4] = new TimeTicket(-42);
        answer[5] = new TimeTicket(-26);
        answer[6] = new TimeTicket(-11);
        answer[7] = new TimeTicket(9);
        answer[8] = new TimeTicket(20);
        answer[9] = new TimeTicket(31);
        answer[10] = new TimeTicket(34);
        answer[11] = new TimeTicket(46);
        answer[12] = new TimeTicket(64);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00097() {
        TimeTicket[] output = new TimeTicket[22];
        output[0] = new TimeTicket(94);
        output[1] = new TimeTicket(47);
        output[2] = new TimeTicket(-6);
        output[3] = new TimeTicket(-16);
        output[4] = new TimeTicket(30);
        output[5] = new TimeTicket(95);
        output[6] = new TimeTicket(78);
        output[7] = new TimeTicket(-24);
        output[8] = new TimeTicket(-83);
        output[9] = new TimeTicket(-95);
        output[10] = new TimeTicket(-16);
        output[11] = new TimeTicket(-86);
        output[12] = new TimeTicket(-14);
        output[13] = new TimeTicket(-58);
        output[14] = new TimeTicket(-91);
        output[15] = new TimeTicket(54);
        output[16] = new TimeTicket(-14);
        output[17] = new TimeTicket(61);
        output[18] = new TimeTicket(-53);
        output[19] = new TimeTicket(7);
        output[20] = new TimeTicket(35);
        output[21] = new TimeTicket(-62);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[22];
        answer[0] = new TimeTicket(-95);
        answer[1] = new TimeTicket(-91);
        answer[2] = new TimeTicket(-86);
        answer[3] = new TimeTicket(-83);
        answer[4] = new TimeTicket(-62);
        answer[5] = new TimeTicket(-58);
        answer[6] = new TimeTicket(-53);
        answer[7] = new TimeTicket(-24);
        answer[8] = new TimeTicket(-16);
        answer[9] = new TimeTicket(-16);
        answer[10] = new TimeTicket(-14);
        answer[11] = new TimeTicket(-14);
        answer[12] = new TimeTicket(-6);
        answer[13] = new TimeTicket(7);
        answer[14] = new TimeTicket(30);
        answer[15] = new TimeTicket(35);
        answer[16] = new TimeTicket(47);
        answer[17] = new TimeTicket(54);
        answer[18] = new TimeTicket(61);
        answer[19] = new TimeTicket(78);
        answer[20] = new TimeTicket(94);
        answer[21] = new TimeTicket(95);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00098() {
        TimeTicket[] output = new TimeTicket[11];
        output[0] = new TimeTicket(0);
        output[1] = new TimeTicket(-1);
        output[2] = new TimeTicket(-99);
        output[3] = new TimeTicket(14);
        output[4] = new TimeTicket(67);
        output[5] = new TimeTicket(-92);
        output[6] = new TimeTicket(57);
        output[7] = new TimeTicket(-73);
        output[8] = new TimeTicket(-27);
        output[9] = new TimeTicket(-30);
        output[10] = new TimeTicket(-15);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[11];
        answer[0] = new TimeTicket(-99);
        answer[1] = new TimeTicket(-92);
        answer[2] = new TimeTicket(-73);
        answer[3] = new TimeTicket(-30);
        answer[4] = new TimeTicket(-27);
        answer[5] = new TimeTicket(-15);
        answer[6] = new TimeTicket(-1);
        answer[7] = new TimeTicket(0);
        answer[8] = new TimeTicket(14);
        answer[9] = new TimeTicket(57);
        answer[10] = new TimeTicket(67);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00099() {
        TimeTicket[] output = new TimeTicket[2];
        output[0] = new TimeTicket(33);
        output[1] = new TimeTicket(88);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[2];
        answer[0] = new TimeTicket(33);
        answer[1] = new TimeTicket(88);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00100() {
        TimeTicket[] output = new TimeTicket[16];
        output[0] = new TimeTicket(39721440);
        output[1] = new TimeTicket(79384834);
        output[2] = new TimeTicket(330663895);
        output[3] = new TimeTicket(-95797360);
        output[4] = new TimeTicket(120684920);
        output[5] = new TimeTicket(-557714739);
        output[6] = new TimeTicket(-700228914);
        output[7] = new TimeTicket(-162757972);
        output[8] = new TimeTicket(-680864711);
        output[9] = new TimeTicket(-542974817);
        output[10] = new TimeTicket(-956962651);
        output[11] = new TimeTicket(962417849);
        output[12] = new TimeTicket(272652596);
        output[13] = new TimeTicket(-879034411);
        output[14] = new TimeTicket(-267728765);
        output[15] = new TimeTicket(-224927982);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[16];
        answer[0] = new TimeTicket(-956962651);
        answer[1] = new TimeTicket(-879034411);
        answer[2] = new TimeTicket(-700228914);
        answer[3] = new TimeTicket(-680864711);
        answer[4] = new TimeTicket(-557714739);
        answer[5] = new TimeTicket(-542974817);
        answer[6] = new TimeTicket(-267728765);
        answer[7] = new TimeTicket(-224927982);
        answer[8] = new TimeTicket(-162757972);
        answer[9] = new TimeTicket(-95797360);
        answer[10] = new TimeTicket(39721440);
        answer[11] = new TimeTicket(79384834);
        answer[12] = new TimeTicket(120684920);
        answer[13] = new TimeTicket(272652596);
        answer[14] = new TimeTicket(330663895);
        answer[15] = new TimeTicket(962417849);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00101() {
        int[] output = new int[30];
        output[0] = -84096692;
        output[1] = -145343348;
        output[2] = 725664106;
        output[3] = -248320161;
        output[4] = -873596105;
        output[5] = 128183656;
        output[6] = -566612390;
        output[7] = 413644094;
        output[8] = 743910207;
        output[9] = -442177502;
        output[10] = 245004648;
        output[11] = -344069773;
        output[12] = -108464122;
        output[13] = 504893268;
        output[14] = -855986575;
        output[15] = -930396079;
        output[16] = -13399261;
        output[17] = -639647830;
        output[18] = -607984250;
        output[19] = 318658173;
        output[20] = -844666864;
        output[21] = 18005819;
        output[22] = 299155016;
        output[23] = -557786865;
        output[24] = -25232035;
        output[25] = 466899877;
        output[26] = -225263254;
        output[27] = 388892636;
        output[28] = 353487545;
        output[29] = 729707762;
        Sorting.radixSort(output);
        int[] answer = new int[30];
        answer[0] = -930396079;
        answer[1] = -873596105;
        answer[2] = -855986575;
        answer[3] = -844666864;
        answer[4] = -639647830;
        answer[5] = -607984250;
        answer[6] = -566612390;
        answer[7] = -557786865;
        answer[8] = -442177502;
        answer[9] = -344069773;
        answer[10] = -248320161;
        answer[11] = -225263254;
        answer[12] = -145343348;
        answer[13] = -108464122;
        answer[14] = -84096692;
        answer[15] = -25232035;
        answer[16] = -13399261;
        answer[17] = 18005819;
        answer[18] = 128183656;
        answer[19] = 245004648;
        answer[20] = 299155016;
        answer[21] = 318658173;
        answer[22] = 353487545;
        answer[23] = 388892636;
        answer[24] = 413644094;
        answer[25] = 466899877;
        answer[26] = 504893268;
        answer[27] = 725664106;
        answer[28] = 729707762;
        answer[29] = 743910207;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00102() {
        TimeTicket[] output = new TimeTicket[18];
        output[0] = new TimeTicket(737872296);
        output[1] = new TimeTicket(-913678285);
        output[2] = new TimeTicket(-774911789);
        output[3] = new TimeTicket(877523871);
        output[4] = new TimeTicket(-380824840);
        output[5] = new TimeTicket(265375681);
        output[6] = new TimeTicket(227045859);
        output[7] = new TimeTicket(-214587721);
        output[8] = new TimeTicket(393038611);
        output[9] = new TimeTicket(172101576);
        output[10] = new TimeTicket(-688264168);
        output[11] = new TimeTicket(-988020334);
        output[12] = new TimeTicket(-804946343);
        output[13] = new TimeTicket(142784340);
        output[14] = new TimeTicket(876706032);
        output[15] = new TimeTicket(646504084);
        output[16] = new TimeTicket(-504409017);
        output[17] = new TimeTicket(-892598871);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[18];
        answer[0] = new TimeTicket(-988020334);
        answer[1] = new TimeTicket(-913678285);
        answer[2] = new TimeTicket(-892598871);
        answer[3] = new TimeTicket(-804946343);
        answer[4] = new TimeTicket(-774911789);
        answer[5] = new TimeTicket(-688264168);
        answer[6] = new TimeTicket(-504409017);
        answer[7] = new TimeTicket(-380824840);
        answer[8] = new TimeTicket(-214587721);
        answer[9] = new TimeTicket(142784340);
        answer[10] = new TimeTicket(172101576);
        answer[11] = new TimeTicket(227045859);
        answer[12] = new TimeTicket(265375681);
        answer[13] = new TimeTicket(393038611);
        answer[14] = new TimeTicket(646504084);
        answer[15] = new TimeTicket(737872296);
        answer[16] = new TimeTicket(876706032);
        answer[17] = new TimeTicket(877523871);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00103() {
        TimeTicket[] output = new TimeTicket[13];
        output[0] = new TimeTicket(101396904);
        output[1] = new TimeTicket(-331206232);
        output[2] = new TimeTicket(686504587);
        output[3] = new TimeTicket(-984527945);
        output[4] = new TimeTicket(-845256153);
        output[5] = new TimeTicket(-675083869);
        output[6] = new TimeTicket(177290312);
        output[7] = new TimeTicket(73080063);
        output[8] = new TimeTicket(120746368);
        output[9] = new TimeTicket(-986496590);
        output[10] = new TimeTicket(986502297);
        output[11] = new TimeTicket(-312529443);
        output[12] = new TimeTicket(421281450);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[13];
        answer[0] = new TimeTicket(-986496590);
        answer[1] = new TimeTicket(-984527945);
        answer[2] = new TimeTicket(-845256153);
        answer[3] = new TimeTicket(-675083869);
        answer[4] = new TimeTicket(-331206232);
        answer[5] = new TimeTicket(-312529443);
        answer[6] = new TimeTicket(73080063);
        answer[7] = new TimeTicket(101396904);
        answer[8] = new TimeTicket(120746368);
        answer[9] = new TimeTicket(177290312);
        answer[10] = new TimeTicket(421281450);
        answer[11] = new TimeTicket(686504587);
        answer[12] = new TimeTicket(986502297);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00104() {
        TimeTicket[] output = new TimeTicket[5];
        output[0] = new TimeTicket(-55300781);
        output[1] = new TimeTicket(506807923);
        output[2] = new TimeTicket(747363720);
        output[3] = new TimeTicket(-432905490);
        output[4] = new TimeTicket(-659574964);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[5];
        answer[0] = new TimeTicket(-659574964);
        answer[1] = new TimeTicket(-432905490);
        answer[2] = new TimeTicket(-55300781);
        answer[3] = new TimeTicket(506807923);
        answer[4] = new TimeTicket(747363720);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00105() {
        TimeTicket[] output = new TimeTicket[7];
        output[0] = new TimeTicket(-816109647);
        output[1] = new TimeTicket(822526824);
        output[2] = new TimeTicket(-559526067);
        output[3] = new TimeTicket(561835496);
        output[4] = new TimeTicket(-953823598);
        output[5] = new TimeTicket(772399540);
        output[6] = new TimeTicket(116821091);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[7];
        answer[0] = new TimeTicket(-953823598);
        answer[1] = new TimeTicket(-816109647);
        answer[2] = new TimeTicket(-559526067);
        answer[3] = new TimeTicket(116821091);
        answer[4] = new TimeTicket(561835496);
        answer[5] = new TimeTicket(772399540);
        answer[6] = new TimeTicket(822526824);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00106() {
        TimeTicket[] output = new TimeTicket[21];
        output[0] = new TimeTicket(-223832857);
        output[1] = new TimeTicket(983299127);
        output[2] = new TimeTicket(-841496963);
        output[3] = new TimeTicket(-520145884);
        output[4] = new TimeTicket(-199999283);
        output[5] = new TimeTicket(678688906);
        output[6] = new TimeTicket(143632255);
        output[7] = new TimeTicket(583861016);
        output[8] = new TimeTicket(347893442);
        output[9] = new TimeTicket(-28688524);
        output[10] = new TimeTicket(130415748);
        output[11] = new TimeTicket(681373027);
        output[12] = new TimeTicket(-872592623);
        output[13] = new TimeTicket(551836050);
        output[14] = new TimeTicket(-240876043);
        output[15] = new TimeTicket(120397477);
        output[16] = new TimeTicket(766515174);
        output[17] = new TimeTicket(523211120);
        output[18] = new TimeTicket(288221693);
        output[19] = new TimeTicket(-290479253);
        output[20] = new TimeTicket(-947253291);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[21];
        answer[0] = new TimeTicket(-947253291);
        answer[1] = new TimeTicket(-872592623);
        answer[2] = new TimeTicket(-841496963);
        answer[3] = new TimeTicket(-520145884);
        answer[4] = new TimeTicket(-290479253);
        answer[5] = new TimeTicket(-240876043);
        answer[6] = new TimeTicket(-223832857);
        answer[7] = new TimeTicket(-199999283);
        answer[8] = new TimeTicket(-28688524);
        answer[9] = new TimeTicket(120397477);
        answer[10] = new TimeTicket(130415748);
        answer[11] = new TimeTicket(143632255);
        answer[12] = new TimeTicket(288221693);
        answer[13] = new TimeTicket(347893442);
        answer[14] = new TimeTicket(523211120);
        answer[15] = new TimeTicket(551836050);
        answer[16] = new TimeTicket(583861016);
        answer[17] = new TimeTicket(678688906);
        answer[18] = new TimeTicket(681373027);
        answer[19] = new TimeTicket(766515174);
        answer[20] = new TimeTicket(983299127);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00107() {
        int[] output = new int[26];
        output[0] = -314306927;
        output[1] = 95204484;
        output[2] = 144617255;
        output[3] = -132886108;
        output[4] = -16334605;
        output[5] = 743525446;
        output[6] = -585202494;
        output[7] = 760487243;
        output[8] = 144221248;
        output[9] = -540091112;
        output[10] = -576090558;
        output[11] = 652450923;
        output[12] = 916016694;
        output[13] = 784506383;
        output[14] = 175064133;
        output[15] = 107083725;
        output[16] = 329214121;
        output[17] = 955636534;
        output[18] = 42604161;
        output[19] = -837449538;
        output[20] = 954288389;
        output[21] = -178094377;
        output[22] = -926242293;
        output[23] = 86357243;
        output[24] = 884477391;
        output[25] = 756522770;
        Sorting.radixSort(output);
        int[] answer = new int[26];
        answer[0] = -926242293;
        answer[1] = -837449538;
        answer[2] = -585202494;
        answer[3] = -576090558;
        answer[4] = -540091112;
        answer[5] = -314306927;
        answer[6] = -178094377;
        answer[7] = -132886108;
        answer[8] = -16334605;
        answer[9] = 42604161;
        answer[10] = 86357243;
        answer[11] = 95204484;
        answer[12] = 107083725;
        answer[13] = 144221248;
        answer[14] = 144617255;
        answer[15] = 175064133;
        answer[16] = 329214121;
        answer[17] = 652450923;
        answer[18] = 743525446;
        answer[19] = 756522770;
        answer[20] = 760487243;
        answer[21] = 784506383;
        answer[22] = 884477391;
        answer[23] = 916016694;
        answer[24] = 954288389;
        answer[25] = 955636534;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00108() {
        TimeTicket[] output = new TimeTicket[28];
        output[0] = new TimeTicket(-221407619);
        output[1] = new TimeTicket(-341041499);
        output[2] = new TimeTicket(-259834347);
        output[3] = new TimeTicket(-925930922);
        output[4] = new TimeTicket(-973331043);
        output[5] = new TimeTicket(132370343);
        output[6] = new TimeTicket(-595150377);
        output[7] = new TimeTicket(436264565);
        output[8] = new TimeTicket(-987153760);
        output[9] = new TimeTicket(624437170);
        output[10] = new TimeTicket(378339982);
        output[11] = new TimeTicket(855568930);
        output[12] = new TimeTicket(409211902);
        output[13] = new TimeTicket(318779046);
        output[14] = new TimeTicket(632935588);
        output[15] = new TimeTicket(914356867);
        output[16] = new TimeTicket(-844033970);
        output[17] = new TimeTicket(-448825127);
        output[18] = new TimeTicket(313877579);
        output[19] = new TimeTicket(-358408321);
        output[20] = new TimeTicket(-17801754);
        output[21] = new TimeTicket(-358414933);
        output[22] = new TimeTicket(-433375252);
        output[23] = new TimeTicket(487980278);
        output[24] = new TimeTicket(913984860);
        output[25] = new TimeTicket(-891377878);
        output[26] = new TimeTicket(-320778308);
        output[27] = new TimeTicket(-562197413);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[28];
        answer[0] = new TimeTicket(-987153760);
        answer[1] = new TimeTicket(-973331043);
        answer[2] = new TimeTicket(-925930922);
        answer[3] = new TimeTicket(-891377878);
        answer[4] = new TimeTicket(-844033970);
        answer[5] = new TimeTicket(-595150377);
        answer[6] = new TimeTicket(-562197413);
        answer[7] = new TimeTicket(-448825127);
        answer[8] = new TimeTicket(-433375252);
        answer[9] = new TimeTicket(-358414933);
        answer[10] = new TimeTicket(-358408321);
        answer[11] = new TimeTicket(-341041499);
        answer[12] = new TimeTicket(-320778308);
        answer[13] = new TimeTicket(-259834347);
        answer[14] = new TimeTicket(-221407619);
        answer[15] = new TimeTicket(-17801754);
        answer[16] = new TimeTicket(132370343);
        answer[17] = new TimeTicket(313877579);
        answer[18] = new TimeTicket(318779046);
        answer[19] = new TimeTicket(378339982);
        answer[20] = new TimeTicket(409211902);
        answer[21] = new TimeTicket(436264565);
        answer[22] = new TimeTicket(487980278);
        answer[23] = new TimeTicket(624437170);
        answer[24] = new TimeTicket(632935588);
        answer[25] = new TimeTicket(855568930);
        answer[26] = new TimeTicket(913984860);
        answer[27] = new TimeTicket(914356867);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00109() {
        TimeTicket[] output = new TimeTicket[30];
        output[0] = new TimeTicket(831246170);
        output[1] = new TimeTicket(-297677876);
        output[2] = new TimeTicket(141091105);
        output[3] = new TimeTicket(46259945);
        output[4] = new TimeTicket(814461595);
        output[5] = new TimeTicket(883389347);
        output[6] = new TimeTicket(968774807);
        output[7] = new TimeTicket(998083842);
        output[8] = new TimeTicket(57532878);
        output[9] = new TimeTicket(726497641);
        output[10] = new TimeTicket(454649);
        output[11] = new TimeTicket(-739835388);
        output[12] = new TimeTicket(-440376206);
        output[13] = new TimeTicket(496681994);
        output[14] = new TimeTicket(-935521356);
        output[15] = new TimeTicket(154837538);
        output[16] = new TimeTicket(579935373);
        output[17] = new TimeTicket(494784725);
        output[18] = new TimeTicket(-716238989);
        output[19] = new TimeTicket(848164937);
        output[20] = new TimeTicket(704174180);
        output[21] = new TimeTicket(-532348426);
        output[22] = new TimeTicket(25500776);
        output[23] = new TimeTicket(-748353583);
        output[24] = new TimeTicket(429495906);
        output[25] = new TimeTicket(-56100767);
        output[26] = new TimeTicket(34700757);
        output[27] = new TimeTicket(-234088554);
        output[28] = new TimeTicket(337435916);
        output[29] = new TimeTicket(-373381870);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[30];
        answer[0] = new TimeTicket(-935521356);
        answer[1] = new TimeTicket(-748353583);
        answer[2] = new TimeTicket(-739835388);
        answer[3] = new TimeTicket(-716238989);
        answer[4] = new TimeTicket(-532348426);
        answer[5] = new TimeTicket(-440376206);
        answer[6] = new TimeTicket(-373381870);
        answer[7] = new TimeTicket(-297677876);
        answer[8] = new TimeTicket(-234088554);
        answer[9] = new TimeTicket(-56100767);
        answer[10] = new TimeTicket(454649);
        answer[11] = new TimeTicket(25500776);
        answer[12] = new TimeTicket(34700757);
        answer[13] = new TimeTicket(46259945);
        answer[14] = new TimeTicket(57532878);
        answer[15] = new TimeTicket(141091105);
        answer[16] = new TimeTicket(154837538);
        answer[17] = new TimeTicket(337435916);
        answer[18] = new TimeTicket(429495906);
        answer[19] = new TimeTicket(494784725);
        answer[20] = new TimeTicket(496681994);
        answer[21] = new TimeTicket(579935373);
        answer[22] = new TimeTicket(704174180);
        answer[23] = new TimeTicket(726497641);
        answer[24] = new TimeTicket(814461595);
        answer[25] = new TimeTicket(831246170);
        answer[26] = new TimeTicket(848164937);
        answer[27] = new TimeTicket(883389347);
        answer[28] = new TimeTicket(968774807);
        answer[29] = new TimeTicket(998083842);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00110() {
        TimeTicket[] output = new TimeTicket[26];
        output[0] = new TimeTicket(393277294);
        output[1] = new TimeTicket(-815377431);
        output[2] = new TimeTicket(665582198);
        output[3] = new TimeTicket(634695596);
        output[4] = new TimeTicket(-808285666);
        output[5] = new TimeTicket(796654122);
        output[6] = new TimeTicket(-571622255);
        output[7] = new TimeTicket(163442726);
        output[8] = new TimeTicket(430502356);
        output[9] = new TimeTicket(807812239);
        output[10] = new TimeTicket(-636095430);
        output[11] = new TimeTicket(-954588575);
        output[12] = new TimeTicket(-901388896);
        output[13] = new TimeTicket(674643721);
        output[14] = new TimeTicket(122103819);
        output[15] = new TimeTicket(-205653157);
        output[16] = new TimeTicket(158794090);
        output[17] = new TimeTicket(99453893);
        output[18] = new TimeTicket(-538188106);
        output[19] = new TimeTicket(146458163);
        output[20] = new TimeTicket(-753487633);
        output[21] = new TimeTicket(-677648669);
        output[22] = new TimeTicket(-432904416);
        output[23] = new TimeTicket(-768904601);
        output[24] = new TimeTicket(92304179);
        output[25] = new TimeTicket(-471449646);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[26];
        answer[0] = new TimeTicket(-954588575);
        answer[1] = new TimeTicket(-901388896);
        answer[2] = new TimeTicket(-815377431);
        answer[3] = new TimeTicket(-808285666);
        answer[4] = new TimeTicket(-768904601);
        answer[5] = new TimeTicket(-753487633);
        answer[6] = new TimeTicket(-677648669);
        answer[7] = new TimeTicket(-636095430);
        answer[8] = new TimeTicket(-571622255);
        answer[9] = new TimeTicket(-538188106);
        answer[10] = new TimeTicket(-471449646);
        answer[11] = new TimeTicket(-432904416);
        answer[12] = new TimeTicket(-205653157);
        answer[13] = new TimeTicket(92304179);
        answer[14] = new TimeTicket(99453893);
        answer[15] = new TimeTicket(122103819);
        answer[16] = new TimeTicket(146458163);
        answer[17] = new TimeTicket(158794090);
        answer[18] = new TimeTicket(163442726);
        answer[19] = new TimeTicket(393277294);
        answer[20] = new TimeTicket(430502356);
        answer[21] = new TimeTicket(634695596);
        answer[22] = new TimeTicket(665582198);
        answer[23] = new TimeTicket(674643721);
        answer[24] = new TimeTicket(796654122);
        answer[25] = new TimeTicket(807812239);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00111() {
        TimeTicket[] output = new TimeTicket[8];
        output[0] = new TimeTicket(-845971757);
        output[1] = new TimeTicket(912407966);
        output[2] = new TimeTicket(879072823);
        output[3] = new TimeTicket(-927055873);
        output[4] = new TimeTicket(-349434828);
        output[5] = new TimeTicket(805967224);
        output[6] = new TimeTicket(63404961);
        output[7] = new TimeTicket(317644861);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[8];
        answer[0] = new TimeTicket(-927055873);
        answer[1] = new TimeTicket(-845971757);
        answer[2] = new TimeTicket(-349434828);
        answer[3] = new TimeTicket(63404961);
        answer[4] = new TimeTicket(317644861);
        answer[5] = new TimeTicket(805967224);
        answer[6] = new TimeTicket(879072823);
        answer[7] = new TimeTicket(912407966);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00112() {
        TimeTicket[] output = new TimeTicket[20];
        output[0] = new TimeTicket(577401410);
        output[1] = new TimeTicket(-42198966);
        output[2] = new TimeTicket(702385272);
        output[3] = new TimeTicket(529102257);
        output[4] = new TimeTicket(-261296813);
        output[5] = new TimeTicket(91745213);
        output[6] = new TimeTicket(-454009951);
        output[7] = new TimeTicket(-917044755);
        output[8] = new TimeTicket(-812815573);
        output[9] = new TimeTicket(-683426427);
        output[10] = new TimeTicket(-523281687);
        output[11] = new TimeTicket(-775906422);
        output[12] = new TimeTicket(-501358184);
        output[13] = new TimeTicket(-576254718);
        output[14] = new TimeTicket(-334900609);
        output[15] = new TimeTicket(763772646);
        output[16] = new TimeTicket(-71795146);
        output[17] = new TimeTicket(-819824740);
        output[18] = new TimeTicket(231525773);
        output[19] = new TimeTicket(168699441);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[20];
        answer[0] = new TimeTicket(-917044755);
        answer[1] = new TimeTicket(-819824740);
        answer[2] = new TimeTicket(-812815573);
        answer[3] = new TimeTicket(-775906422);
        answer[4] = new TimeTicket(-683426427);
        answer[5] = new TimeTicket(-576254718);
        answer[6] = new TimeTicket(-523281687);
        answer[7] = new TimeTicket(-501358184);
        answer[8] = new TimeTicket(-454009951);
        answer[9] = new TimeTicket(-334900609);
        answer[10] = new TimeTicket(-261296813);
        answer[11] = new TimeTicket(-71795146);
        answer[12] = new TimeTicket(-42198966);
        answer[13] = new TimeTicket(91745213);
        answer[14] = new TimeTicket(168699441);
        answer[15] = new TimeTicket(231525773);
        answer[16] = new TimeTicket(529102257);
        answer[17] = new TimeTicket(577401410);
        answer[18] = new TimeTicket(702385272);
        answer[19] = new TimeTicket(763772646);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00113() {
        int[] output = new int[23];
        output[0] = -11308028;
        output[1] = -288937985;
        output[2] = -982352104;
        output[3] = -14222862;
        output[4] = -203748898;
        output[5] = 815029289;
        output[6] = 33575558;
        output[7] = -978530532;
        output[8] = -46556205;
        output[9] = 108901073;
        output[10] = 884771259;
        output[11] = 905173953;
        output[12] = 422549684;
        output[13] = -55399730;
        output[14] = 503071872;
        output[15] = 687027361;
        output[16] = 987362716;
        output[17] = 627082255;
        output[18] = -39454895;
        output[19] = -945734760;
        output[20] = -382280278;
        output[21] = -777476992;
        output[22] = 846582867;
        Sorting.radixSort(output);
        int[] answer = new int[23];
        answer[0] = -982352104;
        answer[1] = -978530532;
        answer[2] = -945734760;
        answer[3] = -777476992;
        answer[4] = -382280278;
        answer[5] = -288937985;
        answer[6] = -203748898;
        answer[7] = -55399730;
        answer[8] = -46556205;
        answer[9] = -39454895;
        answer[10] = -14222862;
        answer[11] = -11308028;
        answer[12] = 33575558;
        answer[13] = 108901073;
        answer[14] = 422549684;
        answer[15] = 503071872;
        answer[16] = 627082255;
        answer[17] = 687027361;
        answer[18] = 815029289;
        answer[19] = 846582867;
        answer[20] = 884771259;
        answer[21] = 905173953;
        answer[22] = 987362716;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00114() {
        TimeTicket[] output = new TimeTicket[9];
        output[0] = new TimeTicket(385179517);
        output[1] = new TimeTicket(-512329066);
        output[2] = new TimeTicket(614739694);
        output[3] = new TimeTicket(-358426953);
        output[4] = new TimeTicket(-614222325);
        output[5] = new TimeTicket(-433403527);
        output[6] = new TimeTicket(-676515396);
        output[7] = new TimeTicket(792371918);
        output[8] = new TimeTicket(-339266443);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[9];
        answer[0] = new TimeTicket(-676515396);
        answer[1] = new TimeTicket(-614222325);
        answer[2] = new TimeTicket(-512329066);
        answer[3] = new TimeTicket(-433403527);
        answer[4] = new TimeTicket(-358426953);
        answer[5] = new TimeTicket(-339266443);
        answer[6] = new TimeTicket(385179517);
        answer[7] = new TimeTicket(614739694);
        answer[8] = new TimeTicket(792371918);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00115() {
        TimeTicket[] output = new TimeTicket[13];
        output[0] = new TimeTicket(-360801095);
        output[1] = new TimeTicket(-138748536);
        output[2] = new TimeTicket(-760668067);
        output[3] = new TimeTicket(402618882);
        output[4] = new TimeTicket(-435841359);
        output[5] = new TimeTicket(739103015);
        output[6] = new TimeTicket(-724526910);
        output[7] = new TimeTicket(718911205);
        output[8] = new TimeTicket(668677162);
        output[9] = new TimeTicket(-31129697);
        output[10] = new TimeTicket(50005596);
        output[11] = new TimeTicket(-365342193);
        output[12] = new TimeTicket(-270067533);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[13];
        answer[0] = new TimeTicket(-760668067);
        answer[1] = new TimeTicket(-724526910);
        answer[2] = new TimeTicket(-435841359);
        answer[3] = new TimeTicket(-365342193);
        answer[4] = new TimeTicket(-360801095);
        answer[5] = new TimeTicket(-270067533);
        answer[6] = new TimeTicket(-138748536);
        answer[7] = new TimeTicket(-31129697);
        answer[8] = new TimeTicket(50005596);
        answer[9] = new TimeTicket(402618882);
        answer[10] = new TimeTicket(668677162);
        answer[11] = new TimeTicket(718911205);
        answer[12] = new TimeTicket(739103015);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00116() {
        TimeTicket[] output = new TimeTicket[23];
        output[0] = new TimeTicket(616076054);
        output[1] = new TimeTicket(11743639);
        output[2] = new TimeTicket(949140671);
        output[3] = new TimeTicket(73872071);
        output[4] = new TimeTicket(78895547);
        output[5] = new TimeTicket(-70990869);
        output[6] = new TimeTicket(904004674);
        output[7] = new TimeTicket(928164565);
        output[8] = new TimeTicket(-960575374);
        output[9] = new TimeTicket(394967170);
        output[10] = new TimeTicket(999234101);
        output[11] = new TimeTicket(-344177492);
        output[12] = new TimeTicket(-364016810);
        output[13] = new TimeTicket(73725688);
        output[14] = new TimeTicket(-994697001);
        output[15] = new TimeTicket(132469192);
        output[16] = new TimeTicket(-408660484);
        output[17] = new TimeTicket(-665810168);
        output[18] = new TimeTicket(-765124020);
        output[19] = new TimeTicket(835744657);
        output[20] = new TimeTicket(362039652);
        output[21] = new TimeTicket(-402369447);
        output[22] = new TimeTicket(-160565114);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[23];
        answer[0] = new TimeTicket(-994697001);
        answer[1] = new TimeTicket(-960575374);
        answer[2] = new TimeTicket(-765124020);
        answer[3] = new TimeTicket(-665810168);
        answer[4] = new TimeTicket(-408660484);
        answer[5] = new TimeTicket(-402369447);
        answer[6] = new TimeTicket(-364016810);
        answer[7] = new TimeTicket(-344177492);
        answer[8] = new TimeTicket(-160565114);
        answer[9] = new TimeTicket(-70990869);
        answer[10] = new TimeTicket(11743639);
        answer[11] = new TimeTicket(73725688);
        answer[12] = new TimeTicket(73872071);
        answer[13] = new TimeTicket(78895547);
        answer[14] = new TimeTicket(132469192);
        answer[15] = new TimeTicket(362039652);
        answer[16] = new TimeTicket(394967170);
        answer[17] = new TimeTicket(616076054);
        answer[18] = new TimeTicket(835744657);
        answer[19] = new TimeTicket(904004674);
        answer[20] = new TimeTicket(928164565);
        answer[21] = new TimeTicket(949140671);
        answer[22] = new TimeTicket(999234101);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00117() {
        TimeTicket[] output = new TimeTicket[14];
        output[0] = new TimeTicket(-497337784);
        output[1] = new TimeTicket(-452152716);
        output[2] = new TimeTicket(-355548588);
        output[3] = new TimeTicket(810212534);
        output[4] = new TimeTicket(-699510222);
        output[5] = new TimeTicket(-135119973);
        output[6] = new TimeTicket(128611287);
        output[7] = new TimeTicket(-784673759);
        output[8] = new TimeTicket(444921241);
        output[9] = new TimeTicket(-176563641);
        output[10] = new TimeTicket(725812479);
        output[11] = new TimeTicket(510101539);
        output[12] = new TimeTicket(-361818895);
        output[13] = new TimeTicket(336520376);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[14];
        answer[0] = new TimeTicket(-784673759);
        answer[1] = new TimeTicket(-699510222);
        answer[2] = new TimeTicket(-497337784);
        answer[3] = new TimeTicket(-452152716);
        answer[4] = new TimeTicket(-361818895);
        answer[5] = new TimeTicket(-355548588);
        answer[6] = new TimeTicket(-176563641);
        answer[7] = new TimeTicket(-135119973);
        answer[8] = new TimeTicket(128611287);
        answer[9] = new TimeTicket(336520376);
        answer[10] = new TimeTicket(444921241);
        answer[11] = new TimeTicket(510101539);
        answer[12] = new TimeTicket(725812479);
        answer[13] = new TimeTicket(810212534);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00118() {
        TimeTicket[] output = new TimeTicket[20];
        output[0] = new TimeTicket(-284914659);
        output[1] = new TimeTicket(116875623);
        output[2] = new TimeTicket(12781807);
        output[3] = new TimeTicket(-949024641);
        output[4] = new TimeTicket(-673598279);
        output[5] = new TimeTicket(539108802);
        output[6] = new TimeTicket(-131205049);
        output[7] = new TimeTicket(-175754331);
        output[8] = new TimeTicket(-53685674);
        output[9] = new TimeTicket(213175489);
        output[10] = new TimeTicket(664426857);
        output[11] = new TimeTicket(-327911760);
        output[12] = new TimeTicket(323994051);
        output[13] = new TimeTicket(-111514243);
        output[14] = new TimeTicket(-337180796);
        output[15] = new TimeTicket(236635852);
        output[16] = new TimeTicket(218597416);
        output[17] = new TimeTicket(584022208);
        output[18] = new TimeTicket(-309910073);
        output[19] = new TimeTicket(436394746);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[20];
        answer[0] = new TimeTicket(-949024641);
        answer[1] = new TimeTicket(-673598279);
        answer[2] = new TimeTicket(-337180796);
        answer[3] = new TimeTicket(-327911760);
        answer[4] = new TimeTicket(-309910073);
        answer[5] = new TimeTicket(-284914659);
        answer[6] = new TimeTicket(-175754331);
        answer[7] = new TimeTicket(-131205049);
        answer[8] = new TimeTicket(-111514243);
        answer[9] = new TimeTicket(-53685674);
        answer[10] = new TimeTicket(12781807);
        answer[11] = new TimeTicket(116875623);
        answer[12] = new TimeTicket(213175489);
        answer[13] = new TimeTicket(218597416);
        answer[14] = new TimeTicket(236635852);
        answer[15] = new TimeTicket(323994051);
        answer[16] = new TimeTicket(436394746);
        answer[17] = new TimeTicket(539108802);
        answer[18] = new TimeTicket(584022208);
        answer[19] = new TimeTicket(664426857);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00119() {
        int[] output = new int[26];
        output[0] = 826612900;
        output[1] = -416854960;
        output[2] = -198455391;
        output[3] = -688039722;
        output[4] = 400546497;
        output[5] = 566663753;
        output[6] = -482892185;
        output[7] = -149651439;
        output[8] = -598078418;
        output[9] = 515147018;
        output[10] = -679180029;
        output[11] = 644267035;
        output[12] = 934071259;
        output[13] = 116968106;
        output[14] = 192632836;
        output[15] = -367617605;
        output[16] = 383383563;
        output[17] = 65782729;
        output[18] = 440277163;
        output[19] = -717548403;
        output[20] = 752950684;
        output[21] = -497677331;
        output[22] = 13398958;
        output[23] = -948993263;
        output[24] = 670282809;
        output[25] = 578563459;
        Sorting.radixSort(output);
        int[] answer = new int[26];
        answer[0] = -948993263;
        answer[1] = -717548403;
        answer[2] = -688039722;
        answer[3] = -679180029;
        answer[4] = -598078418;
        answer[5] = -497677331;
        answer[6] = -482892185;
        answer[7] = -416854960;
        answer[8] = -367617605;
        answer[9] = -198455391;
        answer[10] = -149651439;
        answer[11] = 13398958;
        answer[12] = 65782729;
        answer[13] = 116968106;
        answer[14] = 192632836;
        answer[15] = 383383563;
        answer[16] = 400546497;
        answer[17] = 440277163;
        answer[18] = 515147018;
        answer[19] = 566663753;
        answer[20] = 578563459;
        answer[21] = 644267035;
        answer[22] = 670282809;
        answer[23] = 752950684;
        answer[24] = 826612900;
        answer[25] = 934071259;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00120() {
        TimeTicket[] output = new TimeTicket[13];
        output[0] = new TimeTicket(-820997191);
        output[1] = new TimeTicket(-544167085);
        output[2] = new TimeTicket(-899192831);
        output[3] = new TimeTicket(530639191);
        output[4] = new TimeTicket(44147624);
        output[5] = new TimeTicket(52784780);
        output[6] = new TimeTicket(63339677);
        output[7] = new TimeTicket(-338118770);
        output[8] = new TimeTicket(-290958165);
        output[9] = new TimeTicket(1359614);
        output[10] = new TimeTicket(635211570);
        output[11] = new TimeTicket(137254819);
        output[12] = new TimeTicket(-651225766);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[13];
        answer[0] = new TimeTicket(-899192831);
        answer[1] = new TimeTicket(-820997191);
        answer[2] = new TimeTicket(-651225766);
        answer[3] = new TimeTicket(-544167085);
        answer[4] = new TimeTicket(-338118770);
        answer[5] = new TimeTicket(-290958165);
        answer[6] = new TimeTicket(1359614);
        answer[7] = new TimeTicket(44147624);
        answer[8] = new TimeTicket(52784780);
        answer[9] = new TimeTicket(63339677);
        answer[10] = new TimeTicket(137254819);
        answer[11] = new TimeTicket(530639191);
        answer[12] = new TimeTicket(635211570);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00121() {
        TimeTicket[] output = new TimeTicket[3];
        output[0] = new TimeTicket(589432780);
        output[1] = new TimeTicket(608690836);
        output[2] = new TimeTicket(494897802);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[3];
        answer[0] = new TimeTicket(494897802);
        answer[1] = new TimeTicket(589432780);
        answer[2] = new TimeTicket(608690836);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00122() {
        TimeTicket[] output = new TimeTicket[25];
        output[0] = new TimeTicket(-287384335);
        output[1] = new TimeTicket(-659778762);
        output[2] = new TimeTicket(-344634069);
        output[3] = new TimeTicket(332944440);
        output[4] = new TimeTicket(-455621135);
        output[5] = new TimeTicket(706906403);
        output[6] = new TimeTicket(449254459);
        output[7] = new TimeTicket(133484216);
        output[8] = new TimeTicket(-741603066);
        output[9] = new TimeTicket(268428529);
        output[10] = new TimeTicket(-102781103);
        output[11] = new TimeTicket(510816422);
        output[12] = new TimeTicket(637987764);
        output[13] = new TimeTicket(727920383);
        output[14] = new TimeTicket(-266602428);
        output[15] = new TimeTicket(487600001);
        output[16] = new TimeTicket(660674638);
        output[17] = new TimeTicket(-520361066);
        output[18] = new TimeTicket(719332077);
        output[19] = new TimeTicket(56939887);
        output[20] = new TimeTicket(-10620365);
        output[21] = new TimeTicket(305037800);
        output[22] = new TimeTicket(407082305);
        output[23] = new TimeTicket(290099327);
        output[24] = new TimeTicket(-751060542);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[25];
        answer[0] = new TimeTicket(-751060542);
        answer[1] = new TimeTicket(-741603066);
        answer[2] = new TimeTicket(-659778762);
        answer[3] = new TimeTicket(-520361066);
        answer[4] = new TimeTicket(-455621135);
        answer[5] = new TimeTicket(-344634069);
        answer[6] = new TimeTicket(-287384335);
        answer[7] = new TimeTicket(-266602428);
        answer[8] = new TimeTicket(-102781103);
        answer[9] = new TimeTicket(-10620365);
        answer[10] = new TimeTicket(56939887);
        answer[11] = new TimeTicket(133484216);
        answer[12] = new TimeTicket(268428529);
        answer[13] = new TimeTicket(290099327);
        answer[14] = new TimeTicket(305037800);
        answer[15] = new TimeTicket(332944440);
        answer[16] = new TimeTicket(407082305);
        answer[17] = new TimeTicket(449254459);
        answer[18] = new TimeTicket(487600001);
        answer[19] = new TimeTicket(510816422);
        answer[20] = new TimeTicket(637987764);
        answer[21] = new TimeTicket(660674638);
        answer[22] = new TimeTicket(706906403);
        answer[23] = new TimeTicket(719332077);
        answer[24] = new TimeTicket(727920383);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00123() {
        TimeTicket[] output = new TimeTicket[9];
        output[0] = new TimeTicket(-44924311);
        output[1] = new TimeTicket(79745571);
        output[2] = new TimeTicket(358028611);
        output[3] = new TimeTicket(-251789862);
        output[4] = new TimeTicket(433486795);
        output[5] = new TimeTicket(-744610701);
        output[6] = new TimeTicket(368532281);
        output[7] = new TimeTicket(-526696246);
        output[8] = new TimeTicket(-477061281);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[9];
        answer[0] = new TimeTicket(-744610701);
        answer[1] = new TimeTicket(-526696246);
        answer[2] = new TimeTicket(-477061281);
        answer[3] = new TimeTicket(-251789862);
        answer[4] = new TimeTicket(-44924311);
        answer[5] = new TimeTicket(79745571);
        answer[6] = new TimeTicket(358028611);
        answer[7] = new TimeTicket(368532281);
        answer[8] = new TimeTicket(433486795);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00124() {
        TimeTicket[] output = new TimeTicket[25];
        output[0] = new TimeTicket(11720339);
        output[1] = new TimeTicket(620664190);
        output[2] = new TimeTicket(879984756);
        output[3] = new TimeTicket(174909952);
        output[4] = new TimeTicket(-759078816);
        output[5] = new TimeTicket(37177628);
        output[6] = new TimeTicket(211947375);
        output[7] = new TimeTicket(954747439);
        output[8] = new TimeTicket(83574673);
        output[9] = new TimeTicket(-662956872);
        output[10] = new TimeTicket(546957932);
        output[11] = new TimeTicket(-558657740);
        output[12] = new TimeTicket(270937283);
        output[13] = new TimeTicket(-159998954);
        output[14] = new TimeTicket(104623070);
        output[15] = new TimeTicket(-772479705);
        output[16] = new TimeTicket(677583208);
        output[17] = new TimeTicket(-302313944);
        output[18] = new TimeTicket(421125791);
        output[19] = new TimeTicket(-475340238);
        output[20] = new TimeTicket(120913921);
        output[21] = new TimeTicket(862348890);
        output[22] = new TimeTicket(592317919);
        output[23] = new TimeTicket(184660712);
        output[24] = new TimeTicket(-317314221);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[25];
        answer[0] = new TimeTicket(-772479705);
        answer[1] = new TimeTicket(-759078816);
        answer[2] = new TimeTicket(-662956872);
        answer[3] = new TimeTicket(-558657740);
        answer[4] = new TimeTicket(-475340238);
        answer[5] = new TimeTicket(-317314221);
        answer[6] = new TimeTicket(-302313944);
        answer[7] = new TimeTicket(-159998954);
        answer[8] = new TimeTicket(11720339);
        answer[9] = new TimeTicket(37177628);
        answer[10] = new TimeTicket(83574673);
        answer[11] = new TimeTicket(104623070);
        answer[12] = new TimeTicket(120913921);
        answer[13] = new TimeTicket(174909952);
        answer[14] = new TimeTicket(184660712);
        answer[15] = new TimeTicket(211947375);
        answer[16] = new TimeTicket(270937283);
        answer[17] = new TimeTicket(421125791);
        answer[18] = new TimeTicket(546957932);
        answer[19] = new TimeTicket(592317919);
        answer[20] = new TimeTicket(620664190);
        answer[21] = new TimeTicket(677583208);
        answer[22] = new TimeTicket(862348890);
        answer[23] = new TimeTicket(879984756);
        answer[24] = new TimeTicket(954747439);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00125() {
        int[] output = new int[14];
        output[0] = 839245641;
        output[1] = 699937404;
        output[2] = 63366197;
        output[3] = 466208678;
        output[4] = -988778460;
        output[5] = -271323583;
        output[6] = -262132643;
        output[7] = 129583951;
        output[8] = -630055457;
        output[9] = 475263446;
        output[10] = 13911060;
        output[11] = 443011094;
        output[12] = -918359153;
        output[13] = -517522740;
        Sorting.radixSort(output);
        int[] answer = new int[14];
        answer[0] = -988778460;
        answer[1] = -918359153;
        answer[2] = -630055457;
        answer[3] = -517522740;
        answer[4] = -271323583;
        answer[5] = -262132643;
        answer[6] = 13911060;
        answer[7] = 63366197;
        answer[8] = 129583951;
        answer[9] = 443011094;
        answer[10] = 466208678;
        answer[11] = 475263446;
        answer[12] = 699937404;
        answer[13] = 839245641;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00126() {
        TimeTicket[] output = new TimeTicket[3];
        output[0] = new TimeTicket(-924123094);
        output[1] = new TimeTicket(-932618341);
        output[2] = new TimeTicket(932854282);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[3];
        answer[0] = new TimeTicket(-932618341);
        answer[1] = new TimeTicket(-924123094);
        answer[2] = new TimeTicket(932854282);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00127() {
        TimeTicket[] output = new TimeTicket[20];
        output[0] = new TimeTicket(88043232);
        output[1] = new TimeTicket(-303701168);
        output[2] = new TimeTicket(-922462019);
        output[3] = new TimeTicket(-650353284);
        output[4] = new TimeTicket(-357576176);
        output[5] = new TimeTicket(916755975);
        output[6] = new TimeTicket(-469293484);
        output[7] = new TimeTicket(-879822094);
        output[8] = new TimeTicket(746068326);
        output[9] = new TimeTicket(871265655);
        output[10] = new TimeTicket(-308823116);
        output[11] = new TimeTicket(-301633761);
        output[12] = new TimeTicket(-920732314);
        output[13] = new TimeTicket(-426630826);
        output[14] = new TimeTicket(-441806149);
        output[15] = new TimeTicket(-347567760);
        output[16] = new TimeTicket(124081186);
        output[17] = new TimeTicket(-932277970);
        output[18] = new TimeTicket(-540236740);
        output[19] = new TimeTicket(832393645);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[20];
        answer[0] = new TimeTicket(-932277970);
        answer[1] = new TimeTicket(-922462019);
        answer[2] = new TimeTicket(-920732314);
        answer[3] = new TimeTicket(-879822094);
        answer[4] = new TimeTicket(-650353284);
        answer[5] = new TimeTicket(-540236740);
        answer[6] = new TimeTicket(-469293484);
        answer[7] = new TimeTicket(-441806149);
        answer[8] = new TimeTicket(-426630826);
        answer[9] = new TimeTicket(-357576176);
        answer[10] = new TimeTicket(-347567760);
        answer[11] = new TimeTicket(-308823116);
        answer[12] = new TimeTicket(-303701168);
        answer[13] = new TimeTicket(-301633761);
        answer[14] = new TimeTicket(88043232);
        answer[15] = new TimeTicket(124081186);
        answer[16] = new TimeTicket(746068326);
        answer[17] = new TimeTicket(832393645);
        answer[18] = new TimeTicket(871265655);
        answer[19] = new TimeTicket(916755975);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00128() {
        TimeTicket[] output = new TimeTicket[17];
        output[0] = new TimeTicket(113161755);
        output[1] = new TimeTicket(211022750);
        output[2] = new TimeTicket(681239895);
        output[3] = new TimeTicket(271332536);
        output[4] = new TimeTicket(-367337257);
        output[5] = new TimeTicket(926690847);
        output[6] = new TimeTicket(659056895);
        output[7] = new TimeTicket(-491350613);
        output[8] = new TimeTicket(797033353);
        output[9] = new TimeTicket(-16012473);
        output[10] = new TimeTicket(911152426);
        output[11] = new TimeTicket(-669281896);
        output[12] = new TimeTicket(-831657848);
        output[13] = new TimeTicket(-756267001);
        output[14] = new TimeTicket(-504037277);
        output[15] = new TimeTicket(-506353781);
        output[16] = new TimeTicket(103453201);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[17];
        answer[0] = new TimeTicket(-831657848);
        answer[1] = new TimeTicket(-756267001);
        answer[2] = new TimeTicket(-669281896);
        answer[3] = new TimeTicket(-506353781);
        answer[4] = new TimeTicket(-504037277);
        answer[5] = new TimeTicket(-491350613);
        answer[6] = new TimeTicket(-367337257);
        answer[7] = new TimeTicket(-16012473);
        answer[8] = new TimeTicket(103453201);
        answer[9] = new TimeTicket(113161755);
        answer[10] = new TimeTicket(211022750);
        answer[11] = new TimeTicket(271332536);
        answer[12] = new TimeTicket(659056895);
        answer[13] = new TimeTicket(681239895);
        answer[14] = new TimeTicket(797033353);
        answer[15] = new TimeTicket(911152426);
        answer[16] = new TimeTicket(926690847);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00129() {
        TimeTicket[] output = new TimeTicket[9];
        output[0] = new TimeTicket(-6623856);
        output[1] = new TimeTicket(96043619);
        output[2] = new TimeTicket(-755251140);
        output[3] = new TimeTicket(-962512452);
        output[4] = new TimeTicket(139614122);
        output[5] = new TimeTicket(-188468855);
        output[6] = new TimeTicket(-688429823);
        output[7] = new TimeTicket(449278135);
        output[8] = new TimeTicket(-298471971);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[9];
        answer[0] = new TimeTicket(-962512452);
        answer[1] = new TimeTicket(-755251140);
        answer[2] = new TimeTicket(-688429823);
        answer[3] = new TimeTicket(-298471971);
        answer[4] = new TimeTicket(-188468855);
        answer[5] = new TimeTicket(-6623856);
        answer[6] = new TimeTicket(96043619);
        answer[7] = new TimeTicket(139614122);
        answer[8] = new TimeTicket(449278135);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00130() {
        TimeTicket[] output = new TimeTicket[26];
        output[0] = new TimeTicket(-747282060);
        output[1] = new TimeTicket(933371741);
        output[2] = new TimeTicket(-701102371);
        output[3] = new TimeTicket(307668994);
        output[4] = new TimeTicket(42242100);
        output[5] = new TimeTicket(475009724);
        output[6] = new TimeTicket(255466424);
        output[7] = new TimeTicket(75826004);
        output[8] = new TimeTicket(-132582512);
        output[9] = new TimeTicket(-420082146);
        output[10] = new TimeTicket(1674146);
        output[11] = new TimeTicket(299302707);
        output[12] = new TimeTicket(444976655);
        output[13] = new TimeTicket(91745227);
        output[14] = new TimeTicket(113696143);
        output[15] = new TimeTicket(673870438);
        output[16] = new TimeTicket(953322440);
        output[17] = new TimeTicket(618502249);
        output[18] = new TimeTicket(-707322202);
        output[19] = new TimeTicket(-212171556);
        output[20] = new TimeTicket(-393277125);
        output[21] = new TimeTicket(321700584);
        output[22] = new TimeTicket(566344815);
        output[23] = new TimeTicket(625885567);
        output[24] = new TimeTicket(-244623042);
        output[25] = new TimeTicket(-875897527);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[26];
        answer[0] = new TimeTicket(-875897527);
        answer[1] = new TimeTicket(-747282060);
        answer[2] = new TimeTicket(-707322202);
        answer[3] = new TimeTicket(-701102371);
        answer[4] = new TimeTicket(-420082146);
        answer[5] = new TimeTicket(-393277125);
        answer[6] = new TimeTicket(-244623042);
        answer[7] = new TimeTicket(-212171556);
        answer[8] = new TimeTicket(-132582512);
        answer[9] = new TimeTicket(1674146);
        answer[10] = new TimeTicket(42242100);
        answer[11] = new TimeTicket(75826004);
        answer[12] = new TimeTicket(91745227);
        answer[13] = new TimeTicket(113696143);
        answer[14] = new TimeTicket(255466424);
        answer[15] = new TimeTicket(299302707);
        answer[16] = new TimeTicket(307668994);
        answer[17] = new TimeTicket(321700584);
        answer[18] = new TimeTicket(444976655);
        answer[19] = new TimeTicket(475009724);
        answer[20] = new TimeTicket(566344815);
        answer[21] = new TimeTicket(618502249);
        answer[22] = new TimeTicket(625885567);
        answer[23] = new TimeTicket(673870438);
        answer[24] = new TimeTicket(933371741);
        answer[25] = new TimeTicket(953322440);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00131() {
        int[] output = new int[17];
        output[0] = -630718186;
        output[1] = -275114389;
        output[2] = 462607975;
        output[3] = -737076212;
        output[4] = -637648974;
        output[5] = -707003745;
        output[6] = 81773593;
        output[7] = 799745886;
        output[8] = -137874943;
        output[9] = 91450852;
        output[10] = -709156574;
        output[11] = 717929201;
        output[12] = -306941156;
        output[13] = 611356924;
        output[14] = 486350801;
        output[15] = -650047937;
        output[16] = -68401528;
        Sorting.radixSort(output);
        int[] answer = new int[17];
        answer[0] = -737076212;
        answer[1] = -709156574;
        answer[2] = -707003745;
        answer[3] = -650047937;
        answer[4] = -637648974;
        answer[5] = -630718186;
        answer[6] = -306941156;
        answer[7] = -275114389;
        answer[8] = -137874943;
        answer[9] = -68401528;
        answer[10] = 81773593;
        answer[11] = 91450852;
        answer[12] = 462607975;
        answer[13] = 486350801;
        answer[14] = 611356924;
        answer[15] = 717929201;
        answer[16] = 799745886;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00132() {
        TimeTicket[] output = new TimeTicket[16];
        output[0] = new TimeTicket(132749850);
        output[1] = new TimeTicket(745191);
        output[2] = new TimeTicket(133609300);
        output[3] = new TimeTicket(-712310563);
        output[4] = new TimeTicket(152900219);
        output[5] = new TimeTicket(-318266599);
        output[6] = new TimeTicket(321720967);
        output[7] = new TimeTicket(-163134739);
        output[8] = new TimeTicket(-890943021);
        output[9] = new TimeTicket(46032315);
        output[10] = new TimeTicket(88853716);
        output[11] = new TimeTicket(-581841497);
        output[12] = new TimeTicket(-213948232);
        output[13] = new TimeTicket(-767912713);
        output[14] = new TimeTicket(621431804);
        output[15] = new TimeTicket(-264449405);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[16];
        answer[0] = new TimeTicket(-890943021);
        answer[1] = new TimeTicket(-767912713);
        answer[2] = new TimeTicket(-712310563);
        answer[3] = new TimeTicket(-581841497);
        answer[4] = new TimeTicket(-318266599);
        answer[5] = new TimeTicket(-264449405);
        answer[6] = new TimeTicket(-213948232);
        answer[7] = new TimeTicket(-163134739);
        answer[8] = new TimeTicket(745191);
        answer[9] = new TimeTicket(46032315);
        answer[10] = new TimeTicket(88853716);
        answer[11] = new TimeTicket(132749850);
        answer[12] = new TimeTicket(133609300);
        answer[13] = new TimeTicket(152900219);
        answer[14] = new TimeTicket(321720967);
        answer[15] = new TimeTicket(621431804);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00133() {
        TimeTicket[] output = new TimeTicket[13];
        output[0] = new TimeTicket(-866828646);
        output[1] = new TimeTicket(-12496884);
        output[2] = new TimeTicket(-645776080);
        output[3] = new TimeTicket(734719905);
        output[4] = new TimeTicket(447658488);
        output[5] = new TimeTicket(-762429983);
        output[6] = new TimeTicket(240927376);
        output[7] = new TimeTicket(612769850);
        output[8] = new TimeTicket(524326320);
        output[9] = new TimeTicket(-162244416);
        output[10] = new TimeTicket(-637211411);
        output[11] = new TimeTicket(-558412290);
        output[12] = new TimeTicket(-378097275);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[13];
        answer[0] = new TimeTicket(-866828646);
        answer[1] = new TimeTicket(-762429983);
        answer[2] = new TimeTicket(-645776080);
        answer[3] = new TimeTicket(-637211411);
        answer[4] = new TimeTicket(-558412290);
        answer[5] = new TimeTicket(-378097275);
        answer[6] = new TimeTicket(-162244416);
        answer[7] = new TimeTicket(-12496884);
        answer[8] = new TimeTicket(240927376);
        answer[9] = new TimeTicket(447658488);
        answer[10] = new TimeTicket(524326320);
        answer[11] = new TimeTicket(612769850);
        answer[12] = new TimeTicket(734719905);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00134() {
        TimeTicket[] output = new TimeTicket[27];
        output[0] = new TimeTicket(-57576230);
        output[1] = new TimeTicket(-186806284);
        output[2] = new TimeTicket(-877470721);
        output[3] = new TimeTicket(719553150);
        output[4] = new TimeTicket(30690951);
        output[5] = new TimeTicket(208054187);
        output[6] = new TimeTicket(-228155974);
        output[7] = new TimeTicket(-675976286);
        output[8] = new TimeTicket(68743239);
        output[9] = new TimeTicket(-612810224);
        output[10] = new TimeTicket(-201827393);
        output[11] = new TimeTicket(10925958);
        output[12] = new TimeTicket(-748752670);
        output[13] = new TimeTicket(-167697140);
        output[14] = new TimeTicket(875901890);
        output[15] = new TimeTicket(825031315);
        output[16] = new TimeTicket(695672717);
        output[17] = new TimeTicket(-140783);
        output[18] = new TimeTicket(918251985);
        output[19] = new TimeTicket(139526020);
        output[20] = new TimeTicket(127172212);
        output[21] = new TimeTicket(-30263491);
        output[22] = new TimeTicket(-741172999);
        output[23] = new TimeTicket(135427636);
        output[24] = new TimeTicket(-487986767);
        output[25] = new TimeTicket(252288247);
        output[26] = new TimeTicket(115049764);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[27];
        answer[0] = new TimeTicket(-877470721);
        answer[1] = new TimeTicket(-748752670);
        answer[2] = new TimeTicket(-741172999);
        answer[3] = new TimeTicket(-675976286);
        answer[4] = new TimeTicket(-612810224);
        answer[5] = new TimeTicket(-487986767);
        answer[6] = new TimeTicket(-228155974);
        answer[7] = new TimeTicket(-201827393);
        answer[8] = new TimeTicket(-186806284);
        answer[9] = new TimeTicket(-167697140);
        answer[10] = new TimeTicket(-57576230);
        answer[11] = new TimeTicket(-30263491);
        answer[12] = new TimeTicket(-140783);
        answer[13] = new TimeTicket(10925958);
        answer[14] = new TimeTicket(30690951);
        answer[15] = new TimeTicket(68743239);
        answer[16] = new TimeTicket(115049764);
        answer[17] = new TimeTicket(127172212);
        answer[18] = new TimeTicket(135427636);
        answer[19] = new TimeTicket(139526020);
        answer[20] = new TimeTicket(208054187);
        answer[21] = new TimeTicket(252288247);
        answer[22] = new TimeTicket(695672717);
        answer[23] = new TimeTicket(719553150);
        answer[24] = new TimeTicket(825031315);
        answer[25] = new TimeTicket(875901890);
        answer[26] = new TimeTicket(918251985);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00135() {
        TimeTicket[] output = new TimeTicket[18];
        output[0] = new TimeTicket(828389646);
        output[1] = new TimeTicket(622510827);
        output[2] = new TimeTicket(906065128);
        output[3] = new TimeTicket(-827024978);
        output[4] = new TimeTicket(48910394);
        output[5] = new TimeTicket(-401873715);
        output[6] = new TimeTicket(-254081422);
        output[7] = new TimeTicket(-861820966);
        output[8] = new TimeTicket(-380932653);
        output[9] = new TimeTicket(611245175);
        output[10] = new TimeTicket(-21877553);
        output[11] = new TimeTicket(-160569786);
        output[12] = new TimeTicket(-58841596);
        output[13] = new TimeTicket(142074797);
        output[14] = new TimeTicket(484846629);
        output[15] = new TimeTicket(-666786294);
        output[16] = new TimeTicket(-594721888);
        output[17] = new TimeTicket(520091665);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[18];
        answer[0] = new TimeTicket(-861820966);
        answer[1] = new TimeTicket(-827024978);
        answer[2] = new TimeTicket(-666786294);
        answer[3] = new TimeTicket(-594721888);
        answer[4] = new TimeTicket(-401873715);
        answer[5] = new TimeTicket(-380932653);
        answer[6] = new TimeTicket(-254081422);
        answer[7] = new TimeTicket(-160569786);
        answer[8] = new TimeTicket(-58841596);
        answer[9] = new TimeTicket(-21877553);
        answer[10] = new TimeTicket(48910394);
        answer[11] = new TimeTicket(142074797);
        answer[12] = new TimeTicket(484846629);
        answer[13] = new TimeTicket(520091665);
        answer[14] = new TimeTicket(611245175);
        answer[15] = new TimeTicket(622510827);
        answer[16] = new TimeTicket(828389646);
        answer[17] = new TimeTicket(906065128);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00136() {
        TimeTicket[] output = new TimeTicket[1];
        output[0] = new TimeTicket(-640614801);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[1];
        answer[0] = new TimeTicket(-640614801);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00137() {
        int[] output = new int[19];
        output[0] = -241617882;
        output[1] = 662402611;
        output[2] = 975740125;
        output[3] = -814702166;
        output[4] = -116507211;
        output[5] = 798880839;
        output[6] = -492894429;
        output[7] = 261810764;
        output[8] = -736525060;
        output[9] = 961168685;
        output[10] = -841200271;
        output[11] = -377824562;
        output[12] = 411545009;
        output[13] = -440705401;
        output[14] = 439430638;
        output[15] = 661482128;
        output[16] = -28679160;
        output[17] = 584553569;
        output[18] = -111223380;
        Sorting.radixSort(output);
        int[] answer = new int[19];
        answer[0] = -841200271;
        answer[1] = -814702166;
        answer[2] = -736525060;
        answer[3] = -492894429;
        answer[4] = -440705401;
        answer[5] = -377824562;
        answer[6] = -241617882;
        answer[7] = -116507211;
        answer[8] = -111223380;
        answer[9] = -28679160;
        answer[10] = 261810764;
        answer[11] = 411545009;
        answer[12] = 439430638;
        answer[13] = 584553569;
        answer[14] = 661482128;
        answer[15] = 662402611;
        answer[16] = 798880839;
        answer[17] = 961168685;
        answer[18] = 975740125;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00138() {
        TimeTicket[] output = new TimeTicket[6];
        output[0] = new TimeTicket(162250640);
        output[1] = new TimeTicket(666607130);
        output[2] = new TimeTicket(946318901);
        output[3] = new TimeTicket(248274684);
        output[4] = new TimeTicket(-686426522);
        output[5] = new TimeTicket(223749320);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[6];
        answer[0] = new TimeTicket(-686426522);
        answer[1] = new TimeTicket(162250640);
        answer[2] = new TimeTicket(223749320);
        answer[3] = new TimeTicket(248274684);
        answer[4] = new TimeTicket(666607130);
        answer[5] = new TimeTicket(946318901);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00139() {
        TimeTicket[] output = new TimeTicket[25];
        output[0] = new TimeTicket(482223507);
        output[1] = new TimeTicket(76792632);
        output[2] = new TimeTicket(219340481);
        output[3] = new TimeTicket(548331802);
        output[4] = new TimeTicket(-174250118);
        output[5] = new TimeTicket(-533804221);
        output[6] = new TimeTicket(142087407);
        output[7] = new TimeTicket(-822366146);
        output[8] = new TimeTicket(-908383073);
        output[9] = new TimeTicket(756512441);
        output[10] = new TimeTicket(412161278);
        output[11] = new TimeTicket(860538268);
        output[12] = new TimeTicket(134810796);
        output[13] = new TimeTicket(143507410);
        output[14] = new TimeTicket(-630403481);
        output[15] = new TimeTicket(-134929056);
        output[16] = new TimeTicket(558325065);
        output[17] = new TimeTicket(554385281);
        output[18] = new TimeTicket(378400358);
        output[19] = new TimeTicket(-573525244);
        output[20] = new TimeTicket(-85963182);
        output[21] = new TimeTicket(765292636);
        output[22] = new TimeTicket(-642523228);
        output[23] = new TimeTicket(-826552588);
        output[24] = new TimeTicket(-449961759);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[25];
        answer[0] = new TimeTicket(-908383073);
        answer[1] = new TimeTicket(-826552588);
        answer[2] = new TimeTicket(-822366146);
        answer[3] = new TimeTicket(-642523228);
        answer[4] = new TimeTicket(-630403481);
        answer[5] = new TimeTicket(-573525244);
        answer[6] = new TimeTicket(-533804221);
        answer[7] = new TimeTicket(-449961759);
        answer[8] = new TimeTicket(-174250118);
        answer[9] = new TimeTicket(-134929056);
        answer[10] = new TimeTicket(-85963182);
        answer[11] = new TimeTicket(76792632);
        answer[12] = new TimeTicket(134810796);
        answer[13] = new TimeTicket(142087407);
        answer[14] = new TimeTicket(143507410);
        answer[15] = new TimeTicket(219340481);
        answer[16] = new TimeTicket(378400358);
        answer[17] = new TimeTicket(412161278);
        answer[18] = new TimeTicket(482223507);
        answer[19] = new TimeTicket(548331802);
        answer[20] = new TimeTicket(554385281);
        answer[21] = new TimeTicket(558325065);
        answer[22] = new TimeTicket(756512441);
        answer[23] = new TimeTicket(765292636);
        answer[24] = new TimeTicket(860538268);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00140() {
        TimeTicket[] output = new TimeTicket[24];
        output[0] = new TimeTicket(-899747554);
        output[1] = new TimeTicket(-608919569);
        output[2] = new TimeTicket(-565540030);
        output[3] = new TimeTicket(-401490522);
        output[4] = new TimeTicket(789181917);
        output[5] = new TimeTicket(728217112);
        output[6] = new TimeTicket(737984056);
        output[7] = new TimeTicket(-882964814);
        output[8] = new TimeTicket(-378259700);
        output[9] = new TimeTicket(-912388196);
        output[10] = new TimeTicket(-493435129);
        output[11] = new TimeTicket(-989555966);
        output[12] = new TimeTicket(-24726593);
        output[13] = new TimeTicket(-754918450);
        output[14] = new TimeTicket(-303799009);
        output[15] = new TimeTicket(468762538);
        output[16] = new TimeTicket(-194136537);
        output[17] = new TimeTicket(756470247);
        output[18] = new TimeTicket(493192986);
        output[19] = new TimeTicket(86977956);
        output[20] = new TimeTicket(-198899672);
        output[21] = new TimeTicket(-969846494);
        output[22] = new TimeTicket(-722992256);
        output[23] = new TimeTicket(-734534014);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[24];
        answer[0] = new TimeTicket(-989555966);
        answer[1] = new TimeTicket(-969846494);
        answer[2] = new TimeTicket(-912388196);
        answer[3] = new TimeTicket(-899747554);
        answer[4] = new TimeTicket(-882964814);
        answer[5] = new TimeTicket(-754918450);
        answer[6] = new TimeTicket(-734534014);
        answer[7] = new TimeTicket(-722992256);
        answer[8] = new TimeTicket(-608919569);
        answer[9] = new TimeTicket(-565540030);
        answer[10] = new TimeTicket(-493435129);
        answer[11] = new TimeTicket(-401490522);
        answer[12] = new TimeTicket(-378259700);
        answer[13] = new TimeTicket(-303799009);
        answer[14] = new TimeTicket(-198899672);
        answer[15] = new TimeTicket(-194136537);
        answer[16] = new TimeTicket(-24726593);
        answer[17] = new TimeTicket(86977956);
        answer[18] = new TimeTicket(468762538);
        answer[19] = new TimeTicket(493192986);
        answer[20] = new TimeTicket(728217112);
        answer[21] = new TimeTicket(737984056);
        answer[22] = new TimeTicket(756470247);
        answer[23] = new TimeTicket(789181917);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00141() {
        TimeTicket[] output = new TimeTicket[4];
        output[0] = new TimeTicket(-669329952);
        output[1] = new TimeTicket(-910643941);
        output[2] = new TimeTicket(686023726);
        output[3] = new TimeTicket(-449422117);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[4];
        answer[0] = new TimeTicket(-910643941);
        answer[1] = new TimeTicket(-669329952);
        answer[2] = new TimeTicket(-449422117);
        answer[3] = new TimeTicket(686023726);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00142() {
        TimeTicket[] output = new TimeTicket[1];
        output[0] = new TimeTicket(529850486);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[1];
        answer[0] = new TimeTicket(529850486);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00143() {
        int[] output = new int[12];
        output[0] = 825188135;
        output[1] = 171550581;
        output[2] = 103277868;
        output[3] = 303939986;
        output[4] = 352638007;
        output[5] = -286687626;
        output[6] = -762832406;
        output[7] = 878685405;
        output[8] = 390242747;
        output[9] = 980966618;
        output[10] = 681114233;
        output[11] = -463830444;
        Sorting.radixSort(output);
        int[] answer = new int[12];
        answer[0] = -762832406;
        answer[1] = -463830444;
        answer[2] = -286687626;
        answer[3] = 103277868;
        answer[4] = 171550581;
        answer[5] = 303939986;
        answer[6] = 352638007;
        answer[7] = 390242747;
        answer[8] = 681114233;
        answer[9] = 825188135;
        answer[10] = 878685405;
        answer[11] = 980966618;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00144() {
        TimeTicket[] output = new TimeTicket[11];
        output[0] = new TimeTicket(-595966534);
        output[1] = new TimeTicket(-481138973);
        output[2] = new TimeTicket(947170909);
        output[3] = new TimeTicket(-780421739);
        output[4] = new TimeTicket(-787919008);
        output[5] = new TimeTicket(177417411);
        output[6] = new TimeTicket(70589332);
        output[7] = new TimeTicket(898624888);
        output[8] = new TimeTicket(-603629166);
        output[9] = new TimeTicket(-760948219);
        output[10] = new TimeTicket(328737616);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[11];
        answer[0] = new TimeTicket(-787919008);
        answer[1] = new TimeTicket(-780421739);
        answer[2] = new TimeTicket(-760948219);
        answer[3] = new TimeTicket(-603629166);
        answer[4] = new TimeTicket(-595966534);
        answer[5] = new TimeTicket(-481138973);
        answer[6] = new TimeTicket(70589332);
        answer[7] = new TimeTicket(177417411);
        answer[8] = new TimeTicket(328737616);
        answer[9] = new TimeTicket(898624888);
        answer[10] = new TimeTicket(947170909);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00145() {
        TimeTicket[] output = new TimeTicket[16];
        output[0] = new TimeTicket(-967098510);
        output[1] = new TimeTicket(979876284);
        output[2] = new TimeTicket(417623807);
        output[3] = new TimeTicket(-822587726);
        output[4] = new TimeTicket(375644548);
        output[5] = new TimeTicket(87267008);
        output[6] = new TimeTicket(-66278197);
        output[7] = new TimeTicket(242669928);
        output[8] = new TimeTicket(548652781);
        output[9] = new TimeTicket(-890138902);
        output[10] = new TimeTicket(664145004);
        output[11] = new TimeTicket(787767888);
        output[12] = new TimeTicket(505170761);
        output[13] = new TimeTicket(-459658185);
        output[14] = new TimeTicket(-214680842);
        output[15] = new TimeTicket(-243508637);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[16];
        answer[0] = new TimeTicket(-967098510);
        answer[1] = new TimeTicket(-890138902);
        answer[2] = new TimeTicket(-822587726);
        answer[3] = new TimeTicket(-459658185);
        answer[4] = new TimeTicket(-243508637);
        answer[5] = new TimeTicket(-214680842);
        answer[6] = new TimeTicket(-66278197);
        answer[7] = new TimeTicket(87267008);
        answer[8] = new TimeTicket(242669928);
        answer[9] = new TimeTicket(375644548);
        answer[10] = new TimeTicket(417623807);
        answer[11] = new TimeTicket(505170761);
        answer[12] = new TimeTicket(548652781);
        answer[13] = new TimeTicket(664145004);
        answer[14] = new TimeTicket(787767888);
        answer[15] = new TimeTicket(979876284);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00146() {
        TimeTicket[] output = new TimeTicket[5];
        output[0] = new TimeTicket(-252669467);
        output[1] = new TimeTicket(761994729);
        output[2] = new TimeTicket(800104338);
        output[3] = new TimeTicket(-941909924);
        output[4] = new TimeTicket(378438284);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[5];
        answer[0] = new TimeTicket(-941909924);
        answer[1] = new TimeTicket(-252669467);
        answer[2] = new TimeTicket(378438284);
        answer[3] = new TimeTicket(761994729);
        answer[4] = new TimeTicket(800104338);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00147() {
        TimeTicket[] output = new TimeTicket[9];
        output[0] = new TimeTicket(-101134025);
        output[1] = new TimeTicket(-209770327);
        output[2] = new TimeTicket(-785951995);
        output[3] = new TimeTicket(326793530);
        output[4] = new TimeTicket(-248458364);
        output[5] = new TimeTicket(-387767675);
        output[6] = new TimeTicket(-915009245);
        output[7] = new TimeTicket(-467826081);
        output[8] = new TimeTicket(998074040);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[9];
        answer[0] = new TimeTicket(-915009245);
        answer[1] = new TimeTicket(-785951995);
        answer[2] = new TimeTicket(-467826081);
        answer[3] = new TimeTicket(-387767675);
        answer[4] = new TimeTicket(-248458364);
        answer[5] = new TimeTicket(-209770327);
        answer[6] = new TimeTicket(-101134025);
        answer[7] = new TimeTicket(326793530);
        answer[8] = new TimeTicket(998074040);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00148() {
        TimeTicket[] output = new TimeTicket[28];
        output[0] = new TimeTicket(-640101354);
        output[1] = new TimeTicket(-935813458);
        output[2] = new TimeTicket(815888738);
        output[3] = new TimeTicket(-77560009);
        output[4] = new TimeTicket(-684094985);
        output[5] = new TimeTicket(-443954638);
        output[6] = new TimeTicket(254305145);
        output[7] = new TimeTicket(-615741913);
        output[8] = new TimeTicket(650820474);
        output[9] = new TimeTicket(349150231);
        output[10] = new TimeTicket(555300180);
        output[11] = new TimeTicket(929220641);
        output[12] = new TimeTicket(-748298940);
        output[13] = new TimeTicket(246919435);
        output[14] = new TimeTicket(-14957787);
        output[15] = new TimeTicket(-774517569);
        output[16] = new TimeTicket(-941931112);
        output[17] = new TimeTicket(427089907);
        output[18] = new TimeTicket(514084576);
        output[19] = new TimeTicket(405281032);
        output[20] = new TimeTicket(-128845778);
        output[21] = new TimeTicket(702678950);
        output[22] = new TimeTicket(-1994469);
        output[23] = new TimeTicket(-87574625);
        output[24] = new TimeTicket(9246941);
        output[25] = new TimeTicket(664424139);
        output[26] = new TimeTicket(-359330604);
        output[27] = new TimeTicket(11755769);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[28];
        answer[0] = new TimeTicket(-941931112);
        answer[1] = new TimeTicket(-935813458);
        answer[2] = new TimeTicket(-774517569);
        answer[3] = new TimeTicket(-748298940);
        answer[4] = new TimeTicket(-684094985);
        answer[5] = new TimeTicket(-640101354);
        answer[6] = new TimeTicket(-615741913);
        answer[7] = new TimeTicket(-443954638);
        answer[8] = new TimeTicket(-359330604);
        answer[9] = new TimeTicket(-128845778);
        answer[10] = new TimeTicket(-87574625);
        answer[11] = new TimeTicket(-77560009);
        answer[12] = new TimeTicket(-14957787);
        answer[13] = new TimeTicket(-1994469);
        answer[14] = new TimeTicket(9246941);
        answer[15] = new TimeTicket(11755769);
        answer[16] = new TimeTicket(246919435);
        answer[17] = new TimeTicket(254305145);
        answer[18] = new TimeTicket(349150231);
        answer[19] = new TimeTicket(405281032);
        answer[20] = new TimeTicket(427089907);
        answer[21] = new TimeTicket(514084576);
        answer[22] = new TimeTicket(555300180);
        answer[23] = new TimeTicket(650820474);
        answer[24] = new TimeTicket(664424139);
        answer[25] = new TimeTicket(702678950);
        answer[26] = new TimeTicket(815888738);
        answer[27] = new TimeTicket(929220641);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00149() {
        int[] output = new int[23];
        output[0] = 337657650;
        output[1] = 232195234;
        output[2] = -376346221;
        output[3] = -351938590;
        output[4] = 790981793;
        output[5] = 408538856;
        output[6] = -357093149;
        output[7] = 265653044;
        output[8] = 763640745;
        output[9] = -452699411;
        output[10] = 772708390;
        output[11] = 74315366;
        output[12] = -25460785;
        output[13] = 737206880;
        output[14] = -857113506;
        output[15] = -646850336;
        output[16] = -289070314;
        output[17] = 856664507;
        output[18] = -234163569;
        output[19] = -157058219;
        output[20] = 582620301;
        output[21] = 855451618;
        output[22] = 800405235;
        Sorting.radixSort(output);
        int[] answer = new int[23];
        answer[0] = -857113506;
        answer[1] = -646850336;
        answer[2] = -452699411;
        answer[3] = -376346221;
        answer[4] = -357093149;
        answer[5] = -351938590;
        answer[6] = -289070314;
        answer[7] = -234163569;
        answer[8] = -157058219;
        answer[9] = -25460785;
        answer[10] = 74315366;
        answer[11] = 232195234;
        answer[12] = 265653044;
        answer[13] = 337657650;
        answer[14] = 408538856;
        answer[15] = 582620301;
        answer[16] = 737206880;
        answer[17] = 763640745;
        answer[18] = 772708390;
        answer[19] = 790981793;
        answer[20] = 800405235;
        answer[21] = 855451618;
        answer[22] = 856664507;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00150() {
        TimeTicket[] output = new TimeTicket[12];
        output[0] = new TimeTicket(-446973436);
        output[1] = new TimeTicket(587030369);
        output[2] = new TimeTicket(-668139509);
        output[3] = new TimeTicket(397115070);
        output[4] = new TimeTicket(-31774291);
        output[5] = new TimeTicket(-524608347);
        output[6] = new TimeTicket(-300994216);
        output[7] = new TimeTicket(201930837);
        output[8] = new TimeTicket(-718082432);
        output[9] = new TimeTicket(46362554);
        output[10] = new TimeTicket(-197913358);
        output[11] = new TimeTicket(-763015147);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[12];
        answer[0] = new TimeTicket(-763015147);
        answer[1] = new TimeTicket(-718082432);
        answer[2] = new TimeTicket(-668139509);
        answer[3] = new TimeTicket(-524608347);
        answer[4] = new TimeTicket(-446973436);
        answer[5] = new TimeTicket(-300994216);
        answer[6] = new TimeTicket(-197913358);
        answer[7] = new TimeTicket(-31774291);
        answer[8] = new TimeTicket(46362554);
        answer[9] = new TimeTicket(201930837);
        answer[10] = new TimeTicket(397115070);
        answer[11] = new TimeTicket(587030369);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00151() {
        TimeTicket[] output = new TimeTicket[26];
        output[0] = new TimeTicket(123057396);
        output[1] = new TimeTicket(84841973);
        output[2] = new TimeTicket(624474130);
        output[3] = new TimeTicket(-52982119);
        output[4] = new TimeTicket(-65993262);
        output[5] = new TimeTicket(537238509);
        output[6] = new TimeTicket(692260150);
        output[7] = new TimeTicket(41519254);
        output[8] = new TimeTicket(263811477);
        output[9] = new TimeTicket(367996607);
        output[10] = new TimeTicket(565451170);
        output[11] = new TimeTicket(747177682);
        output[12] = new TimeTicket(374857765);
        output[13] = new TimeTicket(900991882);
        output[14] = new TimeTicket(629703705);
        output[15] = new TimeTicket(162340241);
        output[16] = new TimeTicket(796576401);
        output[17] = new TimeTicket(878154490);
        output[18] = new TimeTicket(-871355321);
        output[19] = new TimeTicket(312367232);
        output[20] = new TimeTicket(994689114);
        output[21] = new TimeTicket(-190722268);
        output[22] = new TimeTicket(-606381037);
        output[23] = new TimeTicket(813766273);
        output[24] = new TimeTicket(322695272);
        output[25] = new TimeTicket(1379458);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[26];
        answer[0] = new TimeTicket(-871355321);
        answer[1] = new TimeTicket(-606381037);
        answer[2] = new TimeTicket(-190722268);
        answer[3] = new TimeTicket(-65993262);
        answer[4] = new TimeTicket(-52982119);
        answer[5] = new TimeTicket(1379458);
        answer[6] = new TimeTicket(41519254);
        answer[7] = new TimeTicket(84841973);
        answer[8] = new TimeTicket(123057396);
        answer[9] = new TimeTicket(162340241);
        answer[10] = new TimeTicket(263811477);
        answer[11] = new TimeTicket(312367232);
        answer[12] = new TimeTicket(322695272);
        answer[13] = new TimeTicket(367996607);
        answer[14] = new TimeTicket(374857765);
        answer[15] = new TimeTicket(537238509);
        answer[16] = new TimeTicket(565451170);
        answer[17] = new TimeTicket(624474130);
        answer[18] = new TimeTicket(629703705);
        answer[19] = new TimeTicket(692260150);
        answer[20] = new TimeTicket(747177682);
        answer[21] = new TimeTicket(796576401);
        answer[22] = new TimeTicket(813766273);
        answer[23] = new TimeTicket(878154490);
        answer[24] = new TimeTicket(900991882);
        answer[25] = new TimeTicket(994689114);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00152() {
        TimeTicket[] output = new TimeTicket[7];
        output[0] = new TimeTicket(-3388178);
        output[1] = new TimeTicket(944796891);
        output[2] = new TimeTicket(-615640888);
        output[3] = new TimeTicket(498975232);
        output[4] = new TimeTicket(70884526);
        output[5] = new TimeTicket(947301667);
        output[6] = new TimeTicket(-267749245);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[7];
        answer[0] = new TimeTicket(-615640888);
        answer[1] = new TimeTicket(-267749245);
        answer[2] = new TimeTicket(-3388178);
        answer[3] = new TimeTicket(70884526);
        answer[4] = new TimeTicket(498975232);
        answer[5] = new TimeTicket(944796891);
        answer[6] = new TimeTicket(947301667);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00153() {
        TimeTicket[] output = new TimeTicket[25];
        output[0] = new TimeTicket(-150411047);
        output[1] = new TimeTicket(-240910675);
        output[2] = new TimeTicket(15208760);
        output[3] = new TimeTicket(-705030082);
        output[4] = new TimeTicket(-511487823);
        output[5] = new TimeTicket(-91803972);
        output[6] = new TimeTicket(901163951);
        output[7] = new TimeTicket(-865941335);
        output[8] = new TimeTicket(-23207403);
        output[9] = new TimeTicket(-986053797);
        output[10] = new TimeTicket(961107708);
        output[11] = new TimeTicket(166790938);
        output[12] = new TimeTicket(-143546345);
        output[13] = new TimeTicket(540467009);
        output[14] = new TimeTicket(153285160);
        output[15] = new TimeTicket(-936109710);
        output[16] = new TimeTicket(838046354);
        output[17] = new TimeTicket(953718649);
        output[18] = new TimeTicket(-596686238);
        output[19] = new TimeTicket(225814590);
        output[20] = new TimeTicket(-501211213);
        output[21] = new TimeTicket(60297743);
        output[22] = new TimeTicket(-905701314);
        output[23] = new TimeTicket(514159641);
        output[24] = new TimeTicket(-156316739);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[25];
        answer[0] = new TimeTicket(-986053797);
        answer[1] = new TimeTicket(-936109710);
        answer[2] = new TimeTicket(-905701314);
        answer[3] = new TimeTicket(-865941335);
        answer[4] = new TimeTicket(-705030082);
        answer[5] = new TimeTicket(-596686238);
        answer[6] = new TimeTicket(-511487823);
        answer[7] = new TimeTicket(-501211213);
        answer[8] = new TimeTicket(-240910675);
        answer[9] = new TimeTicket(-156316739);
        answer[10] = new TimeTicket(-150411047);
        answer[11] = new TimeTicket(-143546345);
        answer[12] = new TimeTicket(-91803972);
        answer[13] = new TimeTicket(-23207403);
        answer[14] = new TimeTicket(15208760);
        answer[15] = new TimeTicket(60297743);
        answer[16] = new TimeTicket(153285160);
        answer[17] = new TimeTicket(166790938);
        answer[18] = new TimeTicket(225814590);
        answer[19] = new TimeTicket(514159641);
        answer[20] = new TimeTicket(540467009);
        answer[21] = new TimeTicket(838046354);
        answer[22] = new TimeTicket(901163951);
        answer[23] = new TimeTicket(953718649);
        answer[24] = new TimeTicket(961107708);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00154() {
        TimeTicket[] output = new TimeTicket[16];
        output[0] = new TimeTicket(-11272874);
        output[1] = new TimeTicket(425865531);
        output[2] = new TimeTicket(-134931596);
        output[3] = new TimeTicket(-93366591);
        output[4] = new TimeTicket(-328436442);
        output[5] = new TimeTicket(271208517);
        output[6] = new TimeTicket(970165037);
        output[7] = new TimeTicket(-216494352);
        output[8] = new TimeTicket(-445749012);
        output[9] = new TimeTicket(226520155);
        output[10] = new TimeTicket(340477475);
        output[11] = new TimeTicket(91799784);
        output[12] = new TimeTicket(773204964);
        output[13] = new TimeTicket(-909204710);
        output[14] = new TimeTicket(-430041882);
        output[15] = new TimeTicket(237019356);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[16];
        answer[0] = new TimeTicket(-909204710);
        answer[1] = new TimeTicket(-445749012);
        answer[2] = new TimeTicket(-430041882);
        answer[3] = new TimeTicket(-328436442);
        answer[4] = new TimeTicket(-216494352);
        answer[5] = new TimeTicket(-134931596);
        answer[6] = new TimeTicket(-93366591);
        answer[7] = new TimeTicket(-11272874);
        answer[8] = new TimeTicket(91799784);
        answer[9] = new TimeTicket(226520155);
        answer[10] = new TimeTicket(237019356);
        answer[11] = new TimeTicket(271208517);
        answer[12] = new TimeTicket(340477475);
        answer[13] = new TimeTicket(425865531);
        answer[14] = new TimeTicket(773204964);
        answer[15] = new TimeTicket(970165037);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00155() {
        int[] output = new int[8];
        output[0] = -840048346;
        output[1] = 93780971;
        output[2] = -371006516;
        output[3] = -384071376;
        output[4] = -926228135;
        output[5] = 416332615;
        output[6] = -663487398;
        output[7] = 704639494;
        Sorting.radixSort(output);
        int[] answer = new int[8];
        answer[0] = -926228135;
        answer[1] = -840048346;
        answer[2] = -663487398;
        answer[3] = -384071376;
        answer[4] = -371006516;
        answer[5] = 93780971;
        answer[6] = 416332615;
        answer[7] = 704639494;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00156() {
        TimeTicket[] output = new TimeTicket[1];
        output[0] = new TimeTicket(-193806984);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[1];
        answer[0] = new TimeTicket(-193806984);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00157() {
        TimeTicket[] output = new TimeTicket[3];
        output[0] = new TimeTicket(-264798396);
        output[1] = new TimeTicket(981109003);
        output[2] = new TimeTicket(390771271);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[3];
        answer[0] = new TimeTicket(-264798396);
        answer[1] = new TimeTicket(390771271);
        answer[2] = new TimeTicket(981109003);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00158() {
        TimeTicket[] output = new TimeTicket[4];
        output[0] = new TimeTicket(-275989539);
        output[1] = new TimeTicket(96745920);
        output[2] = new TimeTicket(-13272876);
        output[3] = new TimeTicket(920934340);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[4];
        answer[0] = new TimeTicket(-275989539);
        answer[1] = new TimeTicket(-13272876);
        answer[2] = new TimeTicket(96745920);
        answer[3] = new TimeTicket(920934340);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00159() {
        TimeTicket[] output = new TimeTicket[23];
        output[0] = new TimeTicket(-913844950);
        output[1] = new TimeTicket(-228293193);
        output[2] = new TimeTicket(-714824114);
        output[3] = new TimeTicket(21742749);
        output[4] = new TimeTicket(239685030);
        output[5] = new TimeTicket(-497286684);
        output[6] = new TimeTicket(352003950);
        output[7] = new TimeTicket(-308859527);
        output[8] = new TimeTicket(61255970);
        output[9] = new TimeTicket(-727358852);
        output[10] = new TimeTicket(549621734);
        output[11] = new TimeTicket(749338461);
        output[12] = new TimeTicket(-568831808);
        output[13] = new TimeTicket(132374937);
        output[14] = new TimeTicket(-513768659);
        output[15] = new TimeTicket(-354993784);
        output[16] = new TimeTicket(-326273457);
        output[17] = new TimeTicket(854576457);
        output[18] = new TimeTicket(-206523198);
        output[19] = new TimeTicket(428448514);
        output[20] = new TimeTicket(17078160);
        output[21] = new TimeTicket(-841717159);
        output[22] = new TimeTicket(-723722980);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[23];
        answer[0] = new TimeTicket(-913844950);
        answer[1] = new TimeTicket(-841717159);
        answer[2] = new TimeTicket(-727358852);
        answer[3] = new TimeTicket(-723722980);
        answer[4] = new TimeTicket(-714824114);
        answer[5] = new TimeTicket(-568831808);
        answer[6] = new TimeTicket(-513768659);
        answer[7] = new TimeTicket(-497286684);
        answer[8] = new TimeTicket(-354993784);
        answer[9] = new TimeTicket(-326273457);
        answer[10] = new TimeTicket(-308859527);
        answer[11] = new TimeTicket(-228293193);
        answer[12] = new TimeTicket(-206523198);
        answer[13] = new TimeTicket(17078160);
        answer[14] = new TimeTicket(21742749);
        answer[15] = new TimeTicket(61255970);
        answer[16] = new TimeTicket(132374937);
        answer[17] = new TimeTicket(239685030);
        answer[18] = new TimeTicket(352003950);
        answer[19] = new TimeTicket(428448514);
        answer[20] = new TimeTicket(549621734);
        answer[21] = new TimeTicket(749338461);
        answer[22] = new TimeTicket(854576457);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00160() {
        TimeTicket[] output = new TimeTicket[21];
        output[0] = new TimeTicket(-36911595);
        output[1] = new TimeTicket(-516773276);
        output[2] = new TimeTicket(803251077);
        output[3] = new TimeTicket(-290688447);
        output[4] = new TimeTicket(-766978098);
        output[5] = new TimeTicket(-213698908);
        output[6] = new TimeTicket(-782618049);
        output[7] = new TimeTicket(-578846356);
        output[8] = new TimeTicket(736526301);
        output[9] = new TimeTicket(165671069);
        output[10] = new TimeTicket(-254992463);
        output[11] = new TimeTicket(237376119);
        output[12] = new TimeTicket(-706036732);
        output[13] = new TimeTicket(-468743462);
        output[14] = new TimeTicket(-425309772);
        output[15] = new TimeTicket(470069246);
        output[16] = new TimeTicket(-77593175);
        output[17] = new TimeTicket(-319640777);
        output[18] = new TimeTicket(40344157);
        output[19] = new TimeTicket(993454114);
        output[20] = new TimeTicket(669215254);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[21];
        answer[0] = new TimeTicket(-782618049);
        answer[1] = new TimeTicket(-766978098);
        answer[2] = new TimeTicket(-706036732);
        answer[3] = new TimeTicket(-578846356);
        answer[4] = new TimeTicket(-516773276);
        answer[5] = new TimeTicket(-468743462);
        answer[6] = new TimeTicket(-425309772);
        answer[7] = new TimeTicket(-319640777);
        answer[8] = new TimeTicket(-290688447);
        answer[9] = new TimeTicket(-254992463);
        answer[10] = new TimeTicket(-213698908);
        answer[11] = new TimeTicket(-77593175);
        answer[12] = new TimeTicket(-36911595);
        answer[13] = new TimeTicket(40344157);
        answer[14] = new TimeTicket(165671069);
        answer[15] = new TimeTicket(237376119);
        answer[16] = new TimeTicket(470069246);
        answer[17] = new TimeTicket(669215254);
        answer[18] = new TimeTicket(736526301);
        answer[19] = new TimeTicket(803251077);
        answer[20] = new TimeTicket(993454114);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00161() {
        int[] output = new int[3];
        output[0] = -742756479;
        output[1] = 116331467;
        output[2] = -8151799;
        Sorting.radixSort(output);
        int[] answer = new int[3];
        answer[0] = -742756479;
        answer[1] = -8151799;
        answer[2] = 116331467;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00162() {
        TimeTicket[] output = new TimeTicket[29];
        output[0] = new TimeTicket(524421653);
        output[1] = new TimeTicket(930223953);
        output[2] = new TimeTicket(-548494450);
        output[3] = new TimeTicket(635958388);
        output[4] = new TimeTicket(-829183103);
        output[5] = new TimeTicket(-25366394);
        output[6] = new TimeTicket(-80386837);
        output[7] = new TimeTicket(885429395);
        output[8] = new TimeTicket(-683776191);
        output[9] = new TimeTicket(-608678230);
        output[10] = new TimeTicket(-447242798);
        output[11] = new TimeTicket(-884507486);
        output[12] = new TimeTicket(653935788);
        output[13] = new TimeTicket(303178463);
        output[14] = new TimeTicket(935582959);
        output[15] = new TimeTicket(-110162880);
        output[16] = new TimeTicket(-225528213);
        output[17] = new TimeTicket(955774347);
        output[18] = new TimeTicket(-220541782);
        output[19] = new TimeTicket(-731429916);
        output[20] = new TimeTicket(713784653);
        output[21] = new TimeTicket(1065459);
        output[22] = new TimeTicket(565611699);
        output[23] = new TimeTicket(791770834);
        output[24] = new TimeTicket(-781246582);
        output[25] = new TimeTicket(838997709);
        output[26] = new TimeTicket(930681947);
        output[27] = new TimeTicket(967785899);
        output[28] = new TimeTicket(489863863);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[29];
        answer[0] = new TimeTicket(-884507486);
        answer[1] = new TimeTicket(-829183103);
        answer[2] = new TimeTicket(-781246582);
        answer[3] = new TimeTicket(-731429916);
        answer[4] = new TimeTicket(-683776191);
        answer[5] = new TimeTicket(-608678230);
        answer[6] = new TimeTicket(-548494450);
        answer[7] = new TimeTicket(-447242798);
        answer[8] = new TimeTicket(-225528213);
        answer[9] = new TimeTicket(-220541782);
        answer[10] = new TimeTicket(-110162880);
        answer[11] = new TimeTicket(-80386837);
        answer[12] = new TimeTicket(-25366394);
        answer[13] = new TimeTicket(1065459);
        answer[14] = new TimeTicket(303178463);
        answer[15] = new TimeTicket(489863863);
        answer[16] = new TimeTicket(524421653);
        answer[17] = new TimeTicket(565611699);
        answer[18] = new TimeTicket(635958388);
        answer[19] = new TimeTicket(653935788);
        answer[20] = new TimeTicket(713784653);
        answer[21] = new TimeTicket(791770834);
        answer[22] = new TimeTicket(838997709);
        answer[23] = new TimeTicket(885429395);
        answer[24] = new TimeTicket(930223953);
        answer[25] = new TimeTicket(930681947);
        answer[26] = new TimeTicket(935582959);
        answer[27] = new TimeTicket(955774347);
        answer[28] = new TimeTicket(967785899);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00163() {
        TimeTicket[] output = new TimeTicket[19];
        output[0] = new TimeTicket(491455591);
        output[1] = new TimeTicket(882041452);
        output[2] = new TimeTicket(388706241);
        output[3] = new TimeTicket(690954500);
        output[4] = new TimeTicket(369165478);
        output[5] = new TimeTicket(-241462316);
        output[6] = new TimeTicket(235648755);
        output[7] = new TimeTicket(-24461743);
        output[8] = new TimeTicket(-220514986);
        output[9] = new TimeTicket(404513387);
        output[10] = new TimeTicket(737546515);
        output[11] = new TimeTicket(506377896);
        output[12] = new TimeTicket(868507388);
        output[13] = new TimeTicket(-725543232);
        output[14] = new TimeTicket(177576188);
        output[15] = new TimeTicket(-139785046);
        output[16] = new TimeTicket(113093430);
        output[17] = new TimeTicket(365206897);
        output[18] = new TimeTicket(-265244488);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[19];
        answer[0] = new TimeTicket(-725543232);
        answer[1] = new TimeTicket(-265244488);
        answer[2] = new TimeTicket(-241462316);
        answer[3] = new TimeTicket(-220514986);
        answer[4] = new TimeTicket(-139785046);
        answer[5] = new TimeTicket(-24461743);
        answer[6] = new TimeTicket(113093430);
        answer[7] = new TimeTicket(177576188);
        answer[8] = new TimeTicket(235648755);
        answer[9] = new TimeTicket(365206897);
        answer[10] = new TimeTicket(369165478);
        answer[11] = new TimeTicket(388706241);
        answer[12] = new TimeTicket(404513387);
        answer[13] = new TimeTicket(491455591);
        answer[14] = new TimeTicket(506377896);
        answer[15] = new TimeTicket(690954500);
        answer[16] = new TimeTicket(737546515);
        answer[17] = new TimeTicket(868507388);
        answer[18] = new TimeTicket(882041452);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00164() {
        TimeTicket[] output = new TimeTicket[26];
        output[0] = new TimeTicket(23042181);
        output[1] = new TimeTicket(122563770);
        output[2] = new TimeTicket(763331645);
        output[3] = new TimeTicket(-435906073);
        output[4] = new TimeTicket(461563537);
        output[5] = new TimeTicket(-906284115);
        output[6] = new TimeTicket(127889423);
        output[7] = new TimeTicket(778816050);
        output[8] = new TimeTicket(-568873834);
        output[9] = new TimeTicket(-105148);
        output[10] = new TimeTicket(-8643842);
        output[11] = new TimeTicket(309391162);
        output[12] = new TimeTicket(-258823375);
        output[13] = new TimeTicket(-573913437);
        output[14] = new TimeTicket(-190315125);
        output[15] = new TimeTicket(-272792515);
        output[16] = new TimeTicket(404323371);
        output[17] = new TimeTicket(-966942132);
        output[18] = new TimeTicket(963970469);
        output[19] = new TimeTicket(703495460);
        output[20] = new TimeTicket(668936848);
        output[21] = new TimeTicket(-152227285);
        output[22] = new TimeTicket(89001049);
        output[23] = new TimeTicket(582070718);
        output[24] = new TimeTicket(-693558564);
        output[25] = new TimeTicket(-287366727);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[26];
        answer[0] = new TimeTicket(-966942132);
        answer[1] = new TimeTicket(-906284115);
        answer[2] = new TimeTicket(-693558564);
        answer[3] = new TimeTicket(-573913437);
        answer[4] = new TimeTicket(-568873834);
        answer[5] = new TimeTicket(-435906073);
        answer[6] = new TimeTicket(-287366727);
        answer[7] = new TimeTicket(-272792515);
        answer[8] = new TimeTicket(-258823375);
        answer[9] = new TimeTicket(-190315125);
        answer[10] = new TimeTicket(-152227285);
        answer[11] = new TimeTicket(-8643842);
        answer[12] = new TimeTicket(-105148);
        answer[13] = new TimeTicket(23042181);
        answer[14] = new TimeTicket(89001049);
        answer[15] = new TimeTicket(122563770);
        answer[16] = new TimeTicket(127889423);
        answer[17] = new TimeTicket(309391162);
        answer[18] = new TimeTicket(404323371);
        answer[19] = new TimeTicket(461563537);
        answer[20] = new TimeTicket(582070718);
        answer[21] = new TimeTicket(668936848);
        answer[22] = new TimeTicket(703495460);
        answer[23] = new TimeTicket(763331645);
        answer[24] = new TimeTicket(778816050);
        answer[25] = new TimeTicket(963970469);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00165() {
        TimeTicket[] output = new TimeTicket[7];
        output[0] = new TimeTicket(155347021);
        output[1] = new TimeTicket(460581452);
        output[2] = new TimeTicket(-286373057);
        output[3] = new TimeTicket(384575291);
        output[4] = new TimeTicket(635270222);
        output[5] = new TimeTicket(-879259045);
        output[6] = new TimeTicket(273458239);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[7];
        answer[0] = new TimeTicket(-879259045);
        answer[1] = new TimeTicket(-286373057);
        answer[2] = new TimeTicket(155347021);
        answer[3] = new TimeTicket(273458239);
        answer[4] = new TimeTicket(384575291);
        answer[5] = new TimeTicket(460581452);
        answer[6] = new TimeTicket(635270222);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00166() {
        TimeTicket[] output = new TimeTicket[25];
        output[0] = new TimeTicket(688955947);
        output[1] = new TimeTicket(158839540);
        output[2] = new TimeTicket(942279177);
        output[3] = new TimeTicket(-930822491);
        output[4] = new TimeTicket(638999266);
        output[5] = new TimeTicket(-467964548);
        output[6] = new TimeTicket(231230865);
        output[7] = new TimeTicket(451048937);
        output[8] = new TimeTicket(-418354064);
        output[9] = new TimeTicket(821264004);
        output[10] = new TimeTicket(-219256246);
        output[11] = new TimeTicket(-671988211);
        output[12] = new TimeTicket(164045282);
        output[13] = new TimeTicket(-180261227);
        output[14] = new TimeTicket(495466226);
        output[15] = new TimeTicket(4339717);
        output[16] = new TimeTicket(-972492805);
        output[17] = new TimeTicket(-498964465);
        output[18] = new TimeTicket(-496722695);
        output[19] = new TimeTicket(-333184867);
        output[20] = new TimeTicket(269423247);
        output[21] = new TimeTicket(-274654981);
        output[22] = new TimeTicket(-510203593);
        output[23] = new TimeTicket(577850177);
        output[24] = new TimeTicket(-345137375);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[25];
        answer[0] = new TimeTicket(-972492805);
        answer[1] = new TimeTicket(-930822491);
        answer[2] = new TimeTicket(-671988211);
        answer[3] = new TimeTicket(-510203593);
        answer[4] = new TimeTicket(-498964465);
        answer[5] = new TimeTicket(-496722695);
        answer[6] = new TimeTicket(-467964548);
        answer[7] = new TimeTicket(-418354064);
        answer[8] = new TimeTicket(-345137375);
        answer[9] = new TimeTicket(-333184867);
        answer[10] = new TimeTicket(-274654981);
        answer[11] = new TimeTicket(-219256246);
        answer[12] = new TimeTicket(-180261227);
        answer[13] = new TimeTicket(4339717);
        answer[14] = new TimeTicket(158839540);
        answer[15] = new TimeTicket(164045282);
        answer[16] = new TimeTicket(231230865);
        answer[17] = new TimeTicket(269423247);
        answer[18] = new TimeTicket(451048937);
        answer[19] = new TimeTicket(495466226);
        answer[20] = new TimeTicket(577850177);
        answer[21] = new TimeTicket(638999266);
        answer[22] = new TimeTicket(688955947);
        answer[23] = new TimeTicket(821264004);
        answer[24] = new TimeTicket(942279177);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00167() {
        int[] output = new int[4];
        output[0] = -941506236;
        output[1] = -731812155;
        output[2] = -747646815;
        output[3] = 767474159;
        Sorting.radixSort(output);
        int[] answer = new int[4];
        answer[0] = -941506236;
        answer[1] = -747646815;
        answer[2] = -731812155;
        answer[3] = 767474159;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00168() {
        TimeTicket[] output = new TimeTicket[1];
        output[0] = new TimeTicket(-402775934);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[1];
        answer[0] = new TimeTicket(-402775934);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00169() {
        TimeTicket[] output = new TimeTicket[12];
        output[0] = new TimeTicket(821359749);
        output[1] = new TimeTicket(-402921433);
        output[2] = new TimeTicket(-505649063);
        output[3] = new TimeTicket(-695107214);
        output[4] = new TimeTicket(-970487631);
        output[5] = new TimeTicket(-863377107);
        output[6] = new TimeTicket(-122198685);
        output[7] = new TimeTicket(-54193878);
        output[8] = new TimeTicket(-810372948);
        output[9] = new TimeTicket(-631667961);
        output[10] = new TimeTicket(-925230007);
        output[11] = new TimeTicket(-383980667);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[12];
        answer[0] = new TimeTicket(-970487631);
        answer[1] = new TimeTicket(-925230007);
        answer[2] = new TimeTicket(-863377107);
        answer[3] = new TimeTicket(-810372948);
        answer[4] = new TimeTicket(-695107214);
        answer[5] = new TimeTicket(-631667961);
        answer[6] = new TimeTicket(-505649063);
        answer[7] = new TimeTicket(-402921433);
        answer[8] = new TimeTicket(-383980667);
        answer[9] = new TimeTicket(-122198685);
        answer[10] = new TimeTicket(-54193878);
        answer[11] = new TimeTicket(821359749);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00170() {
        TimeTicket[] output = new TimeTicket[9];
        output[0] = new TimeTicket(718485112);
        output[1] = new TimeTicket(-265815578);
        output[2] = new TimeTicket(702836015);
        output[3] = new TimeTicket(-804868117);
        output[4] = new TimeTicket(-647213);
        output[5] = new TimeTicket(-75494633);
        output[6] = new TimeTicket(704015086);
        output[7] = new TimeTicket(497917625);
        output[8] = new TimeTicket(-150320624);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[9];
        answer[0] = new TimeTicket(-804868117);
        answer[1] = new TimeTicket(-265815578);
        answer[2] = new TimeTicket(-150320624);
        answer[3] = new TimeTicket(-75494633);
        answer[4] = new TimeTicket(-647213);
        answer[5] = new TimeTicket(497917625);
        answer[6] = new TimeTicket(702836015);
        answer[7] = new TimeTicket(704015086);
        answer[8] = new TimeTicket(718485112);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00171() {
        TimeTicket[] output = new TimeTicket[23];
        output[0] = new TimeTicket(-138334791);
        output[1] = new TimeTicket(233844079);
        output[2] = new TimeTicket(140020384);
        output[3] = new TimeTicket(302055379);
        output[4] = new TimeTicket(274686223);
        output[5] = new TimeTicket(751590845);
        output[6] = new TimeTicket(730044146);
        output[7] = new TimeTicket(-454636730);
        output[8] = new TimeTicket(-874413647);
        output[9] = new TimeTicket(-411770528);
        output[10] = new TimeTicket(-21480024);
        output[11] = new TimeTicket(-124695342);
        output[12] = new TimeTicket(-642327083);
        output[13] = new TimeTicket(944413730);
        output[14] = new TimeTicket(-600014763);
        output[15] = new TimeTicket(671313729);
        output[16] = new TimeTicket(442311104);
        output[17] = new TimeTicket(-625609168);
        output[18] = new TimeTicket(-431228670);
        output[19] = new TimeTicket(-935700175);
        output[20] = new TimeTicket(826080218);
        output[21] = new TimeTicket(512997974);
        output[22] = new TimeTicket(72432844);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[23];
        answer[0] = new TimeTicket(-935700175);
        answer[1] = new TimeTicket(-874413647);
        answer[2] = new TimeTicket(-642327083);
        answer[3] = new TimeTicket(-625609168);
        answer[4] = new TimeTicket(-600014763);
        answer[5] = new TimeTicket(-454636730);
        answer[6] = new TimeTicket(-431228670);
        answer[7] = new TimeTicket(-411770528);
        answer[8] = new TimeTicket(-138334791);
        answer[9] = new TimeTicket(-124695342);
        answer[10] = new TimeTicket(-21480024);
        answer[11] = new TimeTicket(72432844);
        answer[12] = new TimeTicket(140020384);
        answer[13] = new TimeTicket(233844079);
        answer[14] = new TimeTicket(274686223);
        answer[15] = new TimeTicket(302055379);
        answer[16] = new TimeTicket(442311104);
        answer[17] = new TimeTicket(512997974);
        answer[18] = new TimeTicket(671313729);
        answer[19] = new TimeTicket(730044146);
        answer[20] = new TimeTicket(751590845);
        answer[21] = new TimeTicket(826080218);
        answer[22] = new TimeTicket(944413730);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00172() {
        TimeTicket[] output = new TimeTicket[13];
        output[0] = new TimeTicket(757047570);
        output[1] = new TimeTicket(43218233);
        output[2] = new TimeTicket(667040007);
        output[3] = new TimeTicket(-573267258);
        output[4] = new TimeTicket(283935613);
        output[5] = new TimeTicket(93271123);
        output[6] = new TimeTicket(-773556772);
        output[7] = new TimeTicket(700909166);
        output[8] = new TimeTicket(-134037971);
        output[9] = new TimeTicket(806818417);
        output[10] = new TimeTicket(-11490663);
        output[11] = new TimeTicket(848940055);
        output[12] = new TimeTicket(-216547736);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[13];
        answer[0] = new TimeTicket(-773556772);
        answer[1] = new TimeTicket(-573267258);
        answer[2] = new TimeTicket(-216547736);
        answer[3] = new TimeTicket(-134037971);
        answer[4] = new TimeTicket(-11490663);
        answer[5] = new TimeTicket(43218233);
        answer[6] = new TimeTicket(93271123);
        answer[7] = new TimeTicket(283935613);
        answer[8] = new TimeTicket(667040007);
        answer[9] = new TimeTicket(700909166);
        answer[10] = new TimeTicket(757047570);
        answer[11] = new TimeTicket(806818417);
        answer[12] = new TimeTicket(848940055);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00173() {
        int[] output = new int[25];
        output[0] = 784311941;
        output[1] = -164453747;
        output[2] = 283974349;
        output[3] = -625334922;
        output[4] = 356620458;
        output[5] = -848447504;
        output[6] = 68183020;
        output[7] = -373790959;
        output[8] = 253272463;
        output[9] = -246811634;
        output[10] = -218754798;
        output[11] = 897200132;
        output[12] = -900602028;
        output[13] = 940329030;
        output[14] = 881572034;
        output[15] = -254985985;
        output[16] = -326227505;
        output[17] = -250544041;
        output[18] = -276503550;
        output[19] = 817618695;
        output[20] = -470601217;
        output[21] = 697563776;
        output[22] = 394782812;
        output[23] = 905718709;
        output[24] = -728531660;
        Sorting.radixSort(output);
        int[] answer = new int[25];
        answer[0] = -900602028;
        answer[1] = -848447504;
        answer[2] = -728531660;
        answer[3] = -625334922;
        answer[4] = -470601217;
        answer[5] = -373790959;
        answer[6] = -326227505;
        answer[7] = -276503550;
        answer[8] = -254985985;
        answer[9] = -250544041;
        answer[10] = -246811634;
        answer[11] = -218754798;
        answer[12] = -164453747;
        answer[13] = 68183020;
        answer[14] = 253272463;
        answer[15] = 283974349;
        answer[16] = 356620458;
        answer[17] = 394782812;
        answer[18] = 697563776;
        answer[19] = 784311941;
        answer[20] = 817618695;
        answer[21] = 881572034;
        answer[22] = 897200132;
        answer[23] = 905718709;
        answer[24] = 940329030;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00174() {
        TimeTicket[] output = new TimeTicket[4];
        output[0] = new TimeTicket(886812693);
        output[1] = new TimeTicket(596293861);
        output[2] = new TimeTicket(201063164);
        output[3] = new TimeTicket(27472612);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[4];
        answer[0] = new TimeTicket(27472612);
        answer[1] = new TimeTicket(201063164);
        answer[2] = new TimeTicket(596293861);
        answer[3] = new TimeTicket(886812693);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00175() {
        TimeTicket[] output = new TimeTicket[17];
        output[0] = new TimeTicket(807749879);
        output[1] = new TimeTicket(-287924131);
        output[2] = new TimeTicket(-47863542);
        output[3] = new TimeTicket(268183114);
        output[4] = new TimeTicket(-666603739);
        output[5] = new TimeTicket(-157903268);
        output[6] = new TimeTicket(624493734);
        output[7] = new TimeTicket(337437902);
        output[8] = new TimeTicket(-875994517);
        output[9] = new TimeTicket(-411718226);
        output[10] = new TimeTicket(-688498186);
        output[11] = new TimeTicket(439218862);
        output[12] = new TimeTicket(635104383);
        output[13] = new TimeTicket(982162956);
        output[14] = new TimeTicket(86409534);
        output[15] = new TimeTicket(-565162301);
        output[16] = new TimeTicket(33162196);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[17];
        answer[0] = new TimeTicket(-875994517);
        answer[1] = new TimeTicket(-688498186);
        answer[2] = new TimeTicket(-666603739);
        answer[3] = new TimeTicket(-565162301);
        answer[4] = new TimeTicket(-411718226);
        answer[5] = new TimeTicket(-287924131);
        answer[6] = new TimeTicket(-157903268);
        answer[7] = new TimeTicket(-47863542);
        answer[8] = new TimeTicket(33162196);
        answer[9] = new TimeTicket(86409534);
        answer[10] = new TimeTicket(268183114);
        answer[11] = new TimeTicket(337437902);
        answer[12] = new TimeTicket(439218862);
        answer[13] = new TimeTicket(624493734);
        answer[14] = new TimeTicket(635104383);
        answer[15] = new TimeTicket(807749879);
        answer[16] = new TimeTicket(982162956);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00176() {
        TimeTicket[] output = new TimeTicket[8];
        output[0] = new TimeTicket(703544751);
        output[1] = new TimeTicket(179915323);
        output[2] = new TimeTicket(-682874630);
        output[3] = new TimeTicket(186375788);
        output[4] = new TimeTicket(129119403);
        output[5] = new TimeTicket(453816587);
        output[6] = new TimeTicket(472074917);
        output[7] = new TimeTicket(-902047903);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[8];
        answer[0] = new TimeTicket(-902047903);
        answer[1] = new TimeTicket(-682874630);
        answer[2] = new TimeTicket(129119403);
        answer[3] = new TimeTicket(179915323);
        answer[4] = new TimeTicket(186375788);
        answer[5] = new TimeTicket(453816587);
        answer[6] = new TimeTicket(472074917);
        answer[7] = new TimeTicket(703544751);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00177() {
        TimeTicket[] output = new TimeTicket[13];
        output[0] = new TimeTicket(819628107);
        output[1] = new TimeTicket(-632971647);
        output[2] = new TimeTicket(-866975673);
        output[3] = new TimeTicket(859751463);
        output[4] = new TimeTicket(-709120452);
        output[5] = new TimeTicket(989275367);
        output[6] = new TimeTicket(681190376);
        output[7] = new TimeTicket(87953863);
        output[8] = new TimeTicket(-590927419);
        output[9] = new TimeTicket(-699897100);
        output[10] = new TimeTicket(299190412);
        output[11] = new TimeTicket(367840037);
        output[12] = new TimeTicket(-841425205);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[13];
        answer[0] = new TimeTicket(-866975673);
        answer[1] = new TimeTicket(-841425205);
        answer[2] = new TimeTicket(-709120452);
        answer[3] = new TimeTicket(-699897100);
        answer[4] = new TimeTicket(-632971647);
        answer[5] = new TimeTicket(-590927419);
        answer[6] = new TimeTicket(87953863);
        answer[7] = new TimeTicket(299190412);
        answer[8] = new TimeTicket(367840037);
        answer[9] = new TimeTicket(681190376);
        answer[10] = new TimeTicket(819628107);
        answer[11] = new TimeTicket(859751463);
        answer[12] = new TimeTicket(989275367);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00178() {
        TimeTicket[] output = new TimeTicket[20];
        output[0] = new TimeTicket(691661770);
        output[1] = new TimeTicket(-792394357);
        output[2] = new TimeTicket(-122205646);
        output[3] = new TimeTicket(-801970834);
        output[4] = new TimeTicket(-416674223);
        output[5] = new TimeTicket(745600656);
        output[6] = new TimeTicket(-583041841);
        output[7] = new TimeTicket(343725411);
        output[8] = new TimeTicket(-626078979);
        output[9] = new TimeTicket(216019303);
        output[10] = new TimeTicket(-671836900);
        output[11] = new TimeTicket(758706567);
        output[12] = new TimeTicket(752435146);
        output[13] = new TimeTicket(81312380);
        output[14] = new TimeTicket(933141398);
        output[15] = new TimeTicket(-419289581);
        output[16] = new TimeTicket(-471117505);
        output[17] = new TimeTicket(209520907);
        output[18] = new TimeTicket(760284355);
        output[19] = new TimeTicket(-201989625);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[20];
        answer[0] = new TimeTicket(-801970834);
        answer[1] = new TimeTicket(-792394357);
        answer[2] = new TimeTicket(-671836900);
        answer[3] = new TimeTicket(-626078979);
        answer[4] = new TimeTicket(-583041841);
        answer[5] = new TimeTicket(-471117505);
        answer[6] = new TimeTicket(-419289581);
        answer[7] = new TimeTicket(-416674223);
        answer[8] = new TimeTicket(-201989625);
        answer[9] = new TimeTicket(-122205646);
        answer[10] = new TimeTicket(81312380);
        answer[11] = new TimeTicket(209520907);
        answer[12] = new TimeTicket(216019303);
        answer[13] = new TimeTicket(343725411);
        answer[14] = new TimeTicket(691661770);
        answer[15] = new TimeTicket(745600656);
        answer[16] = new TimeTicket(752435146);
        answer[17] = new TimeTicket(758706567);
        answer[18] = new TimeTicket(760284355);
        answer[19] = new TimeTicket(933141398);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00179() {
        int[] output = new int[14];
        output[0] = -875208846;
        output[1] = -952791173;
        output[2] = -292611420;
        output[3] = -247813771;
        output[4] = 663050854;
        output[5] = -635518072;
        output[6] = 415311365;
        output[7] = -43645763;
        output[8] = -579835802;
        output[9] = 892574952;
        output[10] = -174459467;
        output[11] = -880072519;
        output[12] = -191519807;
        output[13] = -21968230;
        Sorting.radixSort(output);
        int[] answer = new int[14];
        answer[0] = -952791173;
        answer[1] = -880072519;
        answer[2] = -875208846;
        answer[3] = -635518072;
        answer[4] = -579835802;
        answer[5] = -292611420;
        answer[6] = -247813771;
        answer[7] = -191519807;
        answer[8] = -174459467;
        answer[9] = -43645763;
        answer[10] = -21968230;
        answer[11] = 415311365;
        answer[12] = 663050854;
        answer[13] = 892574952;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00180() {
        TimeTicket[] output = new TimeTicket[25];
        output[0] = new TimeTicket(926874905);
        output[1] = new TimeTicket(-69306984);
        output[2] = new TimeTicket(812250927);
        output[3] = new TimeTicket(-761962393);
        output[4] = new TimeTicket(-768439848);
        output[5] = new TimeTicket(150661250);
        output[6] = new TimeTicket(-253882641);
        output[7] = new TimeTicket(404267606);
        output[8] = new TimeTicket(-527232392);
        output[9] = new TimeTicket(770121418);
        output[10] = new TimeTicket(-147242250);
        output[11] = new TimeTicket(903149657);
        output[12] = new TimeTicket(-831517481);
        output[13] = new TimeTicket(543565179);
        output[14] = new TimeTicket(767305004);
        output[15] = new TimeTicket(-123143855);
        output[16] = new TimeTicket(665983605);
        output[17] = new TimeTicket(732962175);
        output[18] = new TimeTicket(627289294);
        output[19] = new TimeTicket(555443044);
        output[20] = new TimeTicket(-960499353);
        output[21] = new TimeTicket(-873085777);
        output[22] = new TimeTicket(-74120636);
        output[23] = new TimeTicket(721288084);
        output[24] = new TimeTicket(701257647);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[25];
        answer[0] = new TimeTicket(-960499353);
        answer[1] = new TimeTicket(-873085777);
        answer[2] = new TimeTicket(-831517481);
        answer[3] = new TimeTicket(-768439848);
        answer[4] = new TimeTicket(-761962393);
        answer[5] = new TimeTicket(-527232392);
        answer[6] = new TimeTicket(-253882641);
        answer[7] = new TimeTicket(-147242250);
        answer[8] = new TimeTicket(-123143855);
        answer[9] = new TimeTicket(-74120636);
        answer[10] = new TimeTicket(-69306984);
        answer[11] = new TimeTicket(150661250);
        answer[12] = new TimeTicket(404267606);
        answer[13] = new TimeTicket(543565179);
        answer[14] = new TimeTicket(555443044);
        answer[15] = new TimeTicket(627289294);
        answer[16] = new TimeTicket(665983605);
        answer[17] = new TimeTicket(701257647);
        answer[18] = new TimeTicket(721288084);
        answer[19] = new TimeTicket(732962175);
        answer[20] = new TimeTicket(767305004);
        answer[21] = new TimeTicket(770121418);
        answer[22] = new TimeTicket(812250927);
        answer[23] = new TimeTicket(903149657);
        answer[24] = new TimeTicket(926874905);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00181() {
        TimeTicket[] output = new TimeTicket[1];
        output[0] = new TimeTicket(-651043761);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[1];
        answer[0] = new TimeTicket(-651043761);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00182() {
        TimeTicket[] output = new TimeTicket[8];
        output[0] = new TimeTicket(-703966443);
        output[1] = new TimeTicket(-109684835);
        output[2] = new TimeTicket(-879221343);
        output[3] = new TimeTicket(910509561);
        output[4] = new TimeTicket(890454642);
        output[5] = new TimeTicket(-415884224);
        output[6] = new TimeTicket(37096746);
        output[7] = new TimeTicket(434825354);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[8];
        answer[0] = new TimeTicket(-879221343);
        answer[1] = new TimeTicket(-703966443);
        answer[2] = new TimeTicket(-415884224);
        answer[3] = new TimeTicket(-109684835);
        answer[4] = new TimeTicket(37096746);
        answer[5] = new TimeTicket(434825354);
        answer[6] = new TimeTicket(890454642);
        answer[7] = new TimeTicket(910509561);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00183() {
        TimeTicket[] output = new TimeTicket[22];
        output[0] = new TimeTicket(519858745);
        output[1] = new TimeTicket(304271026);
        output[2] = new TimeTicket(-931141999);
        output[3] = new TimeTicket(298140642);
        output[4] = new TimeTicket(297646138);
        output[5] = new TimeTicket(-685864568);
        output[6] = new TimeTicket(-823891720);
        output[7] = new TimeTicket(-112973862);
        output[8] = new TimeTicket(147397998);
        output[9] = new TimeTicket(360754820);
        output[10] = new TimeTicket(-489523867);
        output[11] = new TimeTicket(-521426641);
        output[12] = new TimeTicket(-384887144);
        output[13] = new TimeTicket(-302449515);
        output[14] = new TimeTicket(-797231019);
        output[15] = new TimeTicket(886312143);
        output[16] = new TimeTicket(81209038);
        output[17] = new TimeTicket(506278583);
        output[18] = new TimeTicket(-130467859);
        output[19] = new TimeTicket(-896157128);
        output[20] = new TimeTicket(264907714);
        output[21] = new TimeTicket(-943018972);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[22];
        answer[0] = new TimeTicket(-943018972);
        answer[1] = new TimeTicket(-931141999);
        answer[2] = new TimeTicket(-896157128);
        answer[3] = new TimeTicket(-823891720);
        answer[4] = new TimeTicket(-797231019);
        answer[5] = new TimeTicket(-685864568);
        answer[6] = new TimeTicket(-521426641);
        answer[7] = new TimeTicket(-489523867);
        answer[8] = new TimeTicket(-384887144);
        answer[9] = new TimeTicket(-302449515);
        answer[10] = new TimeTicket(-130467859);
        answer[11] = new TimeTicket(-112973862);
        answer[12] = new TimeTicket(81209038);
        answer[13] = new TimeTicket(147397998);
        answer[14] = new TimeTicket(264907714);
        answer[15] = new TimeTicket(297646138);
        answer[16] = new TimeTicket(298140642);
        answer[17] = new TimeTicket(304271026);
        answer[18] = new TimeTicket(360754820);
        answer[19] = new TimeTicket(506278583);
        answer[20] = new TimeTicket(519858745);
        answer[21] = new TimeTicket(886312143);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00184() {
        TimeTicket[] output = new TimeTicket[20];
        output[0] = new TimeTicket(792683984);
        output[1] = new TimeTicket(44131657);
        output[2] = new TimeTicket(-793589861);
        output[3] = new TimeTicket(326307968);
        output[4] = new TimeTicket(782137316);
        output[5] = new TimeTicket(-225939720);
        output[6] = new TimeTicket(355736127);
        output[7] = new TimeTicket(661846902);
        output[8] = new TimeTicket(242291179);
        output[9] = new TimeTicket(965862820);
        output[10] = new TimeTicket(291386371);
        output[11] = new TimeTicket(581415633);
        output[12] = new TimeTicket(73409259);
        output[13] = new TimeTicket(505933778);
        output[14] = new TimeTicket(533009616);
        output[15] = new TimeTicket(-35123849);
        output[16] = new TimeTicket(-492215618);
        output[17] = new TimeTicket(-770402455);
        output[18] = new TimeTicket(-115816814);
        output[19] = new TimeTicket(166831997);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[20];
        answer[0] = new TimeTicket(-793589861);
        answer[1] = new TimeTicket(-770402455);
        answer[2] = new TimeTicket(-492215618);
        answer[3] = new TimeTicket(-225939720);
        answer[4] = new TimeTicket(-115816814);
        answer[5] = new TimeTicket(-35123849);
        answer[6] = new TimeTicket(44131657);
        answer[7] = new TimeTicket(73409259);
        answer[8] = new TimeTicket(166831997);
        answer[9] = new TimeTicket(242291179);
        answer[10] = new TimeTicket(291386371);
        answer[11] = new TimeTicket(326307968);
        answer[12] = new TimeTicket(355736127);
        answer[13] = new TimeTicket(505933778);
        answer[14] = new TimeTicket(533009616);
        answer[15] = new TimeTicket(581415633);
        answer[16] = new TimeTicket(661846902);
        answer[17] = new TimeTicket(782137316);
        answer[18] = new TimeTicket(792683984);
        answer[19] = new TimeTicket(965862820);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00185() {
        int[] output = new int[24];
        output[0] = 87314632;
        output[1] = -215077437;
        output[2] = 42919907;
        output[3] = 669145924;
        output[4] = 999611062;
        output[5] = -519879286;
        output[6] = 820099377;
        output[7] = -232290347;
        output[8] = 969349577;
        output[9] = -635856620;
        output[10] = -796694449;
        output[11] = -390277826;
        output[12] = -293195384;
        output[13] = -655296632;
        output[14] = -183148325;
        output[15] = -537151614;
        output[16] = -743583505;
        output[17] = -175624882;
        output[18] = 426682506;
        output[19] = -476289327;
        output[20] = 266536955;
        output[21] = -422237352;
        output[22] = -66598763;
        output[23] = -260397813;
        Sorting.radixSort(output);
        int[] answer = new int[24];
        answer[0] = -796694449;
        answer[1] = -743583505;
        answer[2] = -655296632;
        answer[3] = -635856620;
        answer[4] = -537151614;
        answer[5] = -519879286;
        answer[6] = -476289327;
        answer[7] = -422237352;
        answer[8] = -390277826;
        answer[9] = -293195384;
        answer[10] = -260397813;
        answer[11] = -232290347;
        answer[12] = -215077437;
        answer[13] = -183148325;
        answer[14] = -175624882;
        answer[15] = -66598763;
        answer[16] = 42919907;
        answer[17] = 87314632;
        answer[18] = 266536955;
        answer[19] = 426682506;
        answer[20] = 669145924;
        answer[21] = 820099377;
        answer[22] = 969349577;
        answer[23] = 999611062;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00186() {
        TimeTicket[] output = new TimeTicket[4];
        output[0] = new TimeTicket(839122818);
        output[1] = new TimeTicket(988230409);
        output[2] = new TimeTicket(377262467);
        output[3] = new TimeTicket(-984866593);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[4];
        answer[0] = new TimeTicket(-984866593);
        answer[1] = new TimeTicket(377262467);
        answer[2] = new TimeTicket(839122818);
        answer[3] = new TimeTicket(988230409);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00187() {
        TimeTicket[] output = new TimeTicket[17];
        output[0] = new TimeTicket(-693400256);
        output[1] = new TimeTicket(87665999);
        output[2] = new TimeTicket(-911590102);
        output[3] = new TimeTicket(-832768947);
        output[4] = new TimeTicket(426472);
        output[5] = new TimeTicket(-701692933);
        output[6] = new TimeTicket(778486325);
        output[7] = new TimeTicket(623204182);
        output[8] = new TimeTicket(-421314665);
        output[9] = new TimeTicket(-621793796);
        output[10] = new TimeTicket(303486344);
        output[11] = new TimeTicket(-212431286);
        output[12] = new TimeTicket(-365830951);
        output[13] = new TimeTicket(-584152645);
        output[14] = new TimeTicket(-849585143);
        output[15] = new TimeTicket(-487522921);
        output[16] = new TimeTicket(-805178651);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[17];
        answer[0] = new TimeTicket(-911590102);
        answer[1] = new TimeTicket(-849585143);
        answer[2] = new TimeTicket(-832768947);
        answer[3] = new TimeTicket(-805178651);
        answer[4] = new TimeTicket(-701692933);
        answer[5] = new TimeTicket(-693400256);
        answer[6] = new TimeTicket(-621793796);
        answer[7] = new TimeTicket(-584152645);
        answer[8] = new TimeTicket(-487522921);
        answer[9] = new TimeTicket(-421314665);
        answer[10] = new TimeTicket(-365830951);
        answer[11] = new TimeTicket(-212431286);
        answer[12] = new TimeTicket(426472);
        answer[13] = new TimeTicket(87665999);
        answer[14] = new TimeTicket(303486344);
        answer[15] = new TimeTicket(623204182);
        answer[16] = new TimeTicket(778486325);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00188() {
        TimeTicket[] output = new TimeTicket[18];
        output[0] = new TimeTicket(-447643911);
        output[1] = new TimeTicket(-994360256);
        output[2] = new TimeTicket(792888552);
        output[3] = new TimeTicket(110859130);
        output[4] = new TimeTicket(-930248426);
        output[5] = new TimeTicket(122850698);
        output[6] = new TimeTicket(493771643);
        output[7] = new TimeTicket(-649347144);
        output[8] = new TimeTicket(-433809531);
        output[9] = new TimeTicket(393342357);
        output[10] = new TimeTicket(337452092);
        output[11] = new TimeTicket(-995292525);
        output[12] = new TimeTicket(-938650570);
        output[13] = new TimeTicket(-754756637);
        output[14] = new TimeTicket(633206131);
        output[15] = new TimeTicket(115101285);
        output[16] = new TimeTicket(-947762269);
        output[17] = new TimeTicket(180704837);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[18];
        answer[0] = new TimeTicket(-995292525);
        answer[1] = new TimeTicket(-994360256);
        answer[2] = new TimeTicket(-947762269);
        answer[3] = new TimeTicket(-938650570);
        answer[4] = new TimeTicket(-930248426);
        answer[5] = new TimeTicket(-754756637);
        answer[6] = new TimeTicket(-649347144);
        answer[7] = new TimeTicket(-447643911);
        answer[8] = new TimeTicket(-433809531);
        answer[9] = new TimeTicket(110859130);
        answer[10] = new TimeTicket(115101285);
        answer[11] = new TimeTicket(122850698);
        answer[12] = new TimeTicket(180704837);
        answer[13] = new TimeTicket(337452092);
        answer[14] = new TimeTicket(393342357);
        answer[15] = new TimeTicket(493771643);
        answer[16] = new TimeTicket(633206131);
        answer[17] = new TimeTicket(792888552);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00189() {
        TimeTicket[] output = new TimeTicket[20];
        output[0] = new TimeTicket(672071975);
        output[1] = new TimeTicket(-445979872);
        output[2] = new TimeTicket(-974079493);
        output[3] = new TimeTicket(-274884407);
        output[4] = new TimeTicket(915181501);
        output[5] = new TimeTicket(-147291263);
        output[6] = new TimeTicket(195420202);
        output[7] = new TimeTicket(-278251071);
        output[8] = new TimeTicket(918708769);
        output[9] = new TimeTicket(-906218888);
        output[10] = new TimeTicket(-217066996);
        output[11] = new TimeTicket(144010740);
        output[12] = new TimeTicket(755112886);
        output[13] = new TimeTicket(767041548);
        output[14] = new TimeTicket(-677177260);
        output[15] = new TimeTicket(224231751);
        output[16] = new TimeTicket(198315643);
        output[17] = new TimeTicket(-381341624);
        output[18] = new TimeTicket(-606066425);
        output[19] = new TimeTicket(333938850);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[20];
        answer[0] = new TimeTicket(-974079493);
        answer[1] = new TimeTicket(-906218888);
        answer[2] = new TimeTicket(-677177260);
        answer[3] = new TimeTicket(-606066425);
        answer[4] = new TimeTicket(-445979872);
        answer[5] = new TimeTicket(-381341624);
        answer[6] = new TimeTicket(-278251071);
        answer[7] = new TimeTicket(-274884407);
        answer[8] = new TimeTicket(-217066996);
        answer[9] = new TimeTicket(-147291263);
        answer[10] = new TimeTicket(144010740);
        answer[11] = new TimeTicket(195420202);
        answer[12] = new TimeTicket(198315643);
        answer[13] = new TimeTicket(224231751);
        answer[14] = new TimeTicket(333938850);
        answer[15] = new TimeTicket(672071975);
        answer[16] = new TimeTicket(755112886);
        answer[17] = new TimeTicket(767041548);
        answer[18] = new TimeTicket(915181501);
        answer[19] = new TimeTicket(918708769);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00190() {
        TimeTicket[] output = new TimeTicket[22];
        output[0] = new TimeTicket(746656166);
        output[1] = new TimeTicket(-243600834);
        output[2] = new TimeTicket(-80223225);
        output[3] = new TimeTicket(-233109930);
        output[4] = new TimeTicket(566749426);
        output[5] = new TimeTicket(-151645236);
        output[6] = new TimeTicket(988330298);
        output[7] = new TimeTicket(67219059);
        output[8] = new TimeTicket(41725493);
        output[9] = new TimeTicket(432867008);
        output[10] = new TimeTicket(701816896);
        output[11] = new TimeTicket(-696877294);
        output[12] = new TimeTicket(-846739247);
        output[13] = new TimeTicket(-777163738);
        output[14] = new TimeTicket(-568570773);
        output[15] = new TimeTicket(896808450);
        output[16] = new TimeTicket(-95063814);
        output[17] = new TimeTicket(773850185);
        output[18] = new TimeTicket(787235202);
        output[19] = new TimeTicket(-778859943);
        output[20] = new TimeTicket(376953249);
        output[21] = new TimeTicket(-303179389);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[22];
        answer[0] = new TimeTicket(-846739247);
        answer[1] = new TimeTicket(-778859943);
        answer[2] = new TimeTicket(-777163738);
        answer[3] = new TimeTicket(-696877294);
        answer[4] = new TimeTicket(-568570773);
        answer[5] = new TimeTicket(-303179389);
        answer[6] = new TimeTicket(-243600834);
        answer[7] = new TimeTicket(-233109930);
        answer[8] = new TimeTicket(-151645236);
        answer[9] = new TimeTicket(-95063814);
        answer[10] = new TimeTicket(-80223225);
        answer[11] = new TimeTicket(41725493);
        answer[12] = new TimeTicket(67219059);
        answer[13] = new TimeTicket(376953249);
        answer[14] = new TimeTicket(432867008);
        answer[15] = new TimeTicket(566749426);
        answer[16] = new TimeTicket(701816896);
        answer[17] = new TimeTicket(746656166);
        answer[18] = new TimeTicket(773850185);
        answer[19] = new TimeTicket(787235202);
        answer[20] = new TimeTicket(896808450);
        answer[21] = new TimeTicket(988330298);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00191() {
        int[] output = new int[14];
        output[0] = -221773943;
        output[1] = -997178316;
        output[2] = -459848238;
        output[3] = -232040522;
        output[4] = 50392219;
        output[5] = 57737324;
        output[6] = 916125243;
        output[7] = -578761735;
        output[8] = -38955429;
        output[9] = -236211168;
        output[10] = 231439814;
        output[11] = 783814443;
        output[12] = 315439261;
        output[13] = 472003235;
        Sorting.radixSort(output);
        int[] answer = new int[14];
        answer[0] = -997178316;
        answer[1] = -578761735;
        answer[2] = -459848238;
        answer[3] = -236211168;
        answer[4] = -232040522;
        answer[5] = -221773943;
        answer[6] = -38955429;
        answer[7] = 50392219;
        answer[8] = 57737324;
        answer[9] = 231439814;
        answer[10] = 315439261;
        answer[11] = 472003235;
        answer[12] = 783814443;
        answer[13] = 916125243;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00192() {
        TimeTicket[] output = new TimeTicket[23];
        output[0] = new TimeTicket(405111889);
        output[1] = new TimeTicket(-88913438);
        output[2] = new TimeTicket(552025771);
        output[3] = new TimeTicket(965733523);
        output[4] = new TimeTicket(-490984594);
        output[5] = new TimeTicket(-396501601);
        output[6] = new TimeTicket(576103692);
        output[7] = new TimeTicket(-138076437);
        output[8] = new TimeTicket(560139934);
        output[9] = new TimeTicket(80952717);
        output[10] = new TimeTicket(341516234);
        output[11] = new TimeTicket(-383347800);
        output[12] = new TimeTicket(506564713);
        output[13] = new TimeTicket(-91405607);
        output[14] = new TimeTicket(-791698866);
        output[15] = new TimeTicket(-522765535);
        output[16] = new TimeTicket(718430345);
        output[17] = new TimeTicket(108599419);
        output[18] = new TimeTicket(-99638726);
        output[19] = new TimeTicket(663460659);
        output[20] = new TimeTicket(-606390146);
        output[21] = new TimeTicket(502847472);
        output[22] = new TimeTicket(-823407424);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[23];
        answer[0] = new TimeTicket(-823407424);
        answer[1] = new TimeTicket(-791698866);
        answer[2] = new TimeTicket(-606390146);
        answer[3] = new TimeTicket(-522765535);
        answer[4] = new TimeTicket(-490984594);
        answer[5] = new TimeTicket(-396501601);
        answer[6] = new TimeTicket(-383347800);
        answer[7] = new TimeTicket(-138076437);
        answer[8] = new TimeTicket(-99638726);
        answer[9] = new TimeTicket(-91405607);
        answer[10] = new TimeTicket(-88913438);
        answer[11] = new TimeTicket(80952717);
        answer[12] = new TimeTicket(108599419);
        answer[13] = new TimeTicket(341516234);
        answer[14] = new TimeTicket(405111889);
        answer[15] = new TimeTicket(502847472);
        answer[16] = new TimeTicket(506564713);
        answer[17] = new TimeTicket(552025771);
        answer[18] = new TimeTicket(560139934);
        answer[19] = new TimeTicket(576103692);
        answer[20] = new TimeTicket(663460659);
        answer[21] = new TimeTicket(718430345);
        answer[22] = new TimeTicket(965733523);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00193() {
        TimeTicket[] output = new TimeTicket[30];
        output[0] = new TimeTicket(952711895);
        output[1] = new TimeTicket(179292114);
        output[2] = new TimeTicket(537383414);
        output[3] = new TimeTicket(422457511);
        output[4] = new TimeTicket(-556009881);
        output[5] = new TimeTicket(-162459963);
        output[6] = new TimeTicket(418417059);
        output[7] = new TimeTicket(992628553);
        output[8] = new TimeTicket(-664370589);
        output[9] = new TimeTicket(684556122);
        output[10] = new TimeTicket(624723836);
        output[11] = new TimeTicket(262192387);
        output[12] = new TimeTicket(-711809245);
        output[13] = new TimeTicket(740156158);
        output[14] = new TimeTicket(-100996418);
        output[15] = new TimeTicket(-932228367);
        output[16] = new TimeTicket(-943810104);
        output[17] = new TimeTicket(89486525);
        output[18] = new TimeTicket(525324116);
        output[19] = new TimeTicket(-902094164);
        output[20] = new TimeTicket(63176099);
        output[21] = new TimeTicket(700023183);
        output[22] = new TimeTicket(302277420);
        output[23] = new TimeTicket(499124339);
        output[24] = new TimeTicket(203621394);
        output[25] = new TimeTicket(994055441);
        output[26] = new TimeTicket(-309207435);
        output[27] = new TimeTicket(-166047401);
        output[28] = new TimeTicket(-834941820);
        output[29] = new TimeTicket(803579544);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[30];
        answer[0] = new TimeTicket(-943810104);
        answer[1] = new TimeTicket(-932228367);
        answer[2] = new TimeTicket(-902094164);
        answer[3] = new TimeTicket(-834941820);
        answer[4] = new TimeTicket(-711809245);
        answer[5] = new TimeTicket(-664370589);
        answer[6] = new TimeTicket(-556009881);
        answer[7] = new TimeTicket(-309207435);
        answer[8] = new TimeTicket(-166047401);
        answer[9] = new TimeTicket(-162459963);
        answer[10] = new TimeTicket(-100996418);
        answer[11] = new TimeTicket(63176099);
        answer[12] = new TimeTicket(89486525);
        answer[13] = new TimeTicket(179292114);
        answer[14] = new TimeTicket(203621394);
        answer[15] = new TimeTicket(262192387);
        answer[16] = new TimeTicket(302277420);
        answer[17] = new TimeTicket(418417059);
        answer[18] = new TimeTicket(422457511);
        answer[19] = new TimeTicket(499124339);
        answer[20] = new TimeTicket(525324116);
        answer[21] = new TimeTicket(537383414);
        answer[22] = new TimeTicket(624723836);
        answer[23] = new TimeTicket(684556122);
        answer[24] = new TimeTicket(700023183);
        answer[25] = new TimeTicket(740156158);
        answer[26] = new TimeTicket(803579544);
        answer[27] = new TimeTicket(952711895);
        answer[28] = new TimeTicket(992628553);
        answer[29] = new TimeTicket(994055441);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00194() {
        TimeTicket[] output = new TimeTicket[2];
        output[0] = new TimeTicket(544296652);
        output[1] = new TimeTicket(498537029);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[2];
        answer[0] = new TimeTicket(498537029);
        answer[1] = new TimeTicket(544296652);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00195() {
        TimeTicket[] output = new TimeTicket[20];
        output[0] = new TimeTicket(-328718679);
        output[1] = new TimeTicket(-215112819);
        output[2] = new TimeTicket(885839723);
        output[3] = new TimeTicket(-745421168);
        output[4] = new TimeTicket(-754454999);
        output[5] = new TimeTicket(72710288);
        output[6] = new TimeTicket(-600100990);
        output[7] = new TimeTicket(-65048495);
        output[8] = new TimeTicket(-331446510);
        output[9] = new TimeTicket(-746273210);
        output[10] = new TimeTicket(153342285);
        output[11] = new TimeTicket(302548794);
        output[12] = new TimeTicket(-361083153);
        output[13] = new TimeTicket(604259984);
        output[14] = new TimeTicket(629478429);
        output[15] = new TimeTicket(-811021585);
        output[16] = new TimeTicket(917544370);
        output[17] = new TimeTicket(46583998);
        output[18] = new TimeTicket(743283098);
        output[19] = new TimeTicket(-449809744);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[20];
        answer[0] = new TimeTicket(-811021585);
        answer[1] = new TimeTicket(-754454999);
        answer[2] = new TimeTicket(-746273210);
        answer[3] = new TimeTicket(-745421168);
        answer[4] = new TimeTicket(-600100990);
        answer[5] = new TimeTicket(-449809744);
        answer[6] = new TimeTicket(-361083153);
        answer[7] = new TimeTicket(-331446510);
        answer[8] = new TimeTicket(-328718679);
        answer[9] = new TimeTicket(-215112819);
        answer[10] = new TimeTicket(-65048495);
        answer[11] = new TimeTicket(46583998);
        answer[12] = new TimeTicket(72710288);
        answer[13] = new TimeTicket(153342285);
        answer[14] = new TimeTicket(302548794);
        answer[15] = new TimeTicket(604259984);
        answer[16] = new TimeTicket(629478429);
        answer[17] = new TimeTicket(743283098);
        answer[18] = new TimeTicket(885839723);
        answer[19] = new TimeTicket(917544370);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00196() {
        TimeTicket[] output = new TimeTicket[5];
        output[0] = new TimeTicket(-581876486);
        output[1] = new TimeTicket(180655516);
        output[2] = new TimeTicket(127087662);
        output[3] = new TimeTicket(-528493156);
        output[4] = new TimeTicket(694453304);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[5];
        answer[0] = new TimeTicket(-581876486);
        answer[1] = new TimeTicket(-528493156);
        answer[2] = new TimeTicket(127087662);
        answer[3] = new TimeTicket(180655516);
        answer[4] = new TimeTicket(694453304);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00197() {
        int[] output = new int[14];
        output[0] = 531925894;
        output[1] = -494654085;
        output[2] = -816146841;
        output[3] = 569453359;
        output[4] = 630407546;
        output[5] = -493065096;
        output[6] = -297293180;
        output[7] = 702760131;
        output[8] = -487353708;
        output[9] = 704437376;
        output[10] = -4125090;
        output[11] = -768064139;
        output[12] = -139205932;
        output[13] = 456037916;
        Sorting.radixSort(output);
        int[] answer = new int[14];
        answer[0] = -816146841;
        answer[1] = -768064139;
        answer[2] = -494654085;
        answer[3] = -493065096;
        answer[4] = -487353708;
        answer[5] = -297293180;
        answer[6] = -139205932;
        answer[7] = -4125090;
        answer[8] = 456037916;
        answer[9] = 531925894;
        answer[10] = 569453359;
        answer[11] = 630407546;
        answer[12] = 702760131;
        answer[13] = 704437376;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00198() {
        TimeTicket[] output = new TimeTicket[3];
        output[0] = new TimeTicket(-390205162);
        output[1] = new TimeTicket(160400074);
        output[2] = new TimeTicket(44318936);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[3];
        answer[0] = new TimeTicket(-390205162);
        answer[1] = new TimeTicket(44318936);
        answer[2] = new TimeTicket(160400074);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00199() {
        TimeTicket[] output = new TimeTicket[18];
        output[0] = new TimeTicket(656458932);
        output[1] = new TimeTicket(-980205783);
        output[2] = new TimeTicket(640949431);
        output[3] = new TimeTicket(-306802193);
        output[4] = new TimeTicket(16877167);
        output[5] = new TimeTicket(-466654288);
        output[6] = new TimeTicket(870552928);
        output[7] = new TimeTicket(618866154);
        output[8] = new TimeTicket(423042115);
        output[9] = new TimeTicket(-211542107);
        output[10] = new TimeTicket(-833789983);
        output[11] = new TimeTicket(607554101);
        output[12] = new TimeTicket(337559815);
        output[13] = new TimeTicket(233262562);
        output[14] = new TimeTicket(299773975);
        output[15] = new TimeTicket(-626828504);
        output[16] = new TimeTicket(224231815);
        output[17] = new TimeTicket(96862403);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[18];
        answer[0] = new TimeTicket(-980205783);
        answer[1] = new TimeTicket(-833789983);
        answer[2] = new TimeTicket(-626828504);
        answer[3] = new TimeTicket(-466654288);
        answer[4] = new TimeTicket(-306802193);
        answer[5] = new TimeTicket(-211542107);
        answer[6] = new TimeTicket(16877167);
        answer[7] = new TimeTicket(96862403);
        answer[8] = new TimeTicket(224231815);
        answer[9] = new TimeTicket(233262562);
        answer[10] = new TimeTicket(299773975);
        answer[11] = new TimeTicket(337559815);
        answer[12] = new TimeTicket(423042115);
        answer[13] = new TimeTicket(607554101);
        answer[14] = new TimeTicket(618866154);
        answer[15] = new TimeTicket(640949431);
        answer[16] = new TimeTicket(656458932);
        answer[17] = new TimeTicket(870552928);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00200() {
        TimeTicket[] output = new TimeTicket[24];
        output[0] = new TimeTicket(325999442);
        output[1] = new TimeTicket(459757707);
        output[2] = new TimeTicket(7988943);
        output[3] = new TimeTicket(-915172798);
        output[4] = new TimeTicket(633975031);
        output[5] = new TimeTicket(-985483452);
        output[6] = new TimeTicket(133382037);
        output[7] = new TimeTicket(-575904011);
        output[8] = new TimeTicket(-695905806);
        output[9] = new TimeTicket(-332285088);
        output[10] = new TimeTicket(399393961);
        output[11] = new TimeTicket(796381947);
        output[12] = new TimeTicket(-772808410);
        output[13] = new TimeTicket(113823931);
        output[14] = new TimeTicket(260920063);
        output[15] = new TimeTicket(81331678);
        output[16] = new TimeTicket(679516867);
        output[17] = new TimeTicket(-484242068);
        output[18] = new TimeTicket(-489835986);
        output[19] = new TimeTicket(-632505204);
        output[20] = new TimeTicket(-123568051);
        output[21] = new TimeTicket(-551620267);
        output[22] = new TimeTicket(-752610360);
        output[23] = new TimeTicket(496494610);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[24];
        answer[0] = new TimeTicket(-985483452);
        answer[1] = new TimeTicket(-915172798);
        answer[2] = new TimeTicket(-772808410);
        answer[3] = new TimeTicket(-752610360);
        answer[4] = new TimeTicket(-695905806);
        answer[5] = new TimeTicket(-632505204);
        answer[6] = new TimeTicket(-575904011);
        answer[7] = new TimeTicket(-551620267);
        answer[8] = new TimeTicket(-489835986);
        answer[9] = new TimeTicket(-484242068);
        answer[10] = new TimeTicket(-332285088);
        answer[11] = new TimeTicket(-123568051);
        answer[12] = new TimeTicket(7988943);
        answer[13] = new TimeTicket(81331678);
        answer[14] = new TimeTicket(113823931);
        answer[15] = new TimeTicket(133382037);
        answer[16] = new TimeTicket(260920063);
        answer[17] = new TimeTicket(325999442);
        answer[18] = new TimeTicket(399393961);
        answer[19] = new TimeTicket(459757707);
        answer[20] = new TimeTicket(496494610);
        answer[21] = new TimeTicket(633975031);
        answer[22] = new TimeTicket(679516867);
        answer[23] = new TimeTicket(796381947);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00201() {
        TimeTicket[] output = new TimeTicket[7];
        output[0] = new TimeTicket(-625961587);
        output[1] = new TimeTicket(631512833);
        output[2] = new TimeTicket(-816067334);
        output[3] = new TimeTicket(-193811442);
        output[4] = new TimeTicket(853662442);
        output[5] = new TimeTicket(-948272815);
        output[6] = new TimeTicket(-377382859);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[7];
        answer[0] = new TimeTicket(-948272815);
        answer[1] = new TimeTicket(-816067334);
        answer[2] = new TimeTicket(-625961587);
        answer[3] = new TimeTicket(-377382859);
        answer[4] = new TimeTicket(-193811442);
        answer[5] = new TimeTicket(631512833);
        answer[6] = new TimeTicket(853662442);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00202() {
        TimeTicket[] output = new TimeTicket[14];
        output[0] = new TimeTicket(62896461);
        output[1] = new TimeTicket(-392225250);
        output[2] = new TimeTicket(-108972087);
        output[3] = new TimeTicket(-244804282);
        output[4] = new TimeTicket(-987328971);
        output[5] = new TimeTicket(-339677300);
        output[6] = new TimeTicket(555728900);
        output[7] = new TimeTicket(-980113814);
        output[8] = new TimeTicket(-477004745);
        output[9] = new TimeTicket(195625102);
        output[10] = new TimeTicket(-477517227);
        output[11] = new TimeTicket(803538850);
        output[12] = new TimeTicket(342029033);
        output[13] = new TimeTicket(-34155143);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[14];
        answer[0] = new TimeTicket(-987328971);
        answer[1] = new TimeTicket(-980113814);
        answer[2] = new TimeTicket(-477517227);
        answer[3] = new TimeTicket(-477004745);
        answer[4] = new TimeTicket(-392225250);
        answer[5] = new TimeTicket(-339677300);
        answer[6] = new TimeTicket(-244804282);
        answer[7] = new TimeTicket(-108972087);
        answer[8] = new TimeTicket(-34155143);
        answer[9] = new TimeTicket(62896461);
        answer[10] = new TimeTicket(195625102);
        answer[11] = new TimeTicket(342029033);
        answer[12] = new TimeTicket(555728900);
        answer[13] = new TimeTicket(803538850);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00203() {
        int[] output = new int[18];
        output[0] = -56190329;
        output[1] = -270659224;
        output[2] = -736609935;
        output[3] = -540492452;
        output[4] = 690762605;
        output[5] = 723439714;
        output[6] = -792042413;
        output[7] = 568572972;
        output[8] = 289623371;
        output[9] = 322651580;
        output[10] = 681319459;
        output[11] = -408230953;
        output[12] = 615687449;
        output[13] = -799153210;
        output[14] = -354871575;
        output[15] = 415641105;
        output[16] = -316582528;
        output[17] = 376662081;
        Sorting.radixSort(output);
        int[] answer = new int[18];
        answer[0] = -799153210;
        answer[1] = -792042413;
        answer[2] = -736609935;
        answer[3] = -540492452;
        answer[4] = -408230953;
        answer[5] = -354871575;
        answer[6] = -316582528;
        answer[7] = -270659224;
        answer[8] = -56190329;
        answer[9] = 289623371;
        answer[10] = 322651580;
        answer[11] = 376662081;
        answer[12] = 415641105;
        answer[13] = 568572972;
        answer[14] = 615687449;
        answer[15] = 681319459;
        answer[16] = 690762605;
        answer[17] = 723439714;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00204() {
        TimeTicket[] output = new TimeTicket[25];
        output[0] = new TimeTicket(574859748);
        output[1] = new TimeTicket(598711239);
        output[2] = new TimeTicket(553365331);
        output[3] = new TimeTicket(-449231622);
        output[4] = new TimeTicket(-139614744);
        output[5] = new TimeTicket(327003998);
        output[6] = new TimeTicket(619328512);
        output[7] = new TimeTicket(-601259658);
        output[8] = new TimeTicket(409184851);
        output[9] = new TimeTicket(-827634373);
        output[10] = new TimeTicket(-751651359);
        output[11] = new TimeTicket(-774879176);
        output[12] = new TimeTicket(909626700);
        output[13] = new TimeTicket(638089716);
        output[14] = new TimeTicket(888800161);
        output[15] = new TimeTicket(907089124);
        output[16] = new TimeTicket(42267317);
        output[17] = new TimeTicket(-835212330);
        output[18] = new TimeTicket(112611816);
        output[19] = new TimeTicket(727119625);
        output[20] = new TimeTicket(403702196);
        output[21] = new TimeTicket(997973633);
        output[22] = new TimeTicket(973209913);
        output[23] = new TimeTicket(-762406624);
        output[24] = new TimeTicket(-118833216);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[25];
        answer[0] = new TimeTicket(-835212330);
        answer[1] = new TimeTicket(-827634373);
        answer[2] = new TimeTicket(-774879176);
        answer[3] = new TimeTicket(-762406624);
        answer[4] = new TimeTicket(-751651359);
        answer[5] = new TimeTicket(-601259658);
        answer[6] = new TimeTicket(-449231622);
        answer[7] = new TimeTicket(-139614744);
        answer[8] = new TimeTicket(-118833216);
        answer[9] = new TimeTicket(42267317);
        answer[10] = new TimeTicket(112611816);
        answer[11] = new TimeTicket(327003998);
        answer[12] = new TimeTicket(403702196);
        answer[13] = new TimeTicket(409184851);
        answer[14] = new TimeTicket(553365331);
        answer[15] = new TimeTicket(574859748);
        answer[16] = new TimeTicket(598711239);
        answer[17] = new TimeTicket(619328512);
        answer[18] = new TimeTicket(638089716);
        answer[19] = new TimeTicket(727119625);
        answer[20] = new TimeTicket(888800161);
        answer[21] = new TimeTicket(907089124);
        answer[22] = new TimeTicket(909626700);
        answer[23] = new TimeTicket(973209913);
        answer[24] = new TimeTicket(997973633);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00205() {
        TimeTicket[] output = new TimeTicket[17];
        output[0] = new TimeTicket(-832272630);
        output[1] = new TimeTicket(-54679287);
        output[2] = new TimeTicket(7653839);
        output[3] = new TimeTicket(-420971532);
        output[4] = new TimeTicket(-409138860);
        output[5] = new TimeTicket(-477074800);
        output[6] = new TimeTicket(-244833856);
        output[7] = new TimeTicket(-891508903);
        output[8] = new TimeTicket(759622488);
        output[9] = new TimeTicket(-922704045);
        output[10] = new TimeTicket(-715581866);
        output[11] = new TimeTicket(-909112049);
        output[12] = new TimeTicket(521683929);
        output[13] = new TimeTicket(-280239271);
        output[14] = new TimeTicket(842956188);
        output[15] = new TimeTicket(-319158952);
        output[16] = new TimeTicket(-622074298);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[17];
        answer[0] = new TimeTicket(-922704045);
        answer[1] = new TimeTicket(-909112049);
        answer[2] = new TimeTicket(-891508903);
        answer[3] = new TimeTicket(-832272630);
        answer[4] = new TimeTicket(-715581866);
        answer[5] = new TimeTicket(-622074298);
        answer[6] = new TimeTicket(-477074800);
        answer[7] = new TimeTicket(-420971532);
        answer[8] = new TimeTicket(-409138860);
        answer[9] = new TimeTicket(-319158952);
        answer[10] = new TimeTicket(-280239271);
        answer[11] = new TimeTicket(-244833856);
        answer[12] = new TimeTicket(-54679287);
        answer[13] = new TimeTicket(7653839);
        answer[14] = new TimeTicket(521683929);
        answer[15] = new TimeTicket(759622488);
        answer[16] = new TimeTicket(842956188);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00206() {
        TimeTicket[] output = new TimeTicket[18];
        output[0] = new TimeTicket(-212409870);
        output[1] = new TimeTicket(-337331966);
        output[2] = new TimeTicket(762637398);
        output[3] = new TimeTicket(355804774);
        output[4] = new TimeTicket(270379759);
        output[5] = new TimeTicket(982564706);
        output[6] = new TimeTicket(289438758);
        output[7] = new TimeTicket(64908044);
        output[8] = new TimeTicket(160627536);
        output[9] = new TimeTicket(26135898);
        output[10] = new TimeTicket(-74574804);
        output[11] = new TimeTicket(-959656972);
        output[12] = new TimeTicket(323310907);
        output[13] = new TimeTicket(573047160);
        output[14] = new TimeTicket(-153092672);
        output[15] = new TimeTicket(978838591);
        output[16] = new TimeTicket(449496998);
        output[17] = new TimeTicket(919664022);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[18];
        answer[0] = new TimeTicket(-959656972);
        answer[1] = new TimeTicket(-337331966);
        answer[2] = new TimeTicket(-212409870);
        answer[3] = new TimeTicket(-153092672);
        answer[4] = new TimeTicket(-74574804);
        answer[5] = new TimeTicket(26135898);
        answer[6] = new TimeTicket(64908044);
        answer[7] = new TimeTicket(160627536);
        answer[8] = new TimeTicket(270379759);
        answer[9] = new TimeTicket(289438758);
        answer[10] = new TimeTicket(323310907);
        answer[11] = new TimeTicket(355804774);
        answer[12] = new TimeTicket(449496998);
        answer[13] = new TimeTicket(573047160);
        answer[14] = new TimeTicket(762637398);
        answer[15] = new TimeTicket(919664022);
        answer[16] = new TimeTicket(978838591);
        answer[17] = new TimeTicket(982564706);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00207() {
        TimeTicket[] output = new TimeTicket[26];
        output[0] = new TimeTicket(-824337509);
        output[1] = new TimeTicket(-633104701);
        output[2] = new TimeTicket(-377413489);
        output[3] = new TimeTicket(199273416);
        output[4] = new TimeTicket(115702100);
        output[5] = new TimeTicket(-989314958);
        output[6] = new TimeTicket(756492795);
        output[7] = new TimeTicket(1163272);
        output[8] = new TimeTicket(-485092670);
        output[9] = new TimeTicket(838810478);
        output[10] = new TimeTicket(194558261);
        output[11] = new TimeTicket(-680582328);
        output[12] = new TimeTicket(159873454);
        output[13] = new TimeTicket(-120918246);
        output[14] = new TimeTicket(-649605672);
        output[15] = new TimeTicket(866083121);
        output[16] = new TimeTicket(-181398403);
        output[17] = new TimeTicket(510373979);
        output[18] = new TimeTicket(-2129727);
        output[19] = new TimeTicket(-550687254);
        output[20] = new TimeTicket(-58624009);
        output[21] = new TimeTicket(-329531421);
        output[22] = new TimeTicket(-827169395);
        output[23] = new TimeTicket(-370139651);
        output[24] = new TimeTicket(300196166);
        output[25] = new TimeTicket(-470379401);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[26];
        answer[0] = new TimeTicket(-989314958);
        answer[1] = new TimeTicket(-827169395);
        answer[2] = new TimeTicket(-824337509);
        answer[3] = new TimeTicket(-680582328);
        answer[4] = new TimeTicket(-649605672);
        answer[5] = new TimeTicket(-633104701);
        answer[6] = new TimeTicket(-550687254);
        answer[7] = new TimeTicket(-485092670);
        answer[8] = new TimeTicket(-470379401);
        answer[9] = new TimeTicket(-377413489);
        answer[10] = new TimeTicket(-370139651);
        answer[11] = new TimeTicket(-329531421);
        answer[12] = new TimeTicket(-181398403);
        answer[13] = new TimeTicket(-120918246);
        answer[14] = new TimeTicket(-58624009);
        answer[15] = new TimeTicket(-2129727);
        answer[16] = new TimeTicket(1163272);
        answer[17] = new TimeTicket(115702100);
        answer[18] = new TimeTicket(159873454);
        answer[19] = new TimeTicket(194558261);
        answer[20] = new TimeTicket(199273416);
        answer[21] = new TimeTicket(300196166);
        answer[22] = new TimeTicket(510373979);
        answer[23] = new TimeTicket(756492795);
        answer[24] = new TimeTicket(838810478);
        answer[25] = new TimeTicket(866083121);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00208() {
        TimeTicket[] output = new TimeTicket[12];
        output[0] = new TimeTicket(-89217126);
        output[1] = new TimeTicket(898786693);
        output[2] = new TimeTicket(309387346);
        output[3] = new TimeTicket(677511149);
        output[4] = new TimeTicket(108389002);
        output[5] = new TimeTicket(864998723);
        output[6] = new TimeTicket(961188545);
        output[7] = new TimeTicket(732322964);
        output[8] = new TimeTicket(913424162);
        output[9] = new TimeTicket(-105594784);
        output[10] = new TimeTicket(-701830728);
        output[11] = new TimeTicket(314320405);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[12];
        answer[0] = new TimeTicket(-701830728);
        answer[1] = new TimeTicket(-105594784);
        answer[2] = new TimeTicket(-89217126);
        answer[3] = new TimeTicket(108389002);
        answer[4] = new TimeTicket(309387346);
        answer[5] = new TimeTicket(314320405);
        answer[6] = new TimeTicket(677511149);
        answer[7] = new TimeTicket(732322964);
        answer[8] = new TimeTicket(864998723);
        answer[9] = new TimeTicket(898786693);
        answer[10] = new TimeTicket(913424162);
        answer[11] = new TimeTicket(961188545);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00209() {
        int[] output = new int[20];
        output[0] = 187972594;
        output[1] = -528911053;
        output[2] = 77509067;
        output[3] = -502984646;
        output[4] = 728323765;
        output[5] = -522631890;
        output[6] = 768844836;
        output[7] = -635443925;
        output[8] = -823585789;
        output[9] = -67010970;
        output[10] = 664574852;
        output[11] = 495678530;
        output[12] = 1277291;
        output[13] = 378217859;
        output[14] = -308040711;
        output[15] = 988901732;
        output[16] = -420329370;
        output[17] = 641916129;
        output[18] = -986958416;
        output[19] = -371706179;
        Sorting.radixSort(output);
        int[] answer = new int[20];
        answer[0] = -986958416;
        answer[1] = -823585789;
        answer[2] = -635443925;
        answer[3] = -528911053;
        answer[4] = -522631890;
        answer[5] = -502984646;
        answer[6] = -420329370;
        answer[7] = -371706179;
        answer[8] = -308040711;
        answer[9] = -67010970;
        answer[10] = 1277291;
        answer[11] = 77509067;
        answer[12] = 187972594;
        answer[13] = 378217859;
        answer[14] = 495678530;
        answer[15] = 641916129;
        answer[16] = 664574852;
        answer[17] = 728323765;
        answer[18] = 768844836;
        answer[19] = 988901732;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00210() {
        TimeTicket[] output = new TimeTicket[16];
        output[0] = new TimeTicket(-311771018);
        output[1] = new TimeTicket(-246666992);
        output[2] = new TimeTicket(150209598);
        output[3] = new TimeTicket(906153080);
        output[4] = new TimeTicket(851812883);
        output[5] = new TimeTicket(470682477);
        output[6] = new TimeTicket(183594733);
        output[7] = new TimeTicket(-200908202);
        output[8] = new TimeTicket(-97150358);
        output[9] = new TimeTicket(755491185);
        output[10] = new TimeTicket(937504632);
        output[11] = new TimeTicket(432914973);
        output[12] = new TimeTicket(-312769775);
        output[13] = new TimeTicket(862291507);
        output[14] = new TimeTicket(-214224944);
        output[15] = new TimeTicket(-949230495);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[16];
        answer[0] = new TimeTicket(-949230495);
        answer[1] = new TimeTicket(-312769775);
        answer[2] = new TimeTicket(-311771018);
        answer[3] = new TimeTicket(-246666992);
        answer[4] = new TimeTicket(-214224944);
        answer[5] = new TimeTicket(-200908202);
        answer[6] = new TimeTicket(-97150358);
        answer[7] = new TimeTicket(150209598);
        answer[8] = new TimeTicket(183594733);
        answer[9] = new TimeTicket(432914973);
        answer[10] = new TimeTicket(470682477);
        answer[11] = new TimeTicket(755491185);
        answer[12] = new TimeTicket(851812883);
        answer[13] = new TimeTicket(862291507);
        answer[14] = new TimeTicket(906153080);
        answer[15] = new TimeTicket(937504632);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00211() {
        TimeTicket[] output = new TimeTicket[13];
        output[0] = new TimeTicket(25395877);
        output[1] = new TimeTicket(-49122874);
        output[2] = new TimeTicket(722331232);
        output[3] = new TimeTicket(211198524);
        output[4] = new TimeTicket(-823702498);
        output[5] = new TimeTicket(756828578);
        output[6] = new TimeTicket(637424707);
        output[7] = new TimeTicket(-142991951);
        output[8] = new TimeTicket(-54746731);
        output[9] = new TimeTicket(-408325539);
        output[10] = new TimeTicket(520606225);
        output[11] = new TimeTicket(708806048);
        output[12] = new TimeTicket(-667346939);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[13];
        answer[0] = new TimeTicket(-823702498);
        answer[1] = new TimeTicket(-667346939);
        answer[2] = new TimeTicket(-408325539);
        answer[3] = new TimeTicket(-142991951);
        answer[4] = new TimeTicket(-54746731);
        answer[5] = new TimeTicket(-49122874);
        answer[6] = new TimeTicket(25395877);
        answer[7] = new TimeTicket(211198524);
        answer[8] = new TimeTicket(520606225);
        answer[9] = new TimeTicket(637424707);
        answer[10] = new TimeTicket(708806048);
        answer[11] = new TimeTicket(722331232);
        answer[12] = new TimeTicket(756828578);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00212() {
        TimeTicket[] output = new TimeTicket[16];
        output[0] = new TimeTicket(115958560);
        output[1] = new TimeTicket(70878436);
        output[2] = new TimeTicket(807436504);
        output[3] = new TimeTicket(30181743);
        output[4] = new TimeTicket(6137455);
        output[5] = new TimeTicket(-548742666);
        output[6] = new TimeTicket(-171289622);
        output[7] = new TimeTicket(-328404516);
        output[8] = new TimeTicket(-397726343);
        output[9] = new TimeTicket(-261982750);
        output[10] = new TimeTicket(-309600657);
        output[11] = new TimeTicket(659183062);
        output[12] = new TimeTicket(-214932748);
        output[13] = new TimeTicket(-582939886);
        output[14] = new TimeTicket(-482903533);
        output[15] = new TimeTicket(-325728603);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[16];
        answer[0] = new TimeTicket(-582939886);
        answer[1] = new TimeTicket(-548742666);
        answer[2] = new TimeTicket(-482903533);
        answer[3] = new TimeTicket(-397726343);
        answer[4] = new TimeTicket(-328404516);
        answer[5] = new TimeTicket(-325728603);
        answer[6] = new TimeTicket(-309600657);
        answer[7] = new TimeTicket(-261982750);
        answer[8] = new TimeTicket(-214932748);
        answer[9] = new TimeTicket(-171289622);
        answer[10] = new TimeTicket(6137455);
        answer[11] = new TimeTicket(30181743);
        answer[12] = new TimeTicket(70878436);
        answer[13] = new TimeTicket(115958560);
        answer[14] = new TimeTicket(659183062);
        answer[15] = new TimeTicket(807436504);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00213() {
        TimeTicket[] output = new TimeTicket[12];
        output[0] = new TimeTicket(-457384583);
        output[1] = new TimeTicket(-813046835);
        output[2] = new TimeTicket(-714471761);
        output[3] = new TimeTicket(-284955844);
        output[4] = new TimeTicket(-941089889);
        output[5] = new TimeTicket(951244707);
        output[6] = new TimeTicket(-592733315);
        output[7] = new TimeTicket(-766722236);
        output[8] = new TimeTicket(-93679055);
        output[9] = new TimeTicket(481853950);
        output[10] = new TimeTicket(6209420);
        output[11] = new TimeTicket(414728777);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[12];
        answer[0] = new TimeTicket(-941089889);
        answer[1] = new TimeTicket(-813046835);
        answer[2] = new TimeTicket(-766722236);
        answer[3] = new TimeTicket(-714471761);
        answer[4] = new TimeTicket(-592733315);
        answer[5] = new TimeTicket(-457384583);
        answer[6] = new TimeTicket(-284955844);
        answer[7] = new TimeTicket(-93679055);
        answer[8] = new TimeTicket(6209420);
        answer[9] = new TimeTicket(414728777);
        answer[10] = new TimeTicket(481853950);
        answer[11] = new TimeTicket(951244707);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00214() {
        TimeTicket[] output = new TimeTicket[16];
        output[0] = new TimeTicket(-780976050);
        output[1] = new TimeTicket(450513736);
        output[2] = new TimeTicket(-776432004);
        output[3] = new TimeTicket(-965779240);
        output[4] = new TimeTicket(137842905);
        output[5] = new TimeTicket(792995495);
        output[6] = new TimeTicket(208950588);
        output[7] = new TimeTicket(-686980570);
        output[8] = new TimeTicket(-449834042);
        output[9] = new TimeTicket(-127445397);
        output[10] = new TimeTicket(353790258);
        output[11] = new TimeTicket(-315865570);
        output[12] = new TimeTicket(919940004);
        output[13] = new TimeTicket(752855165);
        output[14] = new TimeTicket(-421461844);
        output[15] = new TimeTicket(-603096930);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[16];
        answer[0] = new TimeTicket(-965779240);
        answer[1] = new TimeTicket(-780976050);
        answer[2] = new TimeTicket(-776432004);
        answer[3] = new TimeTicket(-686980570);
        answer[4] = new TimeTicket(-603096930);
        answer[5] = new TimeTicket(-449834042);
        answer[6] = new TimeTicket(-421461844);
        answer[7] = new TimeTicket(-315865570);
        answer[8] = new TimeTicket(-127445397);
        answer[9] = new TimeTicket(137842905);
        answer[10] = new TimeTicket(208950588);
        answer[11] = new TimeTicket(353790258);
        answer[12] = new TimeTicket(450513736);
        answer[13] = new TimeTicket(752855165);
        answer[14] = new TimeTicket(792995495);
        answer[15] = new TimeTicket(919940004);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00215() {
        int[] output = new int[3];
        output[0] = -649653806;
        output[1] = 503302166;
        output[2] = 774832807;
        Sorting.radixSort(output);
        int[] answer = new int[3];
        answer[0] = -649653806;
        answer[1] = 503302166;
        answer[2] = 774832807;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00216() {
        TimeTicket[] output = new TimeTicket[7];
        output[0] = new TimeTicket(94978153);
        output[1] = new TimeTicket(974690673);
        output[2] = new TimeTicket(537287792);
        output[3] = new TimeTicket(623509599);
        output[4] = new TimeTicket(-463851084);
        output[5] = new TimeTicket(632809665);
        output[6] = new TimeTicket(-702705948);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[7];
        answer[0] = new TimeTicket(-702705948);
        answer[1] = new TimeTicket(-463851084);
        answer[2] = new TimeTicket(94978153);
        answer[3] = new TimeTicket(537287792);
        answer[4] = new TimeTicket(623509599);
        answer[5] = new TimeTicket(632809665);
        answer[6] = new TimeTicket(974690673);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00217() {
        TimeTicket[] output = new TimeTicket[15];
        output[0] = new TimeTicket(949057832);
        output[1] = new TimeTicket(-88537872);
        output[2] = new TimeTicket(824894603);
        output[3] = new TimeTicket(445302594);
        output[4] = new TimeTicket(-885494724);
        output[5] = new TimeTicket(-874892277);
        output[6] = new TimeTicket(104788055);
        output[7] = new TimeTicket(568775940);
        output[8] = new TimeTicket(207554797);
        output[9] = new TimeTicket(-966845647);
        output[10] = new TimeTicket(54534781);
        output[11] = new TimeTicket(8484021);
        output[12] = new TimeTicket(-73884450);
        output[13] = new TimeTicket(589141955);
        output[14] = new TimeTicket(423869232);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[15];
        answer[0] = new TimeTicket(-966845647);
        answer[1] = new TimeTicket(-885494724);
        answer[2] = new TimeTicket(-874892277);
        answer[3] = new TimeTicket(-88537872);
        answer[4] = new TimeTicket(-73884450);
        answer[5] = new TimeTicket(8484021);
        answer[6] = new TimeTicket(54534781);
        answer[7] = new TimeTicket(104788055);
        answer[8] = new TimeTicket(207554797);
        answer[9] = new TimeTicket(423869232);
        answer[10] = new TimeTicket(445302594);
        answer[11] = new TimeTicket(568775940);
        answer[12] = new TimeTicket(589141955);
        answer[13] = new TimeTicket(824894603);
        answer[14] = new TimeTicket(949057832);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00218() {
        TimeTicket[] output = new TimeTicket[6];
        output[0] = new TimeTicket(737216593);
        output[1] = new TimeTicket(-362553341);
        output[2] = new TimeTicket(200561701);
        output[3] = new TimeTicket(458006739);
        output[4] = new TimeTicket(-172291304);
        output[5] = new TimeTicket(-402928261);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[6];
        answer[0] = new TimeTicket(-402928261);
        answer[1] = new TimeTicket(-362553341);
        answer[2] = new TimeTicket(-172291304);
        answer[3] = new TimeTicket(200561701);
        answer[4] = new TimeTicket(458006739);
        answer[5] = new TimeTicket(737216593);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00219() {
        TimeTicket[] output = new TimeTicket[26];
        output[0] = new TimeTicket(-18743567);
        output[1] = new TimeTicket(-48529258);
        output[2] = new TimeTicket(860529549);
        output[3] = new TimeTicket(-89410710);
        output[4] = new TimeTicket(-371249065);
        output[5] = new TimeTicket(-847520025);
        output[6] = new TimeTicket(-371613266);
        output[7] = new TimeTicket(424051409);
        output[8] = new TimeTicket(-856530593);
        output[9] = new TimeTicket(460663724);
        output[10] = new TimeTicket(22030951);
        output[11] = new TimeTicket(521270369);
        output[12] = new TimeTicket(-86623148);
        output[13] = new TimeTicket(930041617);
        output[14] = new TimeTicket(-389282434);
        output[15] = new TimeTicket(-711564616);
        output[16] = new TimeTicket(-523814539);
        output[17] = new TimeTicket(-984693);
        output[18] = new TimeTicket(-728469529);
        output[19] = new TimeTicket(-233416031);
        output[20] = new TimeTicket(-241380767);
        output[21] = new TimeTicket(718649423);
        output[22] = new TimeTicket(184944242);
        output[23] = new TimeTicket(429495490);
        output[24] = new TimeTicket(-965444932);
        output[25] = new TimeTicket(155640555);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[26];
        answer[0] = new TimeTicket(-965444932);
        answer[1] = new TimeTicket(-856530593);
        answer[2] = new TimeTicket(-847520025);
        answer[3] = new TimeTicket(-728469529);
        answer[4] = new TimeTicket(-711564616);
        answer[5] = new TimeTicket(-523814539);
        answer[6] = new TimeTicket(-389282434);
        answer[7] = new TimeTicket(-371613266);
        answer[8] = new TimeTicket(-371249065);
        answer[9] = new TimeTicket(-241380767);
        answer[10] = new TimeTicket(-233416031);
        answer[11] = new TimeTicket(-89410710);
        answer[12] = new TimeTicket(-86623148);
        answer[13] = new TimeTicket(-48529258);
        answer[14] = new TimeTicket(-18743567);
        answer[15] = new TimeTicket(-984693);
        answer[16] = new TimeTicket(22030951);
        answer[17] = new TimeTicket(155640555);
        answer[18] = new TimeTicket(184944242);
        answer[19] = new TimeTicket(424051409);
        answer[20] = new TimeTicket(429495490);
        answer[21] = new TimeTicket(460663724);
        answer[22] = new TimeTicket(521270369);
        answer[23] = new TimeTicket(718649423);
        answer[24] = new TimeTicket(860529549);
        answer[25] = new TimeTicket(930041617);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00220() {
        TimeTicket[] output = new TimeTicket[8];
        output[0] = new TimeTicket(519105858);
        output[1] = new TimeTicket(109490514);
        output[2] = new TimeTicket(380930570);
        output[3] = new TimeTicket(-318373622);
        output[4] = new TimeTicket(395512228);
        output[5] = new TimeTicket(-405948231);
        output[6] = new TimeTicket(180122479);
        output[7] = new TimeTicket(-343659371);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[8];
        answer[0] = new TimeTicket(-405948231);
        answer[1] = new TimeTicket(-343659371);
        answer[2] = new TimeTicket(-318373622);
        answer[3] = new TimeTicket(109490514);
        answer[4] = new TimeTicket(180122479);
        answer[5] = new TimeTicket(380930570);
        answer[6] = new TimeTicket(395512228);
        answer[7] = new TimeTicket(519105858);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00221() {
        int[] output = new int[23];
        output[0] = 29008446;
        output[1] = -237603953;
        output[2] = -927053291;
        output[3] = 835334726;
        output[4] = -466471720;
        output[5] = -601592554;
        output[6] = 968293955;
        output[7] = 550324444;
        output[8] = -268172936;
        output[9] = 806675586;
        output[10] = -19407744;
        output[11] = -850647823;
        output[12] = 578501640;
        output[13] = -349597938;
        output[14] = -82185229;
        output[15] = 824345624;
        output[16] = -99768176;
        output[17] = -425455429;
        output[18] = 180736319;
        output[19] = 370948646;
        output[20] = 186932710;
        output[21] = -747698349;
        output[22] = -55313112;
        Sorting.radixSort(output);
        int[] answer = new int[23];
        answer[0] = -927053291;
        answer[1] = -850647823;
        answer[2] = -747698349;
        answer[3] = -601592554;
        answer[4] = -466471720;
        answer[5] = -425455429;
        answer[6] = -349597938;
        answer[7] = -268172936;
        answer[8] = -237603953;
        answer[9] = -99768176;
        answer[10] = -82185229;
        answer[11] = -55313112;
        answer[12] = -19407744;
        answer[13] = 29008446;
        answer[14] = 180736319;
        answer[15] = 186932710;
        answer[16] = 370948646;
        answer[17] = 550324444;
        answer[18] = 578501640;
        answer[19] = 806675586;
        answer[20] = 824345624;
        answer[21] = 835334726;
        answer[22] = 968293955;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00222() {
        TimeTicket[] output = new TimeTicket[11];
        output[0] = new TimeTicket(-748846169);
        output[1] = new TimeTicket(874559749);
        output[2] = new TimeTicket(-269871880);
        output[3] = new TimeTicket(-380615670);
        output[4] = new TimeTicket(782605909);
        output[5] = new TimeTicket(553260591);
        output[6] = new TimeTicket(-873856081);
        output[7] = new TimeTicket(-107794057);
        output[8] = new TimeTicket(-788335016);
        output[9] = new TimeTicket(995603080);
        output[10] = new TimeTicket(-25176651);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[11];
        answer[0] = new TimeTicket(-873856081);
        answer[1] = new TimeTicket(-788335016);
        answer[2] = new TimeTicket(-748846169);
        answer[3] = new TimeTicket(-380615670);
        answer[4] = new TimeTicket(-269871880);
        answer[5] = new TimeTicket(-107794057);
        answer[6] = new TimeTicket(-25176651);
        answer[7] = new TimeTicket(553260591);
        answer[8] = new TimeTicket(782605909);
        answer[9] = new TimeTicket(874559749);
        answer[10] = new TimeTicket(995603080);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00223() {
        TimeTicket[] output = new TimeTicket[30];
        output[0] = new TimeTicket(-53656206);
        output[1] = new TimeTicket(719190212);
        output[2] = new TimeTicket(-898077169);
        output[3] = new TimeTicket(149553897);
        output[4] = new TimeTicket(67462281);
        output[5] = new TimeTicket(99866464);
        output[6] = new TimeTicket(991587889);
        output[7] = new TimeTicket(743279306);
        output[8] = new TimeTicket(57968906);
        output[9] = new TimeTicket(452384247);
        output[10] = new TimeTicket(825402586);
        output[11] = new TimeTicket(-52459304);
        output[12] = new TimeTicket(59128000);
        output[13] = new TimeTicket(339303126);
        output[14] = new TimeTicket(-819494784);
        output[15] = new TimeTicket(-913513823);
        output[16] = new TimeTicket(536799138);
        output[17] = new TimeTicket(929526489);
        output[18] = new TimeTicket(823652635);
        output[19] = new TimeTicket(731281200);
        output[20] = new TimeTicket(-507204147);
        output[21] = new TimeTicket(-667709150);
        output[22] = new TimeTicket(840650866);
        output[23] = new TimeTicket(-411849113);
        output[24] = new TimeTicket(-107910814);
        output[25] = new TimeTicket(4579047);
        output[26] = new TimeTicket(1108285);
        output[27] = new TimeTicket(767794658);
        output[28] = new TimeTicket(131981725);
        output[29] = new TimeTicket(-390454677);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[30];
        answer[0] = new TimeTicket(-913513823);
        answer[1] = new TimeTicket(-898077169);
        answer[2] = new TimeTicket(-819494784);
        answer[3] = new TimeTicket(-667709150);
        answer[4] = new TimeTicket(-507204147);
        answer[5] = new TimeTicket(-411849113);
        answer[6] = new TimeTicket(-390454677);
        answer[7] = new TimeTicket(-107910814);
        answer[8] = new TimeTicket(-53656206);
        answer[9] = new TimeTicket(-52459304);
        answer[10] = new TimeTicket(1108285);
        answer[11] = new TimeTicket(4579047);
        answer[12] = new TimeTicket(57968906);
        answer[13] = new TimeTicket(59128000);
        answer[14] = new TimeTicket(67462281);
        answer[15] = new TimeTicket(99866464);
        answer[16] = new TimeTicket(131981725);
        answer[17] = new TimeTicket(149553897);
        answer[18] = new TimeTicket(339303126);
        answer[19] = new TimeTicket(452384247);
        answer[20] = new TimeTicket(536799138);
        answer[21] = new TimeTicket(719190212);
        answer[22] = new TimeTicket(731281200);
        answer[23] = new TimeTicket(743279306);
        answer[24] = new TimeTicket(767794658);
        answer[25] = new TimeTicket(823652635);
        answer[26] = new TimeTicket(825402586);
        answer[27] = new TimeTicket(840650866);
        answer[28] = new TimeTicket(929526489);
        answer[29] = new TimeTicket(991587889);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00224() {
        TimeTicket[] output = new TimeTicket[16];
        output[0] = new TimeTicket(36813517);
        output[1] = new TimeTicket(-288384637);
        output[2] = new TimeTicket(920446158);
        output[3] = new TimeTicket(563787545);
        output[4] = new TimeTicket(-707533067);
        output[5] = new TimeTicket(-749118749);
        output[6] = new TimeTicket(-951768984);
        output[7] = new TimeTicket(101588874);
        output[8] = new TimeTicket(-155149882);
        output[9] = new TimeTicket(-663472034);
        output[10] = new TimeTicket(-819364445);
        output[11] = new TimeTicket(-979162227);
        output[12] = new TimeTicket(537776736);
        output[13] = new TimeTicket(-98347014);
        output[14] = new TimeTicket(793602494);
        output[15] = new TimeTicket(-865790918);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[16];
        answer[0] = new TimeTicket(-979162227);
        answer[1] = new TimeTicket(-951768984);
        answer[2] = new TimeTicket(-865790918);
        answer[3] = new TimeTicket(-819364445);
        answer[4] = new TimeTicket(-749118749);
        answer[5] = new TimeTicket(-707533067);
        answer[6] = new TimeTicket(-663472034);
        answer[7] = new TimeTicket(-288384637);
        answer[8] = new TimeTicket(-155149882);
        answer[9] = new TimeTicket(-98347014);
        answer[10] = new TimeTicket(36813517);
        answer[11] = new TimeTicket(101588874);
        answer[12] = new TimeTicket(537776736);
        answer[13] = new TimeTicket(563787545);
        answer[14] = new TimeTicket(793602494);
        answer[15] = new TimeTicket(920446158);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00225() {
        TimeTicket[] output = new TimeTicket[23];
        output[0] = new TimeTicket(-597635105);
        output[1] = new TimeTicket(86441756);
        output[2] = new TimeTicket(446939593);
        output[3] = new TimeTicket(-374374906);
        output[4] = new TimeTicket(461090549);
        output[5] = new TimeTicket(38344691);
        output[6] = new TimeTicket(273816315);
        output[7] = new TimeTicket(929028211);
        output[8] = new TimeTicket(142206734);
        output[9] = new TimeTicket(150527421);
        output[10] = new TimeTicket(335869525);
        output[11] = new TimeTicket(908806227);
        output[12] = new TimeTicket(-40788603);
        output[13] = new TimeTicket(-946483901);
        output[14] = new TimeTicket(-134216007);
        output[15] = new TimeTicket(-105651099);
        output[16] = new TimeTicket(-351515515);
        output[17] = new TimeTicket(-732519504);
        output[18] = new TimeTicket(704136731);
        output[19] = new TimeTicket(-313746583);
        output[20] = new TimeTicket(-213964610);
        output[21] = new TimeTicket(-467765197);
        output[22] = new TimeTicket(131506264);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[23];
        answer[0] = new TimeTicket(-946483901);
        answer[1] = new TimeTicket(-732519504);
        answer[2] = new TimeTicket(-597635105);
        answer[3] = new TimeTicket(-467765197);
        answer[4] = new TimeTicket(-374374906);
        answer[5] = new TimeTicket(-351515515);
        answer[6] = new TimeTicket(-313746583);
        answer[7] = new TimeTicket(-213964610);
        answer[8] = new TimeTicket(-134216007);
        answer[9] = new TimeTicket(-105651099);
        answer[10] = new TimeTicket(-40788603);
        answer[11] = new TimeTicket(38344691);
        answer[12] = new TimeTicket(86441756);
        answer[13] = new TimeTicket(131506264);
        answer[14] = new TimeTicket(142206734);
        answer[15] = new TimeTicket(150527421);
        answer[16] = new TimeTicket(273816315);
        answer[17] = new TimeTicket(335869525);
        answer[18] = new TimeTicket(446939593);
        answer[19] = new TimeTicket(461090549);
        answer[20] = new TimeTicket(704136731);
        answer[21] = new TimeTicket(908806227);
        answer[22] = new TimeTicket(929028211);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00226() {
        TimeTicket[] output = new TimeTicket[10];
        output[0] = new TimeTicket(376707987);
        output[1] = new TimeTicket(-828595018);
        output[2] = new TimeTicket(6108397);
        output[3] = new TimeTicket(-680350386);
        output[4] = new TimeTicket(-11739866);
        output[5] = new TimeTicket(629362270);
        output[6] = new TimeTicket(-11251990);
        output[7] = new TimeTicket(350343724);
        output[8] = new TimeTicket(-169948890);
        output[9] = new TimeTicket(496396227);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[10];
        answer[0] = new TimeTicket(-828595018);
        answer[1] = new TimeTicket(-680350386);
        answer[2] = new TimeTicket(-169948890);
        answer[3] = new TimeTicket(-11739866);
        answer[4] = new TimeTicket(-11251990);
        answer[5] = new TimeTicket(6108397);
        answer[6] = new TimeTicket(350343724);
        answer[7] = new TimeTicket(376707987);
        answer[8] = new TimeTicket(496396227);
        answer[9] = new TimeTicket(629362270);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00227() {
        int[] output = new int[17];
        output[0] = -83180314;
        output[1] = 118010148;
        output[2] = -125007945;
        output[3] = 872509237;
        output[4] = -671363232;
        output[5] = 241089570;
        output[6] = -987181058;
        output[7] = 20007995;
        output[8] = -875055626;
        output[9] = -173113867;
        output[10] = -655533342;
        output[11] = -848506123;
        output[12] = 693332945;
        output[13] = -376354615;
        output[14] = 319785244;
        output[15] = -760397499;
        output[16] = -582444180;
        Sorting.radixSort(output);
        int[] answer = new int[17];
        answer[0] = -987181058;
        answer[1] = -875055626;
        answer[2] = -848506123;
        answer[3] = -760397499;
        answer[4] = -671363232;
        answer[5] = -655533342;
        answer[6] = -582444180;
        answer[7] = -376354615;
        answer[8] = -173113867;
        answer[9] = -125007945;
        answer[10] = -83180314;
        answer[11] = 20007995;
        answer[12] = 118010148;
        answer[13] = 241089570;
        answer[14] = 319785244;
        answer[15] = 693332945;
        answer[16] = 872509237;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00228() {
        TimeTicket[] output = new TimeTicket[18];
        output[0] = new TimeTicket(621743606);
        output[1] = new TimeTicket(557776528);
        output[2] = new TimeTicket(963790206);
        output[3] = new TimeTicket(159886154);
        output[4] = new TimeTicket(-111406409);
        output[5] = new TimeTicket(-341818497);
        output[6] = new TimeTicket(-397215214);
        output[7] = new TimeTicket(431028216);
        output[8] = new TimeTicket(-650904742);
        output[9] = new TimeTicket(117205968);
        output[10] = new TimeTicket(691999621);
        output[11] = new TimeTicket(471918740);
        output[12] = new TimeTicket(829092315);
        output[13] = new TimeTicket(-604725492);
        output[14] = new TimeTicket(-399016817);
        output[15] = new TimeTicket(467317114);
        output[16] = new TimeTicket(-460662777);
        output[17] = new TimeTicket(953426023);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[18];
        answer[0] = new TimeTicket(-650904742);
        answer[1] = new TimeTicket(-604725492);
        answer[2] = new TimeTicket(-460662777);
        answer[3] = new TimeTicket(-399016817);
        answer[4] = new TimeTicket(-397215214);
        answer[5] = new TimeTicket(-341818497);
        answer[6] = new TimeTicket(-111406409);
        answer[7] = new TimeTicket(117205968);
        answer[8] = new TimeTicket(159886154);
        answer[9] = new TimeTicket(431028216);
        answer[10] = new TimeTicket(467317114);
        answer[11] = new TimeTicket(471918740);
        answer[12] = new TimeTicket(557776528);
        answer[13] = new TimeTicket(621743606);
        answer[14] = new TimeTicket(691999621);
        answer[15] = new TimeTicket(829092315);
        answer[16] = new TimeTicket(953426023);
        answer[17] = new TimeTicket(963790206);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00229() {
        TimeTicket[] output = new TimeTicket[2];
        output[0] = new TimeTicket(58875626);
        output[1] = new TimeTicket(-637994295);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[2];
        answer[0] = new TimeTicket(-637994295);
        answer[1] = new TimeTicket(58875626);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00230() {
        TimeTicket[] output = new TimeTicket[14];
        output[0] = new TimeTicket(58199606);
        output[1] = new TimeTicket(-953576685);
        output[2] = new TimeTicket(82614116);
        output[3] = new TimeTicket(-803965146);
        output[4] = new TimeTicket(105307695);
        output[5] = new TimeTicket(590032228);
        output[6] = new TimeTicket(438740274);
        output[7] = new TimeTicket(-453734751);
        output[8] = new TimeTicket(181610544);
        output[9] = new TimeTicket(868449717);
        output[10] = new TimeTicket(906404295);
        output[11] = new TimeTicket(-581822467);
        output[12] = new TimeTicket(861528203);
        output[13] = new TimeTicket(-527371989);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[14];
        answer[0] = new TimeTicket(-953576685);
        answer[1] = new TimeTicket(-803965146);
        answer[2] = new TimeTicket(-581822467);
        answer[3] = new TimeTicket(-527371989);
        answer[4] = new TimeTicket(-453734751);
        answer[5] = new TimeTicket(58199606);
        answer[6] = new TimeTicket(82614116);
        answer[7] = new TimeTicket(105307695);
        answer[8] = new TimeTicket(181610544);
        answer[9] = new TimeTicket(438740274);
        answer[10] = new TimeTicket(590032228);
        answer[11] = new TimeTicket(861528203);
        answer[12] = new TimeTicket(868449717);
        answer[13] = new TimeTicket(906404295);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00231() {
        TimeTicket[] output = new TimeTicket[14];
        output[0] = new TimeTicket(-428034790);
        output[1] = new TimeTicket(434714271);
        output[2] = new TimeTicket(771191252);
        output[3] = new TimeTicket(-431524135);
        output[4] = new TimeTicket(-840652469);
        output[5] = new TimeTicket(-793176579);
        output[6] = new TimeTicket(736505447);
        output[7] = new TimeTicket(-281919308);
        output[8] = new TimeTicket(756640682);
        output[9] = new TimeTicket(-566410691);
        output[10] = new TimeTicket(327034600);
        output[11] = new TimeTicket(-157735588);
        output[12] = new TimeTicket(766612482);
        output[13] = new TimeTicket(526612048);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[14];
        answer[0] = new TimeTicket(-840652469);
        answer[1] = new TimeTicket(-793176579);
        answer[2] = new TimeTicket(-566410691);
        answer[3] = new TimeTicket(-431524135);
        answer[4] = new TimeTicket(-428034790);
        answer[5] = new TimeTicket(-281919308);
        answer[6] = new TimeTicket(-157735588);
        answer[7] = new TimeTicket(327034600);
        answer[8] = new TimeTicket(434714271);
        answer[9] = new TimeTicket(526612048);
        answer[10] = new TimeTicket(736505447);
        answer[11] = new TimeTicket(756640682);
        answer[12] = new TimeTicket(766612482);
        answer[13] = new TimeTicket(771191252);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00232() {
        TimeTicket[] output = new TimeTicket[15];
        output[0] = new TimeTicket(431271202);
        output[1] = new TimeTicket(1985678);
        output[2] = new TimeTicket(-486240245);
        output[3] = new TimeTicket(-23614167);
        output[4] = new TimeTicket(943152462);
        output[5] = new TimeTicket(574667402);
        output[6] = new TimeTicket(258183349);
        output[7] = new TimeTicket(423470599);
        output[8] = new TimeTicket(170269573);
        output[9] = new TimeTicket(-44026376);
        output[10] = new TimeTicket(-255549220);
        output[11] = new TimeTicket(-344695567);
        output[12] = new TimeTicket(586859);
        output[13] = new TimeTicket(-596953537);
        output[14] = new TimeTicket(-892405004);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[15];
        answer[0] = new TimeTicket(-892405004);
        answer[1] = new TimeTicket(-596953537);
        answer[2] = new TimeTicket(-486240245);
        answer[3] = new TimeTicket(-344695567);
        answer[4] = new TimeTicket(-255549220);
        answer[5] = new TimeTicket(-44026376);
        answer[6] = new TimeTicket(-23614167);
        answer[7] = new TimeTicket(586859);
        answer[8] = new TimeTicket(1985678);
        answer[9] = new TimeTicket(170269573);
        answer[10] = new TimeTicket(258183349);
        answer[11] = new TimeTicket(423470599);
        answer[12] = new TimeTicket(431271202);
        answer[13] = new TimeTicket(574667402);
        answer[14] = new TimeTicket(943152462);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00233() {
        int[] output = new int[1];
        output[0] = -655523368;
        Sorting.radixSort(output);
        int[] answer = new int[1];
        answer[0] = -655523368;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00234() {
        TimeTicket[] output = new TimeTicket[19];
        output[0] = new TimeTicket(887738115);
        output[1] = new TimeTicket(516791923);
        output[2] = new TimeTicket(-34385925);
        output[3] = new TimeTicket(419321433);
        output[4] = new TimeTicket(63751370);
        output[5] = new TimeTicket(-46316500);
        output[6] = new TimeTicket(-231282274);
        output[7] = new TimeTicket(629256600);
        output[8] = new TimeTicket(-34346977);
        output[9] = new TimeTicket(132046962);
        output[10] = new TimeTicket(978545947);
        output[11] = new TimeTicket(-998236260);
        output[12] = new TimeTicket(-470396257);
        output[13] = new TimeTicket(-729651856);
        output[14] = new TimeTicket(542875367);
        output[15] = new TimeTicket(27036008);
        output[16] = new TimeTicket(487220360);
        output[17] = new TimeTicket(365549268);
        output[18] = new TimeTicket(-672677222);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[19];
        answer[0] = new TimeTicket(-998236260);
        answer[1] = new TimeTicket(-729651856);
        answer[2] = new TimeTicket(-672677222);
        answer[3] = new TimeTicket(-470396257);
        answer[4] = new TimeTicket(-231282274);
        answer[5] = new TimeTicket(-46316500);
        answer[6] = new TimeTicket(-34385925);
        answer[7] = new TimeTicket(-34346977);
        answer[8] = new TimeTicket(27036008);
        answer[9] = new TimeTicket(63751370);
        answer[10] = new TimeTicket(132046962);
        answer[11] = new TimeTicket(365549268);
        answer[12] = new TimeTicket(419321433);
        answer[13] = new TimeTicket(487220360);
        answer[14] = new TimeTicket(516791923);
        answer[15] = new TimeTicket(542875367);
        answer[16] = new TimeTicket(629256600);
        answer[17] = new TimeTicket(887738115);
        answer[18] = new TimeTicket(978545947);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00235() {
        TimeTicket[] output = new TimeTicket[28];
        output[0] = new TimeTicket(-134367823);
        output[1] = new TimeTicket(504728365);
        output[2] = new TimeTicket(600340641);
        output[3] = new TimeTicket(-413942213);
        output[4] = new TimeTicket(-251486216);
        output[5] = new TimeTicket(290926604);
        output[6] = new TimeTicket(-312091786);
        output[7] = new TimeTicket(-489820353);
        output[8] = new TimeTicket(-763352302);
        output[9] = new TimeTicket(-121502931);
        output[10] = new TimeTicket(-18243761);
        output[11] = new TimeTicket(-549079449);
        output[12] = new TimeTicket(-507511489);
        output[13] = new TimeTicket(546842875);
        output[14] = new TimeTicket(821447245);
        output[15] = new TimeTicket(468014614);
        output[16] = new TimeTicket(617195321);
        output[17] = new TimeTicket(-808852900);
        output[18] = new TimeTicket(-857244613);
        output[19] = new TimeTicket(626344817);
        output[20] = new TimeTicket(-810578316);
        output[21] = new TimeTicket(32848182);
        output[22] = new TimeTicket(54707927);
        output[23] = new TimeTicket(-835334114);
        output[24] = new TimeTicket(-845241903);
        output[25] = new TimeTicket(94587261);
        output[26] = new TimeTicket(518889200);
        output[27] = new TimeTicket(416001361);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[28];
        answer[0] = new TimeTicket(-857244613);
        answer[1] = new TimeTicket(-845241903);
        answer[2] = new TimeTicket(-835334114);
        answer[3] = new TimeTicket(-810578316);
        answer[4] = new TimeTicket(-808852900);
        answer[5] = new TimeTicket(-763352302);
        answer[6] = new TimeTicket(-549079449);
        answer[7] = new TimeTicket(-507511489);
        answer[8] = new TimeTicket(-489820353);
        answer[9] = new TimeTicket(-413942213);
        answer[10] = new TimeTicket(-312091786);
        answer[11] = new TimeTicket(-251486216);
        answer[12] = new TimeTicket(-134367823);
        answer[13] = new TimeTicket(-121502931);
        answer[14] = new TimeTicket(-18243761);
        answer[15] = new TimeTicket(32848182);
        answer[16] = new TimeTicket(54707927);
        answer[17] = new TimeTicket(94587261);
        answer[18] = new TimeTicket(290926604);
        answer[19] = new TimeTicket(416001361);
        answer[20] = new TimeTicket(468014614);
        answer[21] = new TimeTicket(504728365);
        answer[22] = new TimeTicket(518889200);
        answer[23] = new TimeTicket(546842875);
        answer[24] = new TimeTicket(600340641);
        answer[25] = new TimeTicket(617195321);
        answer[26] = new TimeTicket(626344817);
        answer[27] = new TimeTicket(821447245);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00236() {
        TimeTicket[] output = new TimeTicket[1];
        output[0] = new TimeTicket(303545245);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[1];
        answer[0] = new TimeTicket(303545245);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00237() {
        TimeTicket[] output = new TimeTicket[10];
        output[0] = new TimeTicket(-812537457);
        output[1] = new TimeTicket(-43850097);
        output[2] = new TimeTicket(651937385);
        output[3] = new TimeTicket(661950582);
        output[4] = new TimeTicket(-201576877);
        output[5] = new TimeTicket(-470067065);
        output[6] = new TimeTicket(326881795);
        output[7] = new TimeTicket(641169679);
        output[8] = new TimeTicket(-859259544);
        output[9] = new TimeTicket(-843970403);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[10];
        answer[0] = new TimeTicket(-859259544);
        answer[1] = new TimeTicket(-843970403);
        answer[2] = new TimeTicket(-812537457);
        answer[3] = new TimeTicket(-470067065);
        answer[4] = new TimeTicket(-201576877);
        answer[5] = new TimeTicket(-43850097);
        answer[6] = new TimeTicket(326881795);
        answer[7] = new TimeTicket(641169679);
        answer[8] = new TimeTicket(651937385);
        answer[9] = new TimeTicket(661950582);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00238() {
        TimeTicket[] output = new TimeTicket[22];
        output[0] = new TimeTicket(-24178469);
        output[1] = new TimeTicket(22447791);
        output[2] = new TimeTicket(975698519);
        output[3] = new TimeTicket(487455820);
        output[4] = new TimeTicket(816716760);
        output[5] = new TimeTicket(-321807188);
        output[6] = new TimeTicket(542090977);
        output[7] = new TimeTicket(-494166581);
        output[8] = new TimeTicket(83775056);
        output[9] = new TimeTicket(-219362449);
        output[10] = new TimeTicket(44309168);
        output[11] = new TimeTicket(206910486);
        output[12] = new TimeTicket(-443254105);
        output[13] = new TimeTicket(-503764701);
        output[14] = new TimeTicket(-411561895);
        output[15] = new TimeTicket(64027192);
        output[16] = new TimeTicket(772802207);
        output[17] = new TimeTicket(106546819);
        output[18] = new TimeTicket(-410776608);
        output[19] = new TimeTicket(939035430);
        output[20] = new TimeTicket(-966941049);
        output[21] = new TimeTicket(825990159);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[22];
        answer[0] = new TimeTicket(-966941049);
        answer[1] = new TimeTicket(-503764701);
        answer[2] = new TimeTicket(-494166581);
        answer[3] = new TimeTicket(-443254105);
        answer[4] = new TimeTicket(-411561895);
        answer[5] = new TimeTicket(-410776608);
        answer[6] = new TimeTicket(-321807188);
        answer[7] = new TimeTicket(-219362449);
        answer[8] = new TimeTicket(-24178469);
        answer[9] = new TimeTicket(22447791);
        answer[10] = new TimeTicket(44309168);
        answer[11] = new TimeTicket(64027192);
        answer[12] = new TimeTicket(83775056);
        answer[13] = new TimeTicket(106546819);
        answer[14] = new TimeTicket(206910486);
        answer[15] = new TimeTicket(487455820);
        answer[16] = new TimeTicket(542090977);
        answer[17] = new TimeTicket(772802207);
        answer[18] = new TimeTicket(816716760);
        answer[19] = new TimeTicket(825990159);
        answer[20] = new TimeTicket(939035430);
        answer[21] = new TimeTicket(975698519);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00239() {
        int[] output = new int[10];
        output[0] = 893685953;
        output[1] = 185921266;
        output[2] = -518796614;
        output[3] = -218450613;
        output[4] = -971819667;
        output[5] = 11912260;
        output[6] = 20811840;
        output[7] = 168136003;
        output[8] = 182576925;
        output[9] = 890818017;
        Sorting.radixSort(output);
        int[] answer = new int[10];
        answer[0] = -971819667;
        answer[1] = -518796614;
        answer[2] = -218450613;
        answer[3] = 11912260;
        answer[4] = 20811840;
        answer[5] = 168136003;
        answer[6] = 182576925;
        answer[7] = 185921266;
        answer[8] = 890818017;
        answer[9] = 893685953;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00240() {
        TimeTicket[] output = new TimeTicket[11];
        output[0] = new TimeTicket(-34652309);
        output[1] = new TimeTicket(-786507333);
        output[2] = new TimeTicket(21213119);
        output[3] = new TimeTicket(84203390);
        output[4] = new TimeTicket(449028341);
        output[5] = new TimeTicket(1243555);
        output[6] = new TimeTicket(-633090145);
        output[7] = new TimeTicket(-98873050);
        output[8] = new TimeTicket(-960214940);
        output[9] = new TimeTicket(750809857);
        output[10] = new TimeTicket(-945334444);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[11];
        answer[0] = new TimeTicket(-960214940);
        answer[1] = new TimeTicket(-945334444);
        answer[2] = new TimeTicket(-786507333);
        answer[3] = new TimeTicket(-633090145);
        answer[4] = new TimeTicket(-98873050);
        answer[5] = new TimeTicket(-34652309);
        answer[6] = new TimeTicket(1243555);
        answer[7] = new TimeTicket(21213119);
        answer[8] = new TimeTicket(84203390);
        answer[9] = new TimeTicket(449028341);
        answer[10] = new TimeTicket(750809857);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00241() {
        TimeTicket[] output = new TimeTicket[14];
        output[0] = new TimeTicket(720944239);
        output[1] = new TimeTicket(-229688241);
        output[2] = new TimeTicket(-701799272);
        output[3] = new TimeTicket(60219147);
        output[4] = new TimeTicket(474420760);
        output[5] = new TimeTicket(208531125);
        output[6] = new TimeTicket(181832508);
        output[7] = new TimeTicket(-964613777);
        output[8] = new TimeTicket(-679700823);
        output[9] = new TimeTicket(-146787817);
        output[10] = new TimeTicket(130730946);
        output[11] = new TimeTicket(-28008381);
        output[12] = new TimeTicket(-351577513);
        output[13] = new TimeTicket(211312885);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[14];
        answer[0] = new TimeTicket(-964613777);
        answer[1] = new TimeTicket(-701799272);
        answer[2] = new TimeTicket(-679700823);
        answer[3] = new TimeTicket(-351577513);
        answer[4] = new TimeTicket(-229688241);
        answer[5] = new TimeTicket(-146787817);
        answer[6] = new TimeTicket(-28008381);
        answer[7] = new TimeTicket(60219147);
        answer[8] = new TimeTicket(130730946);
        answer[9] = new TimeTicket(181832508);
        answer[10] = new TimeTicket(208531125);
        answer[11] = new TimeTicket(211312885);
        answer[12] = new TimeTicket(474420760);
        answer[13] = new TimeTicket(720944239);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00242() {
        TimeTicket[] output = new TimeTicket[27];
        output[0] = new TimeTicket(-609367691);
        output[1] = new TimeTicket(822947157);
        output[2] = new TimeTicket(-697557837);
        output[3] = new TimeTicket(266454472);
        output[4] = new TimeTicket(906396871);
        output[5] = new TimeTicket(-577097010);
        output[6] = new TimeTicket(-821629246);
        output[7] = new TimeTicket(487298683);
        output[8] = new TimeTicket(150461654);
        output[9] = new TimeTicket(-359751575);
        output[10] = new TimeTicket(980370053);
        output[11] = new TimeTicket(-716011121);
        output[12] = new TimeTicket(-305477336);
        output[13] = new TimeTicket(-226144653);
        output[14] = new TimeTicket(-979303748);
        output[15] = new TimeTicket(-1954396);
        output[16] = new TimeTicket(-458119113);
        output[17] = new TimeTicket(-782688959);
        output[18] = new TimeTicket(-318777377);
        output[19] = new TimeTicket(480663700);
        output[20] = new TimeTicket(15865267);
        output[21] = new TimeTicket(892952157);
        output[22] = new TimeTicket(394681796);
        output[23] = new TimeTicket(308630578);
        output[24] = new TimeTicket(560432885);
        output[25] = new TimeTicket(512732535);
        output[26] = new TimeTicket(208901374);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[27];
        answer[0] = new TimeTicket(-979303748);
        answer[1] = new TimeTicket(-821629246);
        answer[2] = new TimeTicket(-782688959);
        answer[3] = new TimeTicket(-716011121);
        answer[4] = new TimeTicket(-697557837);
        answer[5] = new TimeTicket(-609367691);
        answer[6] = new TimeTicket(-577097010);
        answer[7] = new TimeTicket(-458119113);
        answer[8] = new TimeTicket(-359751575);
        answer[9] = new TimeTicket(-318777377);
        answer[10] = new TimeTicket(-305477336);
        answer[11] = new TimeTicket(-226144653);
        answer[12] = new TimeTicket(-1954396);
        answer[13] = new TimeTicket(15865267);
        answer[14] = new TimeTicket(150461654);
        answer[15] = new TimeTicket(208901374);
        answer[16] = new TimeTicket(266454472);
        answer[17] = new TimeTicket(308630578);
        answer[18] = new TimeTicket(394681796);
        answer[19] = new TimeTicket(480663700);
        answer[20] = new TimeTicket(487298683);
        answer[21] = new TimeTicket(512732535);
        answer[22] = new TimeTicket(560432885);
        answer[23] = new TimeTicket(822947157);
        answer[24] = new TimeTicket(892952157);
        answer[25] = new TimeTicket(906396871);
        answer[26] = new TimeTicket(980370053);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00243() {
        TimeTicket[] output = new TimeTicket[3];
        output[0] = new TimeTicket(-436558438);
        output[1] = new TimeTicket(708144705);
        output[2] = new TimeTicket(-388683709);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[3];
        answer[0] = new TimeTicket(-436558438);
        answer[1] = new TimeTicket(-388683709);
        answer[2] = new TimeTicket(708144705);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00244() {
        TimeTicket[] output = new TimeTicket[7];
        output[0] = new TimeTicket(-367016844);
        output[1] = new TimeTicket(-870555955);
        output[2] = new TimeTicket(-972953371);
        output[3] = new TimeTicket(-140192845);
        output[4] = new TimeTicket(906888137);
        output[5] = new TimeTicket(-669503104);
        output[6] = new TimeTicket(-284861881);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[7];
        answer[0] = new TimeTicket(-972953371);
        answer[1] = new TimeTicket(-870555955);
        answer[2] = new TimeTicket(-669503104);
        answer[3] = new TimeTicket(-367016844);
        answer[4] = new TimeTicket(-284861881);
        answer[5] = new TimeTicket(-140192845);
        answer[6] = new TimeTicket(906888137);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00245() {
        int[] output = new int[27];
        output[0] = 222178988;
        output[1] = -710628172;
        output[2] = 172373666;
        output[3] = 631591284;
        output[4] = 398073240;
        output[5] = -399622493;
        output[6] = 71557595;
        output[7] = 123430867;
        output[8] = 502024402;
        output[9] = -929808285;
        output[10] = 442576490;
        output[11] = 242890806;
        output[12] = 126821465;
        output[13] = 297087644;
        output[14] = -237861959;
        output[15] = 243582063;
        output[16] = -714485172;
        output[17] = -706814039;
        output[18] = -684183226;
        output[19] = -499710918;
        output[20] = 856952986;
        output[21] = 997050778;
        output[22] = -9756184;
        output[23] = -855592834;
        output[24] = 168941347;
        output[25] = 236882766;
        output[26] = -190858089;
        Sorting.radixSort(output);
        int[] answer = new int[27];
        answer[0] = -929808285;
        answer[1] = -855592834;
        answer[2] = -714485172;
        answer[3] = -710628172;
        answer[4] = -706814039;
        answer[5] = -684183226;
        answer[6] = -499710918;
        answer[7] = -399622493;
        answer[8] = -237861959;
        answer[9] = -190858089;
        answer[10] = -9756184;
        answer[11] = 71557595;
        answer[12] = 123430867;
        answer[13] = 126821465;
        answer[14] = 168941347;
        answer[15] = 172373666;
        answer[16] = 222178988;
        answer[17] = 236882766;
        answer[18] = 242890806;
        answer[19] = 243582063;
        answer[20] = 297087644;
        answer[21] = 398073240;
        answer[22] = 442576490;
        answer[23] = 502024402;
        answer[24] = 631591284;
        answer[25] = 856952986;
        answer[26] = 997050778;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00246() {
        TimeTicket[] output = new TimeTicket[22];
        output[0] = new TimeTicket(787508108);
        output[1] = new TimeTicket(748687178);
        output[2] = new TimeTicket(-177755701);
        output[3] = new TimeTicket(-895249336);
        output[4] = new TimeTicket(368472129);
        output[5] = new TimeTicket(-113617109);
        output[6] = new TimeTicket(72482348);
        output[7] = new TimeTicket(-886584767);
        output[8] = new TimeTicket(849910994);
        output[9] = new TimeTicket(-578359942);
        output[10] = new TimeTicket(-119461569);
        output[11] = new TimeTicket(-497952475);
        output[12] = new TimeTicket(655157590);
        output[13] = new TimeTicket(587996850);
        output[14] = new TimeTicket(180708815);
        output[15] = new TimeTicket(767534996);
        output[16] = new TimeTicket(-802769983);
        output[17] = new TimeTicket(-203395495);
        output[18] = new TimeTicket(139421384);
        output[19] = new TimeTicket(319382320);
        output[20] = new TimeTicket(188976776);
        output[21] = new TimeTicket(269437435);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[22];
        answer[0] = new TimeTicket(-895249336);
        answer[1] = new TimeTicket(-886584767);
        answer[2] = new TimeTicket(-802769983);
        answer[3] = new TimeTicket(-578359942);
        answer[4] = new TimeTicket(-497952475);
        answer[5] = new TimeTicket(-203395495);
        answer[6] = new TimeTicket(-177755701);
        answer[7] = new TimeTicket(-119461569);
        answer[8] = new TimeTicket(-113617109);
        answer[9] = new TimeTicket(72482348);
        answer[10] = new TimeTicket(139421384);
        answer[11] = new TimeTicket(180708815);
        answer[12] = new TimeTicket(188976776);
        answer[13] = new TimeTicket(269437435);
        answer[14] = new TimeTicket(319382320);
        answer[15] = new TimeTicket(368472129);
        answer[16] = new TimeTicket(587996850);
        answer[17] = new TimeTicket(655157590);
        answer[18] = new TimeTicket(748687178);
        answer[19] = new TimeTicket(767534996);
        answer[20] = new TimeTicket(787508108);
        answer[21] = new TimeTicket(849910994);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00247() {
        TimeTicket[] output = new TimeTicket[18];
        output[0] = new TimeTicket(899617482);
        output[1] = new TimeTicket(933531811);
        output[2] = new TimeTicket(-553469380);
        output[3] = new TimeTicket(415185498);
        output[4] = new TimeTicket(163292448);
        output[5] = new TimeTicket(-924283383);
        output[6] = new TimeTicket(-755144790);
        output[7] = new TimeTicket(-175966349);
        output[8] = new TimeTicket(27044137);
        output[9] = new TimeTicket(228464355);
        output[10] = new TimeTicket(989117730);
        output[11] = new TimeTicket(203784308);
        output[12] = new TimeTicket(592215817);
        output[13] = new TimeTicket(-442203007);
        output[14] = new TimeTicket(-276041872);
        output[15] = new TimeTicket(903973053);
        output[16] = new TimeTicket(-2840292);
        output[17] = new TimeTicket(-29405954);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[18];
        answer[0] = new TimeTicket(-924283383);
        answer[1] = new TimeTicket(-755144790);
        answer[2] = new TimeTicket(-553469380);
        answer[3] = new TimeTicket(-442203007);
        answer[4] = new TimeTicket(-276041872);
        answer[5] = new TimeTicket(-175966349);
        answer[6] = new TimeTicket(-29405954);
        answer[7] = new TimeTicket(-2840292);
        answer[8] = new TimeTicket(27044137);
        answer[9] = new TimeTicket(163292448);
        answer[10] = new TimeTicket(203784308);
        answer[11] = new TimeTicket(228464355);
        answer[12] = new TimeTicket(415185498);
        answer[13] = new TimeTicket(592215817);
        answer[14] = new TimeTicket(899617482);
        answer[15] = new TimeTicket(903973053);
        answer[16] = new TimeTicket(933531811);
        answer[17] = new TimeTicket(989117730);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00248() {
        TimeTicket[] output = new TimeTicket[29];
        output[0] = new TimeTicket(-744365777);
        output[1] = new TimeTicket(881301604);
        output[2] = new TimeTicket(-761689999);
        output[3] = new TimeTicket(-851982916);
        output[4] = new TimeTicket(965446892);
        output[5] = new TimeTicket(596384152);
        output[6] = new TimeTicket(817942368);
        output[7] = new TimeTicket(-965599769);
        output[8] = new TimeTicket(123815166);
        output[9] = new TimeTicket(-774278331);
        output[10] = new TimeTicket(-143714646);
        output[11] = new TimeTicket(414371672);
        output[12] = new TimeTicket(-745674641);
        output[13] = new TimeTicket(-43522985);
        output[14] = new TimeTicket(-2060294);
        output[15] = new TimeTicket(414871488);
        output[16] = new TimeTicket(-82356810);
        output[17] = new TimeTicket(344167986);
        output[18] = new TimeTicket(-656342213);
        output[19] = new TimeTicket(-228013660);
        output[20] = new TimeTicket(79814776);
        output[21] = new TimeTicket(513997015);
        output[22] = new TimeTicket(999202325);
        output[23] = new TimeTicket(584862564);
        output[24] = new TimeTicket(-385402984);
        output[25] = new TimeTicket(126993784);
        output[26] = new TimeTicket(977730009);
        output[27] = new TimeTicket(685899267);
        output[28] = new TimeTicket(317191863);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[29];
        answer[0] = new TimeTicket(-965599769);
        answer[1] = new TimeTicket(-851982916);
        answer[2] = new TimeTicket(-774278331);
        answer[3] = new TimeTicket(-761689999);
        answer[4] = new TimeTicket(-745674641);
        answer[5] = new TimeTicket(-744365777);
        answer[6] = new TimeTicket(-656342213);
        answer[7] = new TimeTicket(-385402984);
        answer[8] = new TimeTicket(-228013660);
        answer[9] = new TimeTicket(-143714646);
        answer[10] = new TimeTicket(-82356810);
        answer[11] = new TimeTicket(-43522985);
        answer[12] = new TimeTicket(-2060294);
        answer[13] = new TimeTicket(79814776);
        answer[14] = new TimeTicket(123815166);
        answer[15] = new TimeTicket(126993784);
        answer[16] = new TimeTicket(317191863);
        answer[17] = new TimeTicket(344167986);
        answer[18] = new TimeTicket(414371672);
        answer[19] = new TimeTicket(414871488);
        answer[20] = new TimeTicket(513997015);
        answer[21] = new TimeTicket(584862564);
        answer[22] = new TimeTicket(596384152);
        answer[23] = new TimeTicket(685899267);
        answer[24] = new TimeTicket(817942368);
        answer[25] = new TimeTicket(881301604);
        answer[26] = new TimeTicket(965446892);
        answer[27] = new TimeTicket(977730009);
        answer[28] = new TimeTicket(999202325);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00249() {
        TimeTicket[] output = new TimeTicket[10];
        output[0] = new TimeTicket(74713245);
        output[1] = new TimeTicket(-130944747);
        output[2] = new TimeTicket(451009577);
        output[3] = new TimeTicket(715393943);
        output[4] = new TimeTicket(961164415);
        output[5] = new TimeTicket(-717660172);
        output[6] = new TimeTicket(424477971);
        output[7] = new TimeTicket(211192172);
        output[8] = new TimeTicket(689766095);
        output[9] = new TimeTicket(14576673);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[10];
        answer[0] = new TimeTicket(-717660172);
        answer[1] = new TimeTicket(-130944747);
        answer[2] = new TimeTicket(14576673);
        answer[3] = new TimeTicket(74713245);
        answer[4] = new TimeTicket(211192172);
        answer[5] = new TimeTicket(424477971);
        answer[6] = new TimeTicket(451009577);
        answer[7] = new TimeTicket(689766095);
        answer[8] = new TimeTicket(715393943);
        answer[9] = new TimeTicket(961164415);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00250() {
        TimeTicket[] output = new TimeTicket[11];
        output[0] = new TimeTicket(-919270278);
        output[1] = new TimeTicket(-466089373);
        output[2] = new TimeTicket(432621722);
        output[3] = new TimeTicket(890277490);
        output[4] = new TimeTicket(864552253);
        output[5] = new TimeTicket(-508904884);
        output[6] = new TimeTicket(-753666482);
        output[7] = new TimeTicket(393177748);
        output[8] = new TimeTicket(-685114295);
        output[9] = new TimeTicket(-125074009);
        output[10] = new TimeTicket(-684466743);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[11];
        answer[0] = new TimeTicket(-919270278);
        answer[1] = new TimeTicket(-753666482);
        answer[2] = new TimeTicket(-685114295);
        answer[3] = new TimeTicket(-684466743);
        answer[4] = new TimeTicket(-508904884);
        answer[5] = new TimeTicket(-466089373);
        answer[6] = new TimeTicket(-125074009);
        answer[7] = new TimeTicket(393177748);
        answer[8] = new TimeTicket(432621722);
        answer[9] = new TimeTicket(864552253);
        answer[10] = new TimeTicket(890277490);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00251() {
        int[] output = new int[15];
        output[0] = 153186947;
        output[1] = 388231619;
        output[2] = -967442315;
        output[3] = 582406801;
        output[4] = 865601655;
        output[5] = -240011526;
        output[6] = -555996479;
        output[7] = 135395362;
        output[8] = -949882056;
        output[9] = -381096496;
        output[10] = -635906938;
        output[11] = -192014138;
        output[12] = -10171957;
        output[13] = 556640881;
        output[14] = 901877963;
        Sorting.radixSort(output);
        int[] answer = new int[15];
        answer[0] = -967442315;
        answer[1] = -949882056;
        answer[2] = -635906938;
        answer[3] = -555996479;
        answer[4] = -381096496;
        answer[5] = -240011526;
        answer[6] = -192014138;
        answer[7] = -10171957;
        answer[8] = 135395362;
        answer[9] = 153186947;
        answer[10] = 388231619;
        answer[11] = 556640881;
        answer[12] = 582406801;
        answer[13] = 865601655;
        answer[14] = 901877963;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00252() {
        TimeTicket[] output = new TimeTicket[14];
        output[0] = new TimeTicket(-746366463);
        output[1] = new TimeTicket(-783323180);
        output[2] = new TimeTicket(-377906078);
        output[3] = new TimeTicket(-651726523);
        output[4] = new TimeTicket(-972429136);
        output[5] = new TimeTicket(-450432345);
        output[6] = new TimeTicket(-100812591);
        output[7] = new TimeTicket(816662068);
        output[8] = new TimeTicket(182845398);
        output[9] = new TimeTicket(483348989);
        output[10] = new TimeTicket(963434829);
        output[11] = new TimeTicket(223884943);
        output[12] = new TimeTicket(738616461);
        output[13] = new TimeTicket(215632964);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[14];
        answer[0] = new TimeTicket(-972429136);
        answer[1] = new TimeTicket(-783323180);
        answer[2] = new TimeTicket(-746366463);
        answer[3] = new TimeTicket(-651726523);
        answer[4] = new TimeTicket(-450432345);
        answer[5] = new TimeTicket(-377906078);
        answer[6] = new TimeTicket(-100812591);
        answer[7] = new TimeTicket(182845398);
        answer[8] = new TimeTicket(215632964);
        answer[9] = new TimeTicket(223884943);
        answer[10] = new TimeTicket(483348989);
        answer[11] = new TimeTicket(738616461);
        answer[12] = new TimeTicket(816662068);
        answer[13] = new TimeTicket(963434829);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00253() {
        TimeTicket[] output = new TimeTicket[10];
        output[0] = new TimeTicket(932272533);
        output[1] = new TimeTicket(-13152015);
        output[2] = new TimeTicket(534848474);
        output[3] = new TimeTicket(562013131);
        output[4] = new TimeTicket(341783911);
        output[5] = new TimeTicket(451399986);
        output[6] = new TimeTicket(-867156393);
        output[7] = new TimeTicket(-112941423);
        output[8] = new TimeTicket(85553919);
        output[9] = new TimeTicket(199524428);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[10];
        answer[0] = new TimeTicket(-867156393);
        answer[1] = new TimeTicket(-112941423);
        answer[2] = new TimeTicket(-13152015);
        answer[3] = new TimeTicket(85553919);
        answer[4] = new TimeTicket(199524428);
        answer[5] = new TimeTicket(341783911);
        answer[6] = new TimeTicket(451399986);
        answer[7] = new TimeTicket(534848474);
        answer[8] = new TimeTicket(562013131);
        answer[9] = new TimeTicket(932272533);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00254() {
        TimeTicket[] output = new TimeTicket[3];
        output[0] = new TimeTicket(932204717);
        output[1] = new TimeTicket(-533244235);
        output[2] = new TimeTicket(762702430);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[3];
        answer[0] = new TimeTicket(-533244235);
        answer[1] = new TimeTicket(762702430);
        answer[2] = new TimeTicket(932204717);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00255() {
        TimeTicket[] output = new TimeTicket[21];
        output[0] = new TimeTicket(-771128685);
        output[1] = new TimeTicket(285587598);
        output[2] = new TimeTicket(225928099);
        output[3] = new TimeTicket(905916597);
        output[4] = new TimeTicket(883827198);
        output[5] = new TimeTicket(-558412224);
        output[6] = new TimeTicket(-62083664);
        output[7] = new TimeTicket(276415508);
        output[8] = new TimeTicket(-139862144);
        output[9] = new TimeTicket(-450729441);
        output[10] = new TimeTicket(546501218);
        output[11] = new TimeTicket(237879479);
        output[12] = new TimeTicket(407621855);
        output[13] = new TimeTicket(-748786040);
        output[14] = new TimeTicket(61029587);
        output[15] = new TimeTicket(61068368);
        output[16] = new TimeTicket(112169326);
        output[17] = new TimeTicket(84932439);
        output[18] = new TimeTicket(360056536);
        output[19] = new TimeTicket(-755764584);
        output[20] = new TimeTicket(581192569);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[21];
        answer[0] = new TimeTicket(-771128685);
        answer[1] = new TimeTicket(-755764584);
        answer[2] = new TimeTicket(-748786040);
        answer[3] = new TimeTicket(-558412224);
        answer[4] = new TimeTicket(-450729441);
        answer[5] = new TimeTicket(-139862144);
        answer[6] = new TimeTicket(-62083664);
        answer[7] = new TimeTicket(61029587);
        answer[8] = new TimeTicket(61068368);
        answer[9] = new TimeTicket(84932439);
        answer[10] = new TimeTicket(112169326);
        answer[11] = new TimeTicket(225928099);
        answer[12] = new TimeTicket(237879479);
        answer[13] = new TimeTicket(276415508);
        answer[14] = new TimeTicket(285587598);
        answer[15] = new TimeTicket(360056536);
        answer[16] = new TimeTicket(407621855);
        answer[17] = new TimeTicket(546501218);
        answer[18] = new TimeTicket(581192569);
        answer[19] = new TimeTicket(883827198);
        answer[20] = new TimeTicket(905916597);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00256() {
        TimeTicket[] output = new TimeTicket[1];
        output[0] = new TimeTicket(-184632097);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[1];
        answer[0] = new TimeTicket(-184632097);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00257() {
        int[] output = new int[9];
        output[0] = 722118982;
        output[1] = -435538867;
        output[2] = 770360154;
        output[3] = -569357256;
        output[4] = 559781790;
        output[5] = 72501384;
        output[6] = 786372643;
        output[7] = 557662725;
        output[8] = 808293038;
        Sorting.radixSort(output);
        int[] answer = new int[9];
        answer[0] = -569357256;
        answer[1] = -435538867;
        answer[2] = 72501384;
        answer[3] = 557662725;
        answer[4] = 559781790;
        answer[5] = 722118982;
        answer[6] = 770360154;
        answer[7] = 786372643;
        answer[8] = 808293038;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00258() {
        TimeTicket[] output = new TimeTicket[17];
        output[0] = new TimeTicket(-871861687);
        output[1] = new TimeTicket(878510284);
        output[2] = new TimeTicket(-635418427);
        output[3] = new TimeTicket(-237285989);
        output[4] = new TimeTicket(630479547);
        output[5] = new TimeTicket(-175847608);
        output[6] = new TimeTicket(-873137957);
        output[7] = new TimeTicket(-304860448);
        output[8] = new TimeTicket(355238873);
        output[9] = new TimeTicket(-324763632);
        output[10] = new TimeTicket(-74012749);
        output[11] = new TimeTicket(-254533798);
        output[12] = new TimeTicket(-18131502);
        output[13] = new TimeTicket(51117207);
        output[14] = new TimeTicket(355424803);
        output[15] = new TimeTicket(247702687);
        output[16] = new TimeTicket(520988066);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[17];
        answer[0] = new TimeTicket(-873137957);
        answer[1] = new TimeTicket(-871861687);
        answer[2] = new TimeTicket(-635418427);
        answer[3] = new TimeTicket(-324763632);
        answer[4] = new TimeTicket(-304860448);
        answer[5] = new TimeTicket(-254533798);
        answer[6] = new TimeTicket(-237285989);
        answer[7] = new TimeTicket(-175847608);
        answer[8] = new TimeTicket(-74012749);
        answer[9] = new TimeTicket(-18131502);
        answer[10] = new TimeTicket(51117207);
        answer[11] = new TimeTicket(247702687);
        answer[12] = new TimeTicket(355238873);
        answer[13] = new TimeTicket(355424803);
        answer[14] = new TimeTicket(520988066);
        answer[15] = new TimeTicket(630479547);
        answer[16] = new TimeTicket(878510284);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00259() {
        TimeTicket[] output = new TimeTicket[10];
        output[0] = new TimeTicket(427497799);
        output[1] = new TimeTicket(128200710);
        output[2] = new TimeTicket(-786241451);
        output[3] = new TimeTicket(-190092196);
        output[4] = new TimeTicket(318436339);
        output[5] = new TimeTicket(495652494);
        output[6] = new TimeTicket(-914632466);
        output[7] = new TimeTicket(470459241);
        output[8] = new TimeTicket(248719477);
        output[9] = new TimeTicket(874119950);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[10];
        answer[0] = new TimeTicket(-914632466);
        answer[1] = new TimeTicket(-786241451);
        answer[2] = new TimeTicket(-190092196);
        answer[3] = new TimeTicket(128200710);
        answer[4] = new TimeTicket(248719477);
        answer[5] = new TimeTicket(318436339);
        answer[6] = new TimeTicket(427497799);
        answer[7] = new TimeTicket(470459241);
        answer[8] = new TimeTicket(495652494);
        answer[9] = new TimeTicket(874119950);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00260() {
        TimeTicket[] output = new TimeTicket[17];
        output[0] = new TimeTicket(-399922174);
        output[1] = new TimeTicket(731288424);
        output[2] = new TimeTicket(691491109);
        output[3] = new TimeTicket(304279788);
        output[4] = new TimeTicket(623181582);
        output[5] = new TimeTicket(-949569796);
        output[6] = new TimeTicket(710607798);
        output[7] = new TimeTicket(-277824500);
        output[8] = new TimeTicket(-476700760);
        output[9] = new TimeTicket(238166779);
        output[10] = new TimeTicket(-992155778);
        output[11] = new TimeTicket(-141564250);
        output[12] = new TimeTicket(-5693358);
        output[13] = new TimeTicket(850257829);
        output[14] = new TimeTicket(-689850587);
        output[15] = new TimeTicket(-780062423);
        output[16] = new TimeTicket(578441132);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[17];
        answer[0] = new TimeTicket(-992155778);
        answer[1] = new TimeTicket(-949569796);
        answer[2] = new TimeTicket(-780062423);
        answer[3] = new TimeTicket(-689850587);
        answer[4] = new TimeTicket(-476700760);
        answer[5] = new TimeTicket(-399922174);
        answer[6] = new TimeTicket(-277824500);
        answer[7] = new TimeTicket(-141564250);
        answer[8] = new TimeTicket(-5693358);
        answer[9] = new TimeTicket(238166779);
        answer[10] = new TimeTicket(304279788);
        answer[11] = new TimeTicket(578441132);
        answer[12] = new TimeTicket(623181582);
        answer[13] = new TimeTicket(691491109);
        answer[14] = new TimeTicket(710607798);
        answer[15] = new TimeTicket(731288424);
        answer[16] = new TimeTicket(850257829);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00261() {
        TimeTicket[] output = new TimeTicket[24];
        output[0] = new TimeTicket(237840196);
        output[1] = new TimeTicket(672972273);
        output[2] = new TimeTicket(-584328229);
        output[3] = new TimeTicket(-701394447);
        output[4] = new TimeTicket(-681708989);
        output[5] = new TimeTicket(224868937);
        output[6] = new TimeTicket(-585382463);
        output[7] = new TimeTicket(168199093);
        output[8] = new TimeTicket(726733529);
        output[9] = new TimeTicket(251907998);
        output[10] = new TimeTicket(873664762);
        output[11] = new TimeTicket(-106538192);
        output[12] = new TimeTicket(583295666);
        output[13] = new TimeTicket(587280447);
        output[14] = new TimeTicket(-346338030);
        output[15] = new TimeTicket(-893485384);
        output[16] = new TimeTicket(321279739);
        output[17] = new TimeTicket(522426389);
        output[18] = new TimeTicket(-453162144);
        output[19] = new TimeTicket(-504961958);
        output[20] = new TimeTicket(-111158929);
        output[21] = new TimeTicket(402356768);
        output[22] = new TimeTicket(967053403);
        output[23] = new TimeTicket(389297292);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[24];
        answer[0] = new TimeTicket(-893485384);
        answer[1] = new TimeTicket(-701394447);
        answer[2] = new TimeTicket(-681708989);
        answer[3] = new TimeTicket(-585382463);
        answer[4] = new TimeTicket(-584328229);
        answer[5] = new TimeTicket(-504961958);
        answer[6] = new TimeTicket(-453162144);
        answer[7] = new TimeTicket(-346338030);
        answer[8] = new TimeTicket(-111158929);
        answer[9] = new TimeTicket(-106538192);
        answer[10] = new TimeTicket(168199093);
        answer[11] = new TimeTicket(224868937);
        answer[12] = new TimeTicket(237840196);
        answer[13] = new TimeTicket(251907998);
        answer[14] = new TimeTicket(321279739);
        answer[15] = new TimeTicket(389297292);
        answer[16] = new TimeTicket(402356768);
        answer[17] = new TimeTicket(522426389);
        answer[18] = new TimeTicket(583295666);
        answer[19] = new TimeTicket(587280447);
        answer[20] = new TimeTicket(672972273);
        answer[21] = new TimeTicket(726733529);
        answer[22] = new TimeTicket(873664762);
        answer[23] = new TimeTicket(967053403);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00262() {
        TimeTicket[] output = new TimeTicket[15];
        output[0] = new TimeTicket(-32265047);
        output[1] = new TimeTicket(-436041800);
        output[2] = new TimeTicket(-954134669);
        output[3] = new TimeTicket(202160437);
        output[4] = new TimeTicket(574182621);
        output[5] = new TimeTicket(214216129);
        output[6] = new TimeTicket(-703493916);
        output[7] = new TimeTicket(773779897);
        output[8] = new TimeTicket(653250005);
        output[9] = new TimeTicket(636838425);
        output[10] = new TimeTicket(-87877890);
        output[11] = new TimeTicket(210366777);
        output[12] = new TimeTicket(478656177);
        output[13] = new TimeTicket(-33259259);
        output[14] = new TimeTicket(-396880516);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[15];
        answer[0] = new TimeTicket(-954134669);
        answer[1] = new TimeTicket(-703493916);
        answer[2] = new TimeTicket(-436041800);
        answer[3] = new TimeTicket(-396880516);
        answer[4] = new TimeTicket(-87877890);
        answer[5] = new TimeTicket(-33259259);
        answer[6] = new TimeTicket(-32265047);
        answer[7] = new TimeTicket(202160437);
        answer[8] = new TimeTicket(210366777);
        answer[9] = new TimeTicket(214216129);
        answer[10] = new TimeTicket(478656177);
        answer[11] = new TimeTicket(574182621);
        answer[12] = new TimeTicket(636838425);
        answer[13] = new TimeTicket(653250005);
        answer[14] = new TimeTicket(773779897);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00263() {
        int[] output = new int[14];
        output[0] = -773403924;
        output[1] = 82772949;
        output[2] = 659389275;
        output[3] = -937013557;
        output[4] = 913637427;
        output[5] = 978307125;
        output[6] = 745606440;
        output[7] = -24863173;
        output[8] = 148119196;
        output[9] = -909210467;
        output[10] = -687482432;
        output[11] = -365221786;
        output[12] = 118762376;
        output[13] = 544745844;
        Sorting.radixSort(output);
        int[] answer = new int[14];
        answer[0] = -937013557;
        answer[1] = -909210467;
        answer[2] = -773403924;
        answer[3] = -687482432;
        answer[4] = -365221786;
        answer[5] = -24863173;
        answer[6] = 82772949;
        answer[7] = 118762376;
        answer[8] = 148119196;
        answer[9] = 544745844;
        answer[10] = 659389275;
        answer[11] = 745606440;
        answer[12] = 913637427;
        answer[13] = 978307125;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00264() {
        TimeTicket[] output = new TimeTicket[26];
        output[0] = new TimeTicket(83113486);
        output[1] = new TimeTicket(-858221434);
        output[2] = new TimeTicket(355228863);
        output[3] = new TimeTicket(-983484241);
        output[4] = new TimeTicket(885419546);
        output[5] = new TimeTicket(723855302);
        output[6] = new TimeTicket(-82224087);
        output[7] = new TimeTicket(-458651449);
        output[8] = new TimeTicket(586873906);
        output[9] = new TimeTicket(-104194129);
        output[10] = new TimeTicket(879029430);
        output[11] = new TimeTicket(7785928);
        output[12] = new TimeTicket(73217232);
        output[13] = new TimeTicket(-613286464);
        output[14] = new TimeTicket(-248828485);
        output[15] = new TimeTicket(-168048609);
        output[16] = new TimeTicket(-12671731);
        output[17] = new TimeTicket(-311793466);
        output[18] = new TimeTicket(-39294117);
        output[19] = new TimeTicket(-509423466);
        output[20] = new TimeTicket(-31230589);
        output[21] = new TimeTicket(-902242695);
        output[22] = new TimeTicket(313821043);
        output[23] = new TimeTicket(26129949);
        output[24] = new TimeTicket(494119776);
        output[25] = new TimeTicket(-194007354);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[26];
        answer[0] = new TimeTicket(-983484241);
        answer[1] = new TimeTicket(-902242695);
        answer[2] = new TimeTicket(-858221434);
        answer[3] = new TimeTicket(-613286464);
        answer[4] = new TimeTicket(-509423466);
        answer[5] = new TimeTicket(-458651449);
        answer[6] = new TimeTicket(-311793466);
        answer[7] = new TimeTicket(-248828485);
        answer[8] = new TimeTicket(-194007354);
        answer[9] = new TimeTicket(-168048609);
        answer[10] = new TimeTicket(-104194129);
        answer[11] = new TimeTicket(-82224087);
        answer[12] = new TimeTicket(-39294117);
        answer[13] = new TimeTicket(-31230589);
        answer[14] = new TimeTicket(-12671731);
        answer[15] = new TimeTicket(7785928);
        answer[16] = new TimeTicket(26129949);
        answer[17] = new TimeTicket(73217232);
        answer[18] = new TimeTicket(83113486);
        answer[19] = new TimeTicket(313821043);
        answer[20] = new TimeTicket(355228863);
        answer[21] = new TimeTicket(494119776);
        answer[22] = new TimeTicket(586873906);
        answer[23] = new TimeTicket(723855302);
        answer[24] = new TimeTicket(879029430);
        answer[25] = new TimeTicket(885419546);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00265() {
        TimeTicket[] output = new TimeTicket[5];
        output[0] = new TimeTicket(-907116625);
        output[1] = new TimeTicket(-945738867);
        output[2] = new TimeTicket(-559511377);
        output[3] = new TimeTicket(246280854);
        output[4] = new TimeTicket(-711909660);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[5];
        answer[0] = new TimeTicket(-945738867);
        answer[1] = new TimeTicket(-907116625);
        answer[2] = new TimeTicket(-711909660);
        answer[3] = new TimeTicket(-559511377);
        answer[4] = new TimeTicket(246280854);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00266() {
        TimeTicket[] output = new TimeTicket[11];
        output[0] = new TimeTicket(457606830);
        output[1] = new TimeTicket(-552774940);
        output[2] = new TimeTicket(-37041636);
        output[3] = new TimeTicket(332810067);
        output[4] = new TimeTicket(-182447983);
        output[5] = new TimeTicket(289914579);
        output[6] = new TimeTicket(13864037);
        output[7] = new TimeTicket(943217709);
        output[8] = new TimeTicket(-692543868);
        output[9] = new TimeTicket(-264508996);
        output[10] = new TimeTicket(904038752);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[11];
        answer[0] = new TimeTicket(-692543868);
        answer[1] = new TimeTicket(-552774940);
        answer[2] = new TimeTicket(-264508996);
        answer[3] = new TimeTicket(-182447983);
        answer[4] = new TimeTicket(-37041636);
        answer[5] = new TimeTicket(13864037);
        answer[6] = new TimeTicket(289914579);
        answer[7] = new TimeTicket(332810067);
        answer[8] = new TimeTicket(457606830);
        answer[9] = new TimeTicket(904038752);
        answer[10] = new TimeTicket(943217709);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00267() {
        TimeTicket[] output = new TimeTicket[30];
        output[0] = new TimeTicket(-34562572);
        output[1] = new TimeTicket(894609844);
        output[2] = new TimeTicket(281026156);
        output[3] = new TimeTicket(84382818);
        output[4] = new TimeTicket(-123863747);
        output[5] = new TimeTicket(976398506);
        output[6] = new TimeTicket(772816541);
        output[7] = new TimeTicket(-260054907);
        output[8] = new TimeTicket(-871283598);
        output[9] = new TimeTicket(700809003);
        output[10] = new TimeTicket(355274445);
        output[11] = new TimeTicket(-458336747);
        output[12] = new TimeTicket(-146630673);
        output[13] = new TimeTicket(859774899);
        output[14] = new TimeTicket(-106972315);
        output[15] = new TimeTicket(827122652);
        output[16] = new TimeTicket(-666484564);
        output[17] = new TimeTicket(816306901);
        output[18] = new TimeTicket(437104361);
        output[19] = new TimeTicket(-790297109);
        output[20] = new TimeTicket(-797368654);
        output[21] = new TimeTicket(-483226487);
        output[22] = new TimeTicket(-584485942);
        output[23] = new TimeTicket(-24599322);
        output[24] = new TimeTicket(-871237398);
        output[25] = new TimeTicket(-602428022);
        output[26] = new TimeTicket(136754775);
        output[27] = new TimeTicket(642143399);
        output[28] = new TimeTicket(113171581);
        output[29] = new TimeTicket(-263947500);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[30];
        answer[0] = new TimeTicket(-871283598);
        answer[1] = new TimeTicket(-871237398);
        answer[2] = new TimeTicket(-797368654);
        answer[3] = new TimeTicket(-790297109);
        answer[4] = new TimeTicket(-666484564);
        answer[5] = new TimeTicket(-602428022);
        answer[6] = new TimeTicket(-584485942);
        answer[7] = new TimeTicket(-483226487);
        answer[8] = new TimeTicket(-458336747);
        answer[9] = new TimeTicket(-263947500);
        answer[10] = new TimeTicket(-260054907);
        answer[11] = new TimeTicket(-146630673);
        answer[12] = new TimeTicket(-123863747);
        answer[13] = new TimeTicket(-106972315);
        answer[14] = new TimeTicket(-34562572);
        answer[15] = new TimeTicket(-24599322);
        answer[16] = new TimeTicket(84382818);
        answer[17] = new TimeTicket(113171581);
        answer[18] = new TimeTicket(136754775);
        answer[19] = new TimeTicket(281026156);
        answer[20] = new TimeTicket(355274445);
        answer[21] = new TimeTicket(437104361);
        answer[22] = new TimeTicket(642143399);
        answer[23] = new TimeTicket(700809003);
        answer[24] = new TimeTicket(772816541);
        answer[25] = new TimeTicket(816306901);
        answer[26] = new TimeTicket(827122652);
        answer[27] = new TimeTicket(859774899);
        answer[28] = new TimeTicket(894609844);
        answer[29] = new TimeTicket(976398506);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00268() {
        TimeTicket[] output = new TimeTicket[15];
        output[0] = new TimeTicket(94025821);
        output[1] = new TimeTicket(-737352401);
        output[2] = new TimeTicket(113299525);
        output[3] = new TimeTicket(967463029);
        output[4] = new TimeTicket(-189223676);
        output[5] = new TimeTicket(-729495563);
        output[6] = new TimeTicket(62529247);
        output[7] = new TimeTicket(281256358);
        output[8] = new TimeTicket(499338309);
        output[9] = new TimeTicket(-505405109);
        output[10] = new TimeTicket(638408415);
        output[11] = new TimeTicket(806215325);
        output[12] = new TimeTicket(633784429);
        output[13] = new TimeTicket(-200587491);
        output[14] = new TimeTicket(-922700661);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[15];
        answer[0] = new TimeTicket(-922700661);
        answer[1] = new TimeTicket(-737352401);
        answer[2] = new TimeTicket(-729495563);
        answer[3] = new TimeTicket(-505405109);
        answer[4] = new TimeTicket(-200587491);
        answer[5] = new TimeTicket(-189223676);
        answer[6] = new TimeTicket(62529247);
        answer[7] = new TimeTicket(94025821);
        answer[8] = new TimeTicket(113299525);
        answer[9] = new TimeTicket(281256358);
        answer[10] = new TimeTicket(499338309);
        answer[11] = new TimeTicket(633784429);
        answer[12] = new TimeTicket(638408415);
        answer[13] = new TimeTicket(806215325);
        answer[14] = new TimeTicket(967463029);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00269() {
        int[] output = new int[16];
        output[0] = 943837009;
        output[1] = -141434137;
        output[2] = 486238626;
        output[3] = 110202847;
        output[4] = -899719881;
        output[5] = 511829072;
        output[6] = -82139920;
        output[7] = -848377639;
        output[8] = -309627565;
        output[9] = 103625610;
        output[10] = -147585989;
        output[11] = 497113727;
        output[12] = 533331907;
        output[13] = -843868390;
        output[14] = -83480203;
        output[15] = -857981464;
        Sorting.radixSort(output);
        int[] answer = new int[16];
        answer[0] = -899719881;
        answer[1] = -857981464;
        answer[2] = -848377639;
        answer[3] = -843868390;
        answer[4] = -309627565;
        answer[5] = -147585989;
        answer[6] = -141434137;
        answer[7] = -83480203;
        answer[8] = -82139920;
        answer[9] = 103625610;
        answer[10] = 110202847;
        answer[11] = 486238626;
        answer[12] = 497113727;
        answer[13] = 511829072;
        answer[14] = 533331907;
        answer[15] = 943837009;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00270() {
        TimeTicket[] output = new TimeTicket[9];
        output[0] = new TimeTicket(166268952);
        output[1] = new TimeTicket(700355662);
        output[2] = new TimeTicket(488255440);
        output[3] = new TimeTicket(652777844);
        output[4] = new TimeTicket(915106729);
        output[5] = new TimeTicket(-409641280);
        output[6] = new TimeTicket(939898091);
        output[7] = new TimeTicket(243289771);
        output[8] = new TimeTicket(-762780673);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[9];
        answer[0] = new TimeTicket(-762780673);
        answer[1] = new TimeTicket(-409641280);
        answer[2] = new TimeTicket(166268952);
        answer[3] = new TimeTicket(243289771);
        answer[4] = new TimeTicket(488255440);
        answer[5] = new TimeTicket(652777844);
        answer[6] = new TimeTicket(700355662);
        answer[7] = new TimeTicket(915106729);
        answer[8] = new TimeTicket(939898091);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00271() {
        TimeTicket[] output = new TimeTicket[4];
        output[0] = new TimeTicket(-400096137);
        output[1] = new TimeTicket(944772393);
        output[2] = new TimeTicket(36748684);
        output[3] = new TimeTicket(311107836);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[4];
        answer[0] = new TimeTicket(-400096137);
        answer[1] = new TimeTicket(36748684);
        answer[2] = new TimeTicket(311107836);
        answer[3] = new TimeTicket(944772393);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00272() {
        TimeTicket[] output = new TimeTicket[7];
        output[0] = new TimeTicket(832260502);
        output[1] = new TimeTicket(-578760027);
        output[2] = new TimeTicket(62497876);
        output[3] = new TimeTicket(-415231148);
        output[4] = new TimeTicket(974039874);
        output[5] = new TimeTicket(572762440);
        output[6] = new TimeTicket(-357744836);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[7];
        answer[0] = new TimeTicket(-578760027);
        answer[1] = new TimeTicket(-415231148);
        answer[2] = new TimeTicket(-357744836);
        answer[3] = new TimeTicket(62497876);
        answer[4] = new TimeTicket(572762440);
        answer[5] = new TimeTicket(832260502);
        answer[6] = new TimeTicket(974039874);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00273() {
        TimeTicket[] output = new TimeTicket[1];
        output[0] = new TimeTicket(-567843100);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[1];
        answer[0] = new TimeTicket(-567843100);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00274() {
        TimeTicket[] output = new TimeTicket[16];
        output[0] = new TimeTicket(-141873904);
        output[1] = new TimeTicket(440021247);
        output[2] = new TimeTicket(523734280);
        output[3] = new TimeTicket(952320228);
        output[4] = new TimeTicket(-155951824);
        output[5] = new TimeTicket(-277065314);
        output[6] = new TimeTicket(234270160);
        output[7] = new TimeTicket(755593438);
        output[8] = new TimeTicket(531535643);
        output[9] = new TimeTicket(24308037);
        output[10] = new TimeTicket(519161566);
        output[11] = new TimeTicket(-480496590);
        output[12] = new TimeTicket(-415049584);
        output[13] = new TimeTicket(-842388092);
        output[14] = new TimeTicket(815661606);
        output[15] = new TimeTicket(-130741913);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[16];
        answer[0] = new TimeTicket(-842388092);
        answer[1] = new TimeTicket(-480496590);
        answer[2] = new TimeTicket(-415049584);
        answer[3] = new TimeTicket(-277065314);
        answer[4] = new TimeTicket(-155951824);
        answer[5] = new TimeTicket(-141873904);
        answer[6] = new TimeTicket(-130741913);
        answer[7] = new TimeTicket(24308037);
        answer[8] = new TimeTicket(234270160);
        answer[9] = new TimeTicket(440021247);
        answer[10] = new TimeTicket(519161566);
        answer[11] = new TimeTicket(523734280);
        answer[12] = new TimeTicket(531535643);
        answer[13] = new TimeTicket(755593438);
        answer[14] = new TimeTicket(815661606);
        answer[15] = new TimeTicket(952320228);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00275() {
        int[] output = new int[28];
        output[0] = 56117920;
        output[1] = 462055575;
        output[2] = -718803279;
        output[3] = -922806400;
        output[4] = 589906536;
        output[5] = -214325981;
        output[6] = -35847914;
        output[7] = -988428065;
        output[8] = 877740458;
        output[9] = 878513456;
        output[10] = -838780292;
        output[11] = -54254184;
        output[12] = -82414655;
        output[13] = 229323532;
        output[14] = 669209262;
        output[15] = -275738256;
        output[16] = 645735744;
        output[17] = -53860059;
        output[18] = -372130304;
        output[19] = -191564237;
        output[20] = -47917421;
        output[21] = 228070532;
        output[22] = -994459861;
        output[23] = -101875039;
        output[24] = -945376076;
        output[25] = -1086258;
        output[26] = -93093941;
        output[27] = -805312600;
        Sorting.radixSort(output);
        int[] answer = new int[28];
        answer[0] = -994459861;
        answer[1] = -988428065;
        answer[2] = -945376076;
        answer[3] = -922806400;
        answer[4] = -838780292;
        answer[5] = -805312600;
        answer[6] = -718803279;
        answer[7] = -372130304;
        answer[8] = -275738256;
        answer[9] = -214325981;
        answer[10] = -191564237;
        answer[11] = -101875039;
        answer[12] = -93093941;
        answer[13] = -82414655;
        answer[14] = -54254184;
        answer[15] = -53860059;
        answer[16] = -47917421;
        answer[17] = -35847914;
        answer[18] = -1086258;
        answer[19] = 56117920;
        answer[20] = 228070532;
        answer[21] = 229323532;
        answer[22] = 462055575;
        answer[23] = 589906536;
        answer[24] = 645735744;
        answer[25] = 669209262;
        answer[26] = 877740458;
        answer[27] = 878513456;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00276() {
        TimeTicket[] output = new TimeTicket[25];
        output[0] = new TimeTicket(-268561358);
        output[1] = new TimeTicket(333313657);
        output[2] = new TimeTicket(-428830966);
        output[3] = new TimeTicket(-621215562);
        output[4] = new TimeTicket(276510415);
        output[5] = new TimeTicket(-832469839);
        output[6] = new TimeTicket(682808984);
        output[7] = new TimeTicket(-30024615);
        output[8] = new TimeTicket(-267265262);
        output[9] = new TimeTicket(-190028195);
        output[10] = new TimeTicket(-284849183);
        output[11] = new TimeTicket(351570874);
        output[12] = new TimeTicket(611358605);
        output[13] = new TimeTicket(-425911219);
        output[14] = new TimeTicket(794836602);
        output[15] = new TimeTicket(-514999006);
        output[16] = new TimeTicket(-619195648);
        output[17] = new TimeTicket(74027977);
        output[18] = new TimeTicket(-377880629);
        output[19] = new TimeTicket(566881231);
        output[20] = new TimeTicket(-570404478);
        output[21] = new TimeTicket(822652301);
        output[22] = new TimeTicket(181303941);
        output[23] = new TimeTicket(817716916);
        output[24] = new TimeTicket(983314006);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[25];
        answer[0] = new TimeTicket(-832469839);
        answer[1] = new TimeTicket(-621215562);
        answer[2] = new TimeTicket(-619195648);
        answer[3] = new TimeTicket(-570404478);
        answer[4] = new TimeTicket(-514999006);
        answer[5] = new TimeTicket(-428830966);
        answer[6] = new TimeTicket(-425911219);
        answer[7] = new TimeTicket(-377880629);
        answer[8] = new TimeTicket(-284849183);
        answer[9] = new TimeTicket(-268561358);
        answer[10] = new TimeTicket(-267265262);
        answer[11] = new TimeTicket(-190028195);
        answer[12] = new TimeTicket(-30024615);
        answer[13] = new TimeTicket(74027977);
        answer[14] = new TimeTicket(181303941);
        answer[15] = new TimeTicket(276510415);
        answer[16] = new TimeTicket(333313657);
        answer[17] = new TimeTicket(351570874);
        answer[18] = new TimeTicket(566881231);
        answer[19] = new TimeTicket(611358605);
        answer[20] = new TimeTicket(682808984);
        answer[21] = new TimeTicket(794836602);
        answer[22] = new TimeTicket(817716916);
        answer[23] = new TimeTicket(822652301);
        answer[24] = new TimeTicket(983314006);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00277() {
        TimeTicket[] output = new TimeTicket[22];
        output[0] = new TimeTicket(-692603926);
        output[1] = new TimeTicket(-42202138);
        output[2] = new TimeTicket(-65710654);
        output[3] = new TimeTicket(181679048);
        output[4] = new TimeTicket(270316932);
        output[5] = new TimeTicket(-714954591);
        output[6] = new TimeTicket(123009544);
        output[7] = new TimeTicket(-33853879);
        output[8] = new TimeTicket(-88543627);
        output[9] = new TimeTicket(132278983);
        output[10] = new TimeTicket(-274834900);
        output[11] = new TimeTicket(826538522);
        output[12] = new TimeTicket(-305303439);
        output[13] = new TimeTicket(-168710778);
        output[14] = new TimeTicket(232725948);
        output[15] = new TimeTicket(259730584);
        output[16] = new TimeTicket(450966838);
        output[17] = new TimeTicket(158790366);
        output[18] = new TimeTicket(428613647);
        output[19] = new TimeTicket(-510074790);
        output[20] = new TimeTicket(-426337187);
        output[21] = new TimeTicket(-555477577);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[22];
        answer[0] = new TimeTicket(-714954591);
        answer[1] = new TimeTicket(-692603926);
        answer[2] = new TimeTicket(-555477577);
        answer[3] = new TimeTicket(-510074790);
        answer[4] = new TimeTicket(-426337187);
        answer[5] = new TimeTicket(-305303439);
        answer[6] = new TimeTicket(-274834900);
        answer[7] = new TimeTicket(-168710778);
        answer[8] = new TimeTicket(-88543627);
        answer[9] = new TimeTicket(-65710654);
        answer[10] = new TimeTicket(-42202138);
        answer[11] = new TimeTicket(-33853879);
        answer[12] = new TimeTicket(123009544);
        answer[13] = new TimeTicket(132278983);
        answer[14] = new TimeTicket(158790366);
        answer[15] = new TimeTicket(181679048);
        answer[16] = new TimeTicket(232725948);
        answer[17] = new TimeTicket(259730584);
        answer[18] = new TimeTicket(270316932);
        answer[19] = new TimeTicket(428613647);
        answer[20] = new TimeTicket(450966838);
        answer[21] = new TimeTicket(826538522);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00278() {
        TimeTicket[] output = new TimeTicket[1];
        output[0] = new TimeTicket(581051776);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[1];
        answer[0] = new TimeTicket(581051776);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00279() {
        TimeTicket[] output = new TimeTicket[14];
        output[0] = new TimeTicket(313206656);
        output[1] = new TimeTicket(-943738538);
        output[2] = new TimeTicket(-36832966);
        output[3] = new TimeTicket(886333412);
        output[4] = new TimeTicket(535519360);
        output[5] = new TimeTicket(-569964100);
        output[6] = new TimeTicket(75184301);
        output[7] = new TimeTicket(-410102277);
        output[8] = new TimeTicket(-228838075);
        output[9] = new TimeTicket(-798018301);
        output[10] = new TimeTicket(-453779335);
        output[11] = new TimeTicket(66522305);
        output[12] = new TimeTicket(-850884133);
        output[13] = new TimeTicket(-70393129);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[14];
        answer[0] = new TimeTicket(-943738538);
        answer[1] = new TimeTicket(-850884133);
        answer[2] = new TimeTicket(-798018301);
        answer[3] = new TimeTicket(-569964100);
        answer[4] = new TimeTicket(-453779335);
        answer[5] = new TimeTicket(-410102277);
        answer[6] = new TimeTicket(-228838075);
        answer[7] = new TimeTicket(-70393129);
        answer[8] = new TimeTicket(-36832966);
        answer[9] = new TimeTicket(66522305);
        answer[10] = new TimeTicket(75184301);
        answer[11] = new TimeTicket(313206656);
        answer[12] = new TimeTicket(535519360);
        answer[13] = new TimeTicket(886333412);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00280() {
        TimeTicket[] output = new TimeTicket[8];
        output[0] = new TimeTicket(662344068);
        output[1] = new TimeTicket(-491356301);
        output[2] = new TimeTicket(358445226);
        output[3] = new TimeTicket(-426312750);
        output[4] = new TimeTicket(-412812058);
        output[5] = new TimeTicket(-60448347);
        output[6] = new TimeTicket(849607476);
        output[7] = new TimeTicket(-700303952);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[8];
        answer[0] = new TimeTicket(-700303952);
        answer[1] = new TimeTicket(-491356301);
        answer[2] = new TimeTicket(-426312750);
        answer[3] = new TimeTicket(-412812058);
        answer[4] = new TimeTicket(-60448347);
        answer[5] = new TimeTicket(358445226);
        answer[6] = new TimeTicket(662344068);
        answer[7] = new TimeTicket(849607476);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00281() {
        int[] output = new int[5];
        output[0] = 612924225;
        output[1] = 837954713;
        output[2] = -407305978;
        output[3] = -260090517;
        output[4] = -1497940;
        Sorting.radixSort(output);
        int[] answer = new int[5];
        answer[0] = -407305978;
        answer[1] = -260090517;
        answer[2] = -1497940;
        answer[3] = 612924225;
        answer[4] = 837954713;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00282() {
        TimeTicket[] output = new TimeTicket[10];
        output[0] = new TimeTicket(-355839689);
        output[1] = new TimeTicket(-648791570);
        output[2] = new TimeTicket(487260718);
        output[3] = new TimeTicket(203519323);
        output[4] = new TimeTicket(-270912220);
        output[5] = new TimeTicket(736417426);
        output[6] = new TimeTicket(-786244881);
        output[7] = new TimeTicket(257624305);
        output[8] = new TimeTicket(847797952);
        output[9] = new TimeTicket(-855527899);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[10];
        answer[0] = new TimeTicket(-855527899);
        answer[1] = new TimeTicket(-786244881);
        answer[2] = new TimeTicket(-648791570);
        answer[3] = new TimeTicket(-355839689);
        answer[4] = new TimeTicket(-270912220);
        answer[5] = new TimeTicket(203519323);
        answer[6] = new TimeTicket(257624305);
        answer[7] = new TimeTicket(487260718);
        answer[8] = new TimeTicket(736417426);
        answer[9] = new TimeTicket(847797952);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00283() {
        TimeTicket[] output = new TimeTicket[3];
        output[0] = new TimeTicket(655140476);
        output[1] = new TimeTicket(-599722025);
        output[2] = new TimeTicket(-437183349);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[3];
        answer[0] = new TimeTicket(-599722025);
        answer[1] = new TimeTicket(-437183349);
        answer[2] = new TimeTicket(655140476);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00284() {
        TimeTicket[] output = new TimeTicket[16];
        output[0] = new TimeTicket(-18942088);
        output[1] = new TimeTicket(-76961876);
        output[2] = new TimeTicket(179432723);
        output[3] = new TimeTicket(82171626);
        output[4] = new TimeTicket(-161777960);
        output[5] = new TimeTicket(61662035);
        output[6] = new TimeTicket(-495306826);
        output[7] = new TimeTicket(-46722930);
        output[8] = new TimeTicket(-23481077);
        output[9] = new TimeTicket(1023917);
        output[10] = new TimeTicket(-136912113);
        output[11] = new TimeTicket(-103865085);
        output[12] = new TimeTicket(-480406928);
        output[13] = new TimeTicket(848853628);
        output[14] = new TimeTicket(777232320);
        output[15] = new TimeTicket(836118104);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[16];
        answer[0] = new TimeTicket(-495306826);
        answer[1] = new TimeTicket(-480406928);
        answer[2] = new TimeTicket(-161777960);
        answer[3] = new TimeTicket(-136912113);
        answer[4] = new TimeTicket(-103865085);
        answer[5] = new TimeTicket(-76961876);
        answer[6] = new TimeTicket(-46722930);
        answer[7] = new TimeTicket(-23481077);
        answer[8] = new TimeTicket(-18942088);
        answer[9] = new TimeTicket(1023917);
        answer[10] = new TimeTicket(61662035);
        answer[11] = new TimeTicket(82171626);
        answer[12] = new TimeTicket(179432723);
        answer[13] = new TimeTicket(777232320);
        answer[14] = new TimeTicket(836118104);
        answer[15] = new TimeTicket(848853628);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00285() {
        TimeTicket[] output = new TimeTicket[5];
        output[0] = new TimeTicket(-786022609);
        output[1] = new TimeTicket(898465916);
        output[2] = new TimeTicket(671440391);
        output[3] = new TimeTicket(937293758);
        output[4] = new TimeTicket(-956104997);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[5];
        answer[0] = new TimeTicket(-956104997);
        answer[1] = new TimeTicket(-786022609);
        answer[2] = new TimeTicket(671440391);
        answer[3] = new TimeTicket(898465916);
        answer[4] = new TimeTicket(937293758);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00286() {
        TimeTicket[] output = new TimeTicket[6];
        output[0] = new TimeTicket(-85551919);
        output[1] = new TimeTicket(-729778425);
        output[2] = new TimeTicket(-844910792);
        output[3] = new TimeTicket(935177060);
        output[4] = new TimeTicket(295913170);
        output[5] = new TimeTicket(-855925669);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[6];
        answer[0] = new TimeTicket(-855925669);
        answer[1] = new TimeTicket(-844910792);
        answer[2] = new TimeTicket(-729778425);
        answer[3] = new TimeTicket(-85551919);
        answer[4] = new TimeTicket(295913170);
        answer[5] = new TimeTicket(935177060);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00287() {
        int[] output = new int[13];
        output[0] = -203533326;
        output[1] = -106946193;
        output[2] = 762479366;
        output[3] = 969824995;
        output[4] = -563920557;
        output[5] = 931465143;
        output[6] = -687587763;
        output[7] = -379745020;
        output[8] = -284216604;
        output[9] = -952886115;
        output[10] = -974471078;
        output[11] = 757574396;
        output[12] = 867014584;
        Sorting.radixSort(output);
        int[] answer = new int[13];
        answer[0] = -974471078;
        answer[1] = -952886115;
        answer[2] = -687587763;
        answer[3] = -563920557;
        answer[4] = -379745020;
        answer[5] = -284216604;
        answer[6] = -203533326;
        answer[7] = -106946193;
        answer[8] = 757574396;
        answer[9] = 762479366;
        answer[10] = 867014584;
        answer[11] = 931465143;
        answer[12] = 969824995;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00288() {
        TimeTicket[] output = new TimeTicket[17];
        output[0] = new TimeTicket(195663034);
        output[1] = new TimeTicket(532747412);
        output[2] = new TimeTicket(-765883600);
        output[3] = new TimeTicket(-544310202);
        output[4] = new TimeTicket(382265542);
        output[5] = new TimeTicket(-885552097);
        output[6] = new TimeTicket(-575716409);
        output[7] = new TimeTicket(80716280);
        output[8] = new TimeTicket(-15079440);
        output[9] = new TimeTicket(10112036);
        output[10] = new TimeTicket(-130798370);
        output[11] = new TimeTicket(-221626042);
        output[12] = new TimeTicket(79691869);
        output[13] = new TimeTicket(696689221);
        output[14] = new TimeTicket(-329693556);
        output[15] = new TimeTicket(260479277);
        output[16] = new TimeTicket(48079024);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[17];
        answer[0] = new TimeTicket(-885552097);
        answer[1] = new TimeTicket(-765883600);
        answer[2] = new TimeTicket(-575716409);
        answer[3] = new TimeTicket(-544310202);
        answer[4] = new TimeTicket(-329693556);
        answer[5] = new TimeTicket(-221626042);
        answer[6] = new TimeTicket(-130798370);
        answer[7] = new TimeTicket(-15079440);
        answer[8] = new TimeTicket(10112036);
        answer[9] = new TimeTicket(48079024);
        answer[10] = new TimeTicket(79691869);
        answer[11] = new TimeTicket(80716280);
        answer[12] = new TimeTicket(195663034);
        answer[13] = new TimeTicket(260479277);
        answer[14] = new TimeTicket(382265542);
        answer[15] = new TimeTicket(532747412);
        answer[16] = new TimeTicket(696689221);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00289() {
        TimeTicket[] output = new TimeTicket[19];
        output[0] = new TimeTicket(-740340482);
        output[1] = new TimeTicket(-327771579);
        output[2] = new TimeTicket(-419528179);
        output[3] = new TimeTicket(-873800959);
        output[4] = new TimeTicket(-218490240);
        output[5] = new TimeTicket(-93707143);
        output[6] = new TimeTicket(-694572197);
        output[7] = new TimeTicket(71851023);
        output[8] = new TimeTicket(-684507663);
        output[9] = new TimeTicket(-217398523);
        output[10] = new TimeTicket(-849007587);
        output[11] = new TimeTicket(-545274067);
        output[12] = new TimeTicket(-513994515);
        output[13] = new TimeTicket(-640646852);
        output[14] = new TimeTicket(77585622);
        output[15] = new TimeTicket(-235346551);
        output[16] = new TimeTicket(644248491);
        output[17] = new TimeTicket(425668836);
        output[18] = new TimeTicket(-670191889);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[19];
        answer[0] = new TimeTicket(-873800959);
        answer[1] = new TimeTicket(-849007587);
        answer[2] = new TimeTicket(-740340482);
        answer[3] = new TimeTicket(-694572197);
        answer[4] = new TimeTicket(-684507663);
        answer[5] = new TimeTicket(-670191889);
        answer[6] = new TimeTicket(-640646852);
        answer[7] = new TimeTicket(-545274067);
        answer[8] = new TimeTicket(-513994515);
        answer[9] = new TimeTicket(-419528179);
        answer[10] = new TimeTicket(-327771579);
        answer[11] = new TimeTicket(-235346551);
        answer[12] = new TimeTicket(-218490240);
        answer[13] = new TimeTicket(-217398523);
        answer[14] = new TimeTicket(-93707143);
        answer[15] = new TimeTicket(71851023);
        answer[16] = new TimeTicket(77585622);
        answer[17] = new TimeTicket(425668836);
        answer[18] = new TimeTicket(644248491);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00290() {
        TimeTicket[] output = new TimeTicket[26];
        output[0] = new TimeTicket(-473182871);
        output[1] = new TimeTicket(-512331963);
        output[2] = new TimeTicket(-446819376);
        output[3] = new TimeTicket(-898828720);
        output[4] = new TimeTicket(-607076453);
        output[5] = new TimeTicket(-9846343);
        output[6] = new TimeTicket(-385514005);
        output[7] = new TimeTicket(-107915872);
        output[8] = new TimeTicket(540279587);
        output[9] = new TimeTicket(-831553056);
        output[10] = new TimeTicket(-832011205);
        output[11] = new TimeTicket(630362498);
        output[12] = new TimeTicket(-843587430);
        output[13] = new TimeTicket(-698110506);
        output[14] = new TimeTicket(-108641741);
        output[15] = new TimeTicket(283111219);
        output[16] = new TimeTicket(479491214);
        output[17] = new TimeTicket(861455639);
        output[18] = new TimeTicket(-32261332);
        output[19] = new TimeTicket(-852547984);
        output[20] = new TimeTicket(-217487444);
        output[21] = new TimeTicket(-714404957);
        output[22] = new TimeTicket(-894711484);
        output[23] = new TimeTicket(663904937);
        output[24] = new TimeTicket(200734688);
        output[25] = new TimeTicket(-853554500);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[26];
        answer[0] = new TimeTicket(-898828720);
        answer[1] = new TimeTicket(-894711484);
        answer[2] = new TimeTicket(-853554500);
        answer[3] = new TimeTicket(-852547984);
        answer[4] = new TimeTicket(-843587430);
        answer[5] = new TimeTicket(-832011205);
        answer[6] = new TimeTicket(-831553056);
        answer[7] = new TimeTicket(-714404957);
        answer[8] = new TimeTicket(-698110506);
        answer[9] = new TimeTicket(-607076453);
        answer[10] = new TimeTicket(-512331963);
        answer[11] = new TimeTicket(-473182871);
        answer[12] = new TimeTicket(-446819376);
        answer[13] = new TimeTicket(-385514005);
        answer[14] = new TimeTicket(-217487444);
        answer[15] = new TimeTicket(-108641741);
        answer[16] = new TimeTicket(-107915872);
        answer[17] = new TimeTicket(-32261332);
        answer[18] = new TimeTicket(-9846343);
        answer[19] = new TimeTicket(200734688);
        answer[20] = new TimeTicket(283111219);
        answer[21] = new TimeTicket(479491214);
        answer[22] = new TimeTicket(540279587);
        answer[23] = new TimeTicket(630362498);
        answer[24] = new TimeTicket(663904937);
        answer[25] = new TimeTicket(861455639);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00291() {
        TimeTicket[] output = new TimeTicket[8];
        output[0] = new TimeTicket(383441185);
        output[1] = new TimeTicket(768572830);
        output[2] = new TimeTicket(-182823280);
        output[3] = new TimeTicket(873204377);
        output[4] = new TimeTicket(53722353);
        output[5] = new TimeTicket(354273268);
        output[6] = new TimeTicket(459856562);
        output[7] = new TimeTicket(61419733);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[8];
        answer[0] = new TimeTicket(-182823280);
        answer[1] = new TimeTicket(53722353);
        answer[2] = new TimeTicket(61419733);
        answer[3] = new TimeTicket(354273268);
        answer[4] = new TimeTicket(383441185);
        answer[5] = new TimeTicket(459856562);
        answer[6] = new TimeTicket(768572830);
        answer[7] = new TimeTicket(873204377);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00292() {
        TimeTicket[] output = new TimeTicket[23];
        output[0] = new TimeTicket(-306226690);
        output[1] = new TimeTicket(-15766303);
        output[2] = new TimeTicket(647079603);
        output[3] = new TimeTicket(877640218);
        output[4] = new TimeTicket(438886555);
        output[5] = new TimeTicket(482781793);
        output[6] = new TimeTicket(752001918);
        output[7] = new TimeTicket(89799386);
        output[8] = new TimeTicket(-927123678);
        output[9] = new TimeTicket(177045680);
        output[10] = new TimeTicket(-316759861);
        output[11] = new TimeTicket(48995912);
        output[12] = new TimeTicket(-76672594);
        output[13] = new TimeTicket(-914739985);
        output[14] = new TimeTicket(-758089787);
        output[15] = new TimeTicket(-709190872);
        output[16] = new TimeTicket(755287786);
        output[17] = new TimeTicket(986755930);
        output[18] = new TimeTicket(-315375010);
        output[19] = new TimeTicket(-846527697);
        output[20] = new TimeTicket(-858235693);
        output[21] = new TimeTicket(-945413393);
        output[22] = new TimeTicket(-587660879);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[23];
        answer[0] = new TimeTicket(-945413393);
        answer[1] = new TimeTicket(-927123678);
        answer[2] = new TimeTicket(-914739985);
        answer[3] = new TimeTicket(-858235693);
        answer[4] = new TimeTicket(-846527697);
        answer[5] = new TimeTicket(-758089787);
        answer[6] = new TimeTicket(-709190872);
        answer[7] = new TimeTicket(-587660879);
        answer[8] = new TimeTicket(-316759861);
        answer[9] = new TimeTicket(-315375010);
        answer[10] = new TimeTicket(-306226690);
        answer[11] = new TimeTicket(-76672594);
        answer[12] = new TimeTicket(-15766303);
        answer[13] = new TimeTicket(48995912);
        answer[14] = new TimeTicket(89799386);
        answer[15] = new TimeTicket(177045680);
        answer[16] = new TimeTicket(438886555);
        answer[17] = new TimeTicket(482781793);
        answer[18] = new TimeTicket(647079603);
        answer[19] = new TimeTicket(752001918);
        answer[20] = new TimeTicket(755287786);
        answer[21] = new TimeTicket(877640218);
        answer[22] = new TimeTicket(986755930);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00293() {
        int[] output = new int[2];
        output[0] = 28442697;
        output[1] = -971105570;
        Sorting.radixSort(output);
        int[] answer = new int[2];
        answer[0] = -971105570;
        answer[1] = 28442697;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00294() {
        TimeTicket[] output = new TimeTicket[15];
        output[0] = new TimeTicket(226004171);
        output[1] = new TimeTicket(641686643);
        output[2] = new TimeTicket(813334744);
        output[3] = new TimeTicket(835187729);
        output[4] = new TimeTicket(-196092859);
        output[5] = new TimeTicket(186178268);
        output[6] = new TimeTicket(-230606113);
        output[7] = new TimeTicket(385428855);
        output[8] = new TimeTicket(157309922);
        output[9] = new TimeTicket(-414150825);
        output[10] = new TimeTicket(-26856924);
        output[11] = new TimeTicket(-121964340);
        output[12] = new TimeTicket(-415422231);
        output[13] = new TimeTicket(190577196);
        output[14] = new TimeTicket(94940974);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[15];
        answer[0] = new TimeTicket(-415422231);
        answer[1] = new TimeTicket(-414150825);
        answer[2] = new TimeTicket(-230606113);
        answer[3] = new TimeTicket(-196092859);
        answer[4] = new TimeTicket(-121964340);
        answer[5] = new TimeTicket(-26856924);
        answer[6] = new TimeTicket(94940974);
        answer[7] = new TimeTicket(157309922);
        answer[8] = new TimeTicket(186178268);
        answer[9] = new TimeTicket(190577196);
        answer[10] = new TimeTicket(226004171);
        answer[11] = new TimeTicket(385428855);
        answer[12] = new TimeTicket(641686643);
        answer[13] = new TimeTicket(813334744);
        answer[14] = new TimeTicket(835187729);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00295() {
        TimeTicket[] output = new TimeTicket[13];
        output[0] = new TimeTicket(-371912899);
        output[1] = new TimeTicket(557355815);
        output[2] = new TimeTicket(244451838);
        output[3] = new TimeTicket(167614524);
        output[4] = new TimeTicket(-605522455);
        output[5] = new TimeTicket(-170134111);
        output[6] = new TimeTicket(-700399395);
        output[7] = new TimeTicket(812345930);
        output[8] = new TimeTicket(-802390228);
        output[9] = new TimeTicket(-65830091);
        output[10] = new TimeTicket(-824793819);
        output[11] = new TimeTicket(-650515657);
        output[12] = new TimeTicket(755449427);
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[13];
        answer[0] = new TimeTicket(-824793819);
        answer[1] = new TimeTicket(-802390228);
        answer[2] = new TimeTicket(-700399395);
        answer[3] = new TimeTicket(-650515657);
        answer[4] = new TimeTicket(-605522455);
        answer[5] = new TimeTicket(-371912899);
        answer[6] = new TimeTicket(-170134111);
        answer[7] = new TimeTicket(-65830091);
        answer[8] = new TimeTicket(167614524);
        answer[9] = new TimeTicket(244451838);
        answer[10] = new TimeTicket(557355815);
        answer[11] = new TimeTicket(755449427);
        answer[12] = new TimeTicket(812345930);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00296() {
        TimeTicket[] output = new TimeTicket[6];
        output[0] = new TimeTicket(901428108);
        output[1] = new TimeTicket(-373456283);
        output[2] = new TimeTicket(-239430020);
        output[3] = new TimeTicket(835457679);
        output[4] = new TimeTicket(392739086);
        output[5] = new TimeTicket(481353004);
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[6];
        answer[0] = new TimeTicket(-373456283);
        answer[1] = new TimeTicket(-239430020);
        answer[2] = new TimeTicket(392739086);
        answer[3] = new TimeTicket(481353004);
        answer[4] = new TimeTicket(835457679);
        answer[5] = new TimeTicket(901428108);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00297() {
        TimeTicket[] output = new TimeTicket[18];
        output[0] = new TimeTicket(-872606481);
        output[1] = new TimeTicket(-231148211);
        output[2] = new TimeTicket(184028275);
        output[3] = new TimeTicket(842819855);
        output[4] = new TimeTicket(137831522);
        output[5] = new TimeTicket(467702851);
        output[6] = new TimeTicket(-443021157);
        output[7] = new TimeTicket(505888376);
        output[8] = new TimeTicket(56647238);
        output[9] = new TimeTicket(-839536218);
        output[10] = new TimeTicket(-390410443);
        output[11] = new TimeTicket(301106585);
        output[12] = new TimeTicket(399952247);
        output[13] = new TimeTicket(4180552);
        output[14] = new TimeTicket(824566476);
        output[15] = new TimeTicket(230962138);
        output[16] = new TimeTicket(-976765070);
        output[17] = new TimeTicket(118430742);
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[18];
        answer[0] = new TimeTicket(-976765070);
        answer[1] = new TimeTicket(-872606481);
        answer[2] = new TimeTicket(-839536218);
        answer[3] = new TimeTicket(-443021157);
        answer[4] = new TimeTicket(-390410443);
        answer[5] = new TimeTicket(-231148211);
        answer[6] = new TimeTicket(4180552);
        answer[7] = new TimeTicket(56647238);
        answer[8] = new TimeTicket(118430742);
        answer[9] = new TimeTicket(137831522);
        answer[10] = new TimeTicket(184028275);
        answer[11] = new TimeTicket(230962138);
        answer[12] = new TimeTicket(301106585);
        answer[13] = new TimeTicket(399952247);
        answer[14] = new TimeTicket(467702851);
        answer[15] = new TimeTicket(505888376);
        answer[16] = new TimeTicket(824566476);
        answer[17] = new TimeTicket(842819855);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00298() {
        TimeTicket[] output = new TimeTicket[1];
        output[0] = new TimeTicket(766164845);
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[1];
        answer[0] = new TimeTicket(766164845);
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00299() {
        int[] output = new int[13];
        output[0] = 204164287;
        output[1] = 874694881;
        output[2] = -193394323;
        output[3] = -45534760;
        output[4] = 626066377;
        output[5] = 298265295;
        output[6] = 702947040;
        output[7] = -768207554;
        output[8] = -355487776;
        output[9] = 954509863;
        output[10] = 607786999;
        output[11] = -96575572;
        output[12] = -585634553;
        Sorting.radixSort(output);
        int[] answer = new int[13];
        answer[0] = -768207554;
        answer[1] = -585634553;
        answer[2] = -355487776;
        answer[3] = -193394323;
        answer[4] = -96575572;
        answer[5] = -45534760;
        answer[6] = 204164287;
        answer[7] = 298265295;
        answer[8] = 607786999;
        answer[9] = 626066377;
        answer[10] = 702947040;
        answer[11] = 874694881;
        answer[12] = 954509863;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00300() {
        TimeTicket[] output = new TimeTicket[27];
        output[0] = new TimeTicket(-232162874);
        output[1] = new TimeTicket(7726696);
        output[2] = new TimeTicket(691845888);
        output[3] = new TimeTicket(118773857);
        output[4] = new TimeTicket(557666971);
        output[5] = new TimeTicket(-62288783);
        output[6] = new TimeTicket(-593324751);
        output[7] = new TimeTicket(-160287788);
        output[8] = new TimeTicket(521939429);
        output[9] = new TimeTicket(75950395);
        output[10] = new TimeTicket(76401493);
        output[11] = new TimeTicket(-474007184);
        output[12] = new TimeTicket(482831148);
        output[13] = new TimeTicket(854079989);
        output[14] = new TimeTicket(-396722837);
        output[15] = new TimeTicket(-348680109);
        output[16] = new TimeTicket(967536635);
        output[17] = new TimeTicket(965767799);
        output[18] = new TimeTicket(-608854995);
        output[19] = new TimeTicket(734908722);
        output[20] = new TimeTicket(672892029);
        output[21] = new TimeTicket(637788722);
        output[22] = new TimeTicket(-706254679);
        output[23] = new TimeTicket(40645069);
        output[24] = new TimeTicket(327902131);
        output[25] = new TimeTicket(-391565696);
        output[26] = new TimeTicket(212425109);
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[27];
        answer[0] = new TimeTicket(-706254679);
        answer[1] = new TimeTicket(-608854995);
        answer[2] = new TimeTicket(-593324751);
        answer[3] = new TimeTicket(-474007184);
        answer[4] = new TimeTicket(-396722837);
        answer[5] = new TimeTicket(-391565696);
        answer[6] = new TimeTicket(-348680109);
        answer[7] = new TimeTicket(-232162874);
        answer[8] = new TimeTicket(-160287788);
        answer[9] = new TimeTicket(-62288783);
        answer[10] = new TimeTicket(7726696);
        answer[11] = new TimeTicket(40645069);
        answer[12] = new TimeTicket(75950395);
        answer[13] = new TimeTicket(76401493);
        answer[14] = new TimeTicket(118773857);
        answer[15] = new TimeTicket(212425109);
        answer[16] = new TimeTicket(327902131);
        answer[17] = new TimeTicket(482831148);
        answer[18] = new TimeTicket(521939429);
        answer[19] = new TimeTicket(557666971);
        answer[20] = new TimeTicket(637788722);
        answer[21] = new TimeTicket(672892029);
        answer[22] = new TimeTicket(691845888);
        answer[23] = new TimeTicket(734908722);
        answer[24] = new TimeTicket(854079989);
        answer[25] = new TimeTicket(965767799);
        answer[26] = new TimeTicket(967536635);
        assertArrayEquals(answer, output);
    }
}