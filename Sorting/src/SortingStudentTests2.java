import org.junit.Before;
import org.junit.Test;
import java.util.Comparator;
import java.util.Random;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertTrue;
/**
 * Junghyun Kim's JUNIT on HW 7
 * @Version 1.0
 */
public class SortingStudentTests2 {
    private static final int TIMEOUT = 200;
    class TimeTicket {
        int val;
        public boolean equals(Object d) {
            return val == ((TimeTicket)d).val;
        }
        public int compareTo(TimeTicket a) {
            return val - a.val;
        }
    }
    class IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600 implements Comparator<TimeTicket> {
        public int compare(TimeTicket a, TimeTicket b) {
            return a.val - b.val;
        }
    }    @Test(timeout = TIMEOUT)
         public void test_00001() {
        TimeTicket[] output = new TimeTicket[3];
        output[0].val = 89;
        output[1].val = -75;
        output[2].val = -26;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[3];
        answer[0].val = -75;
        answer[1].val = -26;
        answer[2].val = 89;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00002() {
        TimeTicket[] output = new TimeTicket[18];
        output[0].val = 53;
        output[1].val = 95;
        output[2].val = 74;
        output[3].val = 40;
        output[4].val = 97;
        output[5].val = 84;
        output[6].val = 73;
        output[7].val = 86;
        output[8].val = -13;
        output[9].val = 61;
        output[10].val = 41;
        output[11].val = 82;
        output[12].val = -12;
        output[13].val = -82;
        output[14].val = 17;
        output[15].val = 49;
        output[16].val = -92;
        output[17].val = 69;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[18];
        answer[0].val = -92;
        answer[1].val = -82;
        answer[2].val = -13;
        answer[3].val = -12;
        answer[4].val = 17;
        answer[5].val = 40;
        answer[6].val = 41;
        answer[7].val = 49;
        answer[8].val = 53;
        answer[9].val = 61;
        answer[10].val = 69;
        answer[11].val = 73;
        answer[12].val = 74;
        answer[13].val = 82;
        answer[14].val = 84;
        answer[15].val = 86;
        answer[16].val = 95;
        answer[17].val = 97;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00003() {
        TimeTicket[] output = new TimeTicket[3];
        output[0].val = 67;
        output[1].val = 49;
        output[2].val = -83;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[3];
        answer[0].val = -83;
        answer[1].val = 49;
        answer[2].val = 67;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00004() {
        TimeTicket[] output = new TimeTicket[29];
        output[0].val = 52;
        output[1].val = -8;
        output[2].val = -30;
        output[3].val = -89;
        output[4].val = 49;
        output[5].val = 32;
        output[6].val = 41;
        output[7].val = 38;
        output[8].val = -90;
        output[9].val = -84;
        output[10].val = 55;
        output[11].val = 4;
        output[12].val = 31;
        output[13].val = -19;
        output[14].val = 6;
        output[15].val = 0;
        output[16].val = 54;
        output[17].val = -7;
        output[18].val = -21;
        output[19].val = 50;
        output[20].val = -62;
        output[21].val = 65;
        output[22].val = 23;
        output[23].val = -79;
        output[24].val = 57;
        output[25].val = -67;
        output[26].val = 10;
        output[27].val = 55;
        output[28].val = 48;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[29];
        answer[0].val = -90;
        answer[1].val = -89;
        answer[2].val = -84;
        answer[3].val = -79;
        answer[4].val = -67;
        answer[5].val = -62;
        answer[6].val = -30;
        answer[7].val = -21;
        answer[8].val = -19;
        answer[9].val = -8;
        answer[10].val = -7;
        answer[11].val = 0;
        answer[12].val = 4;
        answer[13].val = 6;
        answer[14].val = 10;
        answer[15].val = 23;
        answer[16].val = 31;
        answer[17].val = 32;
        answer[18].val = 38;
        answer[19].val = 41;
        answer[20].val = 48;
        answer[21].val = 49;
        answer[22].val = 50;
        answer[23].val = 52;
        answer[24].val = 54;
        answer[25].val = 55;
        answer[26].val = 55;
        answer[27].val = 57;
        answer[28].val = 65;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00005() {
        int[] output = new int[3];
        output[0] = 22;
        output[1] = 5;
        output[2] = -21;
        Sorting.radixSort(output);
        int[] answer = new int[3];
        answer[0] = -21;
        answer[1] = 5;
        answer[2] = 22;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00006() {
        TimeTicket[] output = new TimeTicket[29];
        output[0].val = 4;
        output[1].val = 79;
        output[2].val = 81;
        output[3].val = 47;
        output[4].val = -36;
        output[5].val = -83;
        output[6].val = -34;
        output[7].val = 35;
        output[8].val = -13;
        output[9].val = 99;
        output[10].val = -86;
        output[11].val = 41;
        output[12].val = 72;
        output[13].val = -68;
        output[14].val = -19;
        output[15].val = -13;
        output[16].val = 78;
        output[17].val = -87;
        output[18].val = -8;
        output[19].val = 41;
        output[20].val = 67;
        output[21].val = 75;
        output[22].val = 80;
        output[23].val = -60;
        output[24].val = -31;
        output[25].val = -24;
        output[26].val = 24;
        output[27].val = -20;
        output[28].val = 54;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[29];
        answer[0].val = -87;
        answer[1].val = -86;
        answer[2].val = -83;
        answer[3].val = -68;
        answer[4].val = -60;
        answer[5].val = -36;
        answer[6].val = -34;
        answer[7].val = -31;
        answer[8].val = -24;
        answer[9].val = -20;
        answer[10].val = -19;
        answer[11].val = -13;
        answer[12].val = -13;
        answer[13].val = -8;
        answer[14].val = 4;
        answer[15].val = 24;
        answer[16].val = 35;
        answer[17].val = 41;
        answer[18].val = 41;
        answer[19].val = 47;
        answer[20].val = 54;
        answer[21].val = 67;
        answer[22].val = 72;
        answer[23].val = 75;
        answer[24].val = 78;
        answer[25].val = 79;
        answer[26].val = 80;
        answer[27].val = 81;
        answer[28].val = 99;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00007() {
        TimeTicket[] output = new TimeTicket[26];
        output[0].val = 16;
        output[1].val = 83;
        output[2].val = -47;
        output[3].val = -11;
        output[4].val = 57;
        output[5].val = 14;
        output[6].val = -92;
        output[7].val = 57;
        output[8].val = 20;
        output[9].val = -70;
        output[10].val = 89;
        output[11].val = -33;
        output[12].val = -49;
        output[13].val = 84;
        output[14].val = -70;
        output[15].val = -5;
        output[16].val = -72;
        output[17].val = 69;
        output[18].val = -95;
        output[19].val = 65;
        output[20].val = 31;
        output[21].val = -11;
        output[22].val = 19;
        output[23].val = 95;
        output[24].val = 29;
        output[25].val = 16;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[26];
        answer[0].val = -95;
        answer[1].val = -92;
        answer[2].val = -72;
        answer[3].val = -70;
        answer[4].val = -70;
        answer[5].val = -49;
        answer[6].val = -47;
        answer[7].val = -33;
        answer[8].val = -11;
        answer[9].val = -11;
        answer[10].val = -5;
        answer[11].val = 14;
        answer[12].val = 16;
        answer[13].val = 16;
        answer[14].val = 19;
        answer[15].val = 20;
        answer[16].val = 29;
        answer[17].val = 31;
        answer[18].val = 57;
        answer[19].val = 57;
        answer[20].val = 65;
        answer[21].val = 69;
        answer[22].val = 83;
        answer[23].val = 84;
        answer[24].val = 89;
        answer[25].val = 95;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00008() {
        TimeTicket[] output = new TimeTicket[3];
        output[0].val = -92;
        output[1].val = 25;
        output[2].val = 81;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[3];
        answer[0].val = -92;
        answer[1].val = 25;
        answer[2].val = 81;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00009() {
        TimeTicket[] output = new TimeTicket[10];
        output[0].val = -32;
        output[1].val = -61;
        output[2].val = -67;
        output[3].val = 57;
        output[4].val = 42;
        output[5].val = -70;
        output[6].val = 65;
        output[7].val = 7;
        output[8].val = -49;
        output[9].val = -53;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[10];
        answer[0].val = -70;
        answer[1].val = -67;
        answer[2].val = -61;
        answer[3].val = -53;
        answer[4].val = -49;
        answer[5].val = -32;
        answer[6].val = 7;
        answer[7].val = 42;
        answer[8].val = 57;
        answer[9].val = 65;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00010() {
        TimeTicket[] output = new TimeTicket[13];
        output[0].val = -25;
        output[1].val = 95;
        output[2].val = -63;
        output[3].val = -10;
        output[4].val = -53;
        output[5].val = 24;
        output[6].val = 32;
        output[7].val = 94;
        output[8].val = -13;
        output[9].val = -63;
        output[10].val = 62;
        output[11].val = -68;
        output[12].val = -34;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[13];
        answer[0].val = -68;
        answer[1].val = -63;
        answer[2].val = -63;
        answer[3].val = -53;
        answer[4].val = -34;
        answer[5].val = -25;
        answer[6].val = -13;
        answer[7].val = -10;
        answer[8].val = 24;
        answer[9].val = 32;
        answer[10].val = 62;
        answer[11].val = 94;
        answer[12].val = 95;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00011() {
        int[] output = new int[17];
        output[0] = 19;
        output[1] = -79;
        output[2] = 34;
        output[3] = -83;
        output[4] = -97;
        output[5] = -42;
        output[6] = 68;
        output[7] = -11;
        output[8] = -10;
        output[9] = 97;
        output[10] = -27;
        output[11] = -22;
        output[12] = -19;
        output[13] = -88;
        output[14] = 26;
        output[15] = 99;
        output[16] = 12;
        Sorting.radixSort(output);
        int[] answer = new int[17];
        answer[0] = -97;
        answer[1] = -88;
        answer[2] = -83;
        answer[3] = -79;
        answer[4] = -42;
        answer[5] = -27;
        answer[6] = -22;
        answer[7] = -19;
        answer[8] = -11;
        answer[9] = -10;
        answer[10] = 12;
        answer[11] = 19;
        answer[12] = 26;
        answer[13] = 34;
        answer[14] = 68;
        answer[15] = 97;
        answer[16] = 99;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00012() {
        TimeTicket[] output = new TimeTicket[2];
        output[0].val = -1;
        output[1].val = 34;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[2];
        answer[0].val = -1;
        answer[1].val = 34;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00013() {
        TimeTicket[] output = new TimeTicket[10];
        output[0].val = -75;
        output[1].val = 29;
        output[2].val = 27;
        output[3].val = 22;
        output[4].val = 17;
        output[5].val = -90;
        output[6].val = 4;
        output[7].val = 53;
        output[8].val = -30;
        output[9].val = 44;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[10];
        answer[0].val = -90;
        answer[1].val = -75;
        answer[2].val = -30;
        answer[3].val = 4;
        answer[4].val = 17;
        answer[5].val = 22;
        answer[6].val = 27;
        answer[7].val = 29;
        answer[8].val = 44;
        answer[9].val = 53;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00014() {
        TimeTicket[] output = new TimeTicket[17];
        output[0].val = -80;
        output[1].val = 41;
        output[2].val = -39;
        output[3].val = 65;
        output[4].val = -71;
        output[5].val = 41;
        output[6].val = -41;
        output[7].val = 77;
        output[8].val = 40;
        output[9].val = -50;
        output[10].val = -58;
        output[11].val = -34;
        output[12].val = -64;
        output[13].val = -23;
        output[14].val = 64;
        output[15].val = 66;
        output[16].val = 61;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[17];
        answer[0].val = -80;
        answer[1].val = -71;
        answer[2].val = -64;
        answer[3].val = -58;
        answer[4].val = -50;
        answer[5].val = -41;
        answer[6].val = -39;
        answer[7].val = -34;
        answer[8].val = -23;
        answer[9].val = 40;
        answer[10].val = 41;
        answer[11].val = 41;
        answer[12].val = 61;
        answer[13].val = 64;
        answer[14].val = 65;
        answer[15].val = 66;
        answer[16].val = 77;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00015() {
        TimeTicket[] output = new TimeTicket[4];
        output[0].val = 31;
        output[1].val = 80;
        output[2].val = -5;
        output[3].val = -55;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[4];
        answer[0].val = -55;
        answer[1].val = -5;
        answer[2].val = 31;
        answer[3].val = 80;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00016() {
        TimeTicket[] output = new TimeTicket[21];
        output[0].val = -6;
        output[1].val = -41;
        output[2].val = 39;
        output[3].val = -15;
        output[4].val = -90;
        output[5].val = 4;
        output[6].val = -85;
        output[7].val = 15;
        output[8].val = 57;
        output[9].val = 56;
        output[10].val = -60;
        output[11].val = -95;
        output[12].val = 63;
        output[13].val = 25;
        output[14].val = 10;
        output[15].val = -39;
        output[16].val = -70;
        output[17].val = 99;
        output[18].val = -36;
        output[19].val = 6;
        output[20].val = 40;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[21];
        answer[0].val = -95;
        answer[1].val = -90;
        answer[2].val = -85;
        answer[3].val = -70;
        answer[4].val = -60;
        answer[5].val = -41;
        answer[6].val = -39;
        answer[7].val = -36;
        answer[8].val = -15;
        answer[9].val = -6;
        answer[10].val = 4;
        answer[11].val = 6;
        answer[12].val = 10;
        answer[13].val = 15;
        answer[14].val = 25;
        answer[15].val = 39;
        answer[16].val = 40;
        answer[17].val = 56;
        answer[18].val = 57;
        answer[19].val = 63;
        answer[20].val = 99;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00017() {
        int[] output = new int[2];
        output[0] = 35;
        output[1] = -6;
        Sorting.radixSort(output);
        int[] answer = new int[2];
        answer[0] = -6;
        answer[1] = 35;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00018() {
        TimeTicket[] output = new TimeTicket[21];
        output[0].val = 87;
        output[1].val = 79;
        output[2].val = -99;
        output[3].val = -85;
        output[4].val = 44;
        output[5].val = -49;
        output[6].val = -32;
        output[7].val = 69;
        output[8].val = -94;
        output[9].val = 40;
        output[10].val = 96;
        output[11].val = 37;
        output[12].val = 0;
        output[13].val = -16;
        output[14].val = 49;
        output[15].val = 95;
        output[16].val = -36;
        output[17].val = 63;
        output[18].val = 88;
        output[19].val = -64;
        output[20].val = 99;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[21];
        answer[0].val = -99;
        answer[1].val = -94;
        answer[2].val = -85;
        answer[3].val = -64;
        answer[4].val = -49;
        answer[5].val = -36;
        answer[6].val = -32;
        answer[7].val = -16;
        answer[8].val = 0;
        answer[9].val = 37;
        answer[10].val = 40;
        answer[11].val = 44;
        answer[12].val = 49;
        answer[13].val = 63;
        answer[14].val = 69;
        answer[15].val = 79;
        answer[16].val = 87;
        answer[17].val = 88;
        answer[18].val = 95;
        answer[19].val = 96;
        answer[20].val = 99;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00019() {
        TimeTicket[] output = new TimeTicket[10];
        output[0].val = 14;
        output[1].val = -2;
        output[2].val = 68;
        output[3].val = 76;
        output[4].val = 37;
        output[5].val = -27;
        output[6].val = 93;
        output[7].val = -19;
        output[8].val = 43;
        output[9].val = 51;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[10];
        answer[0].val = -27;
        answer[1].val = -19;
        answer[2].val = -2;
        answer[3].val = 14;
        answer[4].val = 37;
        answer[5].val = 43;
        answer[6].val = 51;
        answer[7].val = 68;
        answer[8].val = 76;
        answer[9].val = 93;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00020() {
        TimeTicket[] output = new TimeTicket[27];
        output[0].val = 47;
        output[1].val = 40;
        output[2].val = 93;
        output[3].val = -26;
        output[4].val = -91;
        output[5].val = 89;
        output[6].val = -43;
        output[7].val = -69;
        output[8].val = 43;
        output[9].val = -44;
        output[10].val = -1;
        output[11].val = -99;
        output[12].val = -86;
        output[13].val = 21;
        output[14].val = -84;
        output[15].val = -36;
        output[16].val = -85;
        output[17].val = 65;
        output[18].val = -25;
        output[19].val = -79;
        output[20].val = 38;
        output[21].val = -8;
        output[22].val = -15;
        output[23].val = -50;
        output[24].val = 26;
        output[25].val = 86;
        output[26].val = 41;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[27];
        answer[0].val = -99;
        answer[1].val = -91;
        answer[2].val = -86;
        answer[3].val = -85;
        answer[4].val = -84;
        answer[5].val = -79;
        answer[6].val = -69;
        answer[7].val = -50;
        answer[8].val = -44;
        answer[9].val = -43;
        answer[10].val = -36;
        answer[11].val = -26;
        answer[12].val = -25;
        answer[13].val = -15;
        answer[14].val = -8;
        answer[15].val = -1;
        answer[16].val = 21;
        answer[17].val = 26;
        answer[18].val = 38;
        answer[19].val = 40;
        answer[20].val = 41;
        answer[21].val = 43;
        answer[22].val = 47;
        answer[23].val = 65;
        answer[24].val = 86;
        answer[25].val = 89;
        answer[26].val = 93;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00021() {
        TimeTicket[] output = new TimeTicket[7];
        output[0].val = 79;
        output[1].val = -42;
        output[2].val = -97;
        output[3].val = -76;
        output[4].val = -45;
        output[5].val = -69;
        output[6].val = 93;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[7];
        answer[0].val = -97;
        answer[1].val = -76;
        answer[2].val = -69;
        answer[3].val = -45;
        answer[4].val = -42;
        answer[5].val = 79;
        answer[6].val = 93;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00022() {
        TimeTicket[] output = new TimeTicket[22];
        output[0].val = 18;
        output[1].val = 75;
        output[2].val = 18;
        output[3].val = -80;
        output[4].val = -43;
        output[5].val = 77;
        output[6].val = 94;
        output[7].val = -22;
        output[8].val = 43;
        output[9].val = 74;
        output[10].val = 2;
        output[11].val = 10;
        output[12].val = 46;
        output[13].val = 80;
        output[14].val = 65;
        output[15].val = -88;
        output[16].val = 21;
        output[17].val = 42;
        output[18].val = -64;
        output[19].val = -37;
        output[20].val = 10;
        output[21].val = 5;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[22];
        answer[0].val = -88;
        answer[1].val = -80;
        answer[2].val = -64;
        answer[3].val = -43;
        answer[4].val = -37;
        answer[5].val = -22;
        answer[6].val = 2;
        answer[7].val = 5;
        answer[8].val = 10;
        answer[9].val = 10;
        answer[10].val = 18;
        answer[11].val = 18;
        answer[12].val = 21;
        answer[13].val = 42;
        answer[14].val = 43;
        answer[15].val = 46;
        answer[16].val = 65;
        answer[17].val = 74;
        answer[18].val = 75;
        answer[19].val = 77;
        answer[20].val = 80;
        answer[21].val = 94;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00023() {
        int[] output = new int[3];
        output[0] = -45;
        output[1] = -23;
        output[2] = -51;
        Sorting.radixSort(output);
        int[] answer = new int[3];
        answer[0] = -51;
        answer[1] = -45;
        answer[2] = -23;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00024() {
        TimeTicket[] output = new TimeTicket[5];
        output[0].val = -84;
        output[1].val = 25;
        output[2].val = -58;
        output[3].val = 89;
        output[4].val = 60;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[5];
        answer[0].val = -84;
        answer[1].val = -58;
        answer[2].val = 25;
        answer[3].val = 60;
        answer[4].val = 89;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00025() {
        TimeTicket[] output = new TimeTicket[24];
        output[0].val = 82;
        output[1].val = 79;
        output[2].val = -17;
        output[3].val = 45;
        output[4].val = 90;
        output[5].val = -34;
        output[6].val = -18;
        output[7].val = -95;
        output[8].val = -70;
        output[9].val = -49;
        output[10].val = 29;
        output[11].val = 73;
        output[12].val = -18;
        output[13].val = 5;
        output[14].val = -65;
        output[15].val = 10;
        output[16].val = -10;
        output[17].val = 48;
        output[18].val = -96;
        output[19].val = -23;
        output[20].val = -97;
        output[21].val = 85;
        output[22].val = -18;
        output[23].val = 0;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[24];
        answer[0].val = -97;
        answer[1].val = -96;
        answer[2].val = -95;
        answer[3].val = -70;
        answer[4].val = -65;
        answer[5].val = -49;
        answer[6].val = -34;
        answer[7].val = -23;
        answer[8].val = -18;
        answer[9].val = -18;
        answer[10].val = -18;
        answer[11].val = -17;
        answer[12].val = -10;
        answer[13].val = 0;
        answer[14].val = 5;
        answer[15].val = 10;
        answer[16].val = 29;
        answer[17].val = 45;
        answer[18].val = 48;
        answer[19].val = 73;
        answer[20].val = 79;
        answer[21].val = 82;
        answer[22].val = 85;
        answer[23].val = 90;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00026() {
        TimeTicket[] output = new TimeTicket[8];
        output[0].val = -74;
        output[1].val = 96;
        output[2].val = -88;
        output[3].val = 1;
        output[4].val = -93;
        output[5].val = 91;
        output[6].val = -76;
        output[7].val = 61;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[8];
        answer[0].val = -93;
        answer[1].val = -88;
        answer[2].val = -76;
        answer[3].val = -74;
        answer[4].val = 1;
        answer[5].val = 61;
        answer[6].val = 91;
        answer[7].val = 96;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00027() {
        TimeTicket[] output = new TimeTicket[22];
        output[0].val = -59;
        output[1].val = -33;
        output[2].val = -49;
        output[3].val = -39;
        output[4].val = 30;
        output[5].val = 78;
        output[6].val = 27;
        output[7].val = -50;
        output[8].val = 23;
        output[9].val = 45;
        output[10].val = -72;
        output[11].val = -79;
        output[12].val = -13;
        output[13].val = -69;
        output[14].val = 52;
        output[15].val = -1;
        output[16].val = 78;
        output[17].val = 39;
        output[18].val = -43;
        output[19].val = 49;
        output[20].val = -18;
        output[21].val = 31;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[22];
        answer[0].val = -79;
        answer[1].val = -72;
        answer[2].val = -69;
        answer[3].val = -59;
        answer[4].val = -50;
        answer[5].val = -49;
        answer[6].val = -43;
        answer[7].val = -39;
        answer[8].val = -33;
        answer[9].val = -18;
        answer[10].val = -13;
        answer[11].val = -1;
        answer[12].val = 23;
        answer[13].val = 27;
        answer[14].val = 30;
        answer[15].val = 31;
        answer[16].val = 39;
        answer[17].val = 45;
        answer[18].val = 49;
        answer[19].val = 52;
        answer[20].val = 78;
        answer[21].val = 78;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00028() {
        TimeTicket[] output = new TimeTicket[9];
        output[0].val = -31;
        output[1].val = 1;
        output[2].val = -56;
        output[3].val = -33;
        output[4].val = -49;
        output[5].val = 97;
        output[6].val = -40;
        output[7].val = -7;
        output[8].val = 86;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[9];
        answer[0].val = -56;
        answer[1].val = -49;
        answer[2].val = -40;
        answer[3].val = -33;
        answer[4].val = -31;
        answer[5].val = -7;
        answer[6].val = 1;
        answer[7].val = 86;
        answer[8].val = 97;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00029() {
        int[] output = new int[8];
        output[0] = -30;
        output[1] = 19;
        output[2] = 46;
        output[3] = 30;
        output[4] = -33;
        output[5] = 77;
        output[6] = 92;
        output[7] = -32;
        Sorting.radixSort(output);
        int[] answer = new int[8];
        answer[0] = -33;
        answer[1] = -32;
        answer[2] = -30;
        answer[3] = 19;
        answer[4] = 30;
        answer[5] = 46;
        answer[6] = 77;
        answer[7] = 92;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00030() {
        TimeTicket[] output = new TimeTicket[26];
        output[0].val = -83;
        output[1].val = -21;
        output[2].val = -91;
        output[3].val = -87;
        output[4].val = 30;
        output[5].val = 85;
        output[6].val = 14;
        output[7].val = 69;
        output[8].val = -34;
        output[9].val = 85;
        output[10].val = -76;
        output[11].val = 41;
        output[12].val = 71;
        output[13].val = 5;
        output[14].val = 3;
        output[15].val = -78;
        output[16].val = -29;
        output[17].val = -6;
        output[18].val = 71;
        output[19].val = 58;
        output[20].val = -71;
        output[21].val = -79;
        output[22].val = -71;
        output[23].val = -95;
        output[24].val = 93;
        output[25].val = 47;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[26];
        answer[0].val = -95;
        answer[1].val = -91;
        answer[2].val = -87;
        answer[3].val = -83;
        answer[4].val = -79;
        answer[5].val = -78;
        answer[6].val = -76;
        answer[7].val = -71;
        answer[8].val = -71;
        answer[9].val = -34;
        answer[10].val = -29;
        answer[11].val = -21;
        answer[12].val = -6;
        answer[13].val = 3;
        answer[14].val = 5;
        answer[15].val = 14;
        answer[16].val = 30;
        answer[17].val = 41;
        answer[18].val = 47;
        answer[19].val = 58;
        answer[20].val = 69;
        answer[21].val = 71;
        answer[22].val = 71;
        answer[23].val = 85;
        answer[24].val = 85;
        answer[25].val = 93;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00031() {
        TimeTicket[] output = new TimeTicket[9];
        output[0].val = -17;
        output[1].val = 36;
        output[2].val = -43;
        output[3].val = 57;
        output[4].val = 2;
        output[5].val = -11;
        output[6].val = 22;
        output[7].val = -40;
        output[8].val = 60;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[9];
        answer[0].val = -43;
        answer[1].val = -40;
        answer[2].val = -17;
        answer[3].val = -11;
        answer[4].val = 2;
        answer[5].val = 22;
        answer[6].val = 36;
        answer[7].val = 57;
        answer[8].val = 60;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00032() {
        TimeTicket[] output = new TimeTicket[19];
        output[0].val = 86;
        output[1].val = -85;
        output[2].val = 92;
        output[3].val = 7;
        output[4].val = -24;
        output[5].val = -16;
        output[6].val = -76;
        output[7].val = -76;
        output[8].val = 32;
        output[9].val = -45;
        output[10].val = 89;
        output[11].val = -39;
        output[12].val = 16;
        output[13].val = 21;
        output[14].val = -23;
        output[15].val = 16;
        output[16].val = -69;
        output[17].val = -62;
        output[18].val = -26;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[19];
        answer[0].val = -85;
        answer[1].val = -76;
        answer[2].val = -76;
        answer[3].val = -69;
        answer[4].val = -62;
        answer[5].val = -45;
        answer[6].val = -39;
        answer[7].val = -26;
        answer[8].val = -24;
        answer[9].val = -23;
        answer[10].val = -16;
        answer[11].val = 7;
        answer[12].val = 16;
        answer[13].val = 16;
        answer[14].val = 21;
        answer[15].val = 32;
        answer[16].val = 86;
        answer[17].val = 89;
        answer[18].val = 92;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00033() {
        TimeTicket[] output = new TimeTicket[19];
        output[0].val = -81;
        output[1].val = -95;
        output[2].val = 36;
        output[3].val = -53;
        output[4].val = -49;
        output[5].val = 44;
        output[6].val = 72;
        output[7].val = 25;
        output[8].val = -57;
        output[9].val = 28;
        output[10].val = -60;
        output[11].val = 43;
        output[12].val = -23;
        output[13].val = -41;
        output[14].val = 0;
        output[15].val = 65;
        output[16].val = 86;
        output[17].val = -69;
        output[18].val = -7;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[19];
        answer[0].val = -95;
        answer[1].val = -81;
        answer[2].val = -69;
        answer[3].val = -60;
        answer[4].val = -57;
        answer[5].val = -53;
        answer[6].val = -49;
        answer[7].val = -41;
        answer[8].val = -23;
        answer[9].val = -7;
        answer[10].val = 0;
        answer[11].val = 25;
        answer[12].val = 28;
        answer[13].val = 36;
        answer[14].val = 43;
        answer[15].val = 44;
        answer[16].val = 65;
        answer[17].val = 72;
        answer[18].val = 86;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00034() {
        TimeTicket[] output = new TimeTicket[2];
        output[0].val = -31;
        output[1].val = 63;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[2];
        answer[0].val = -31;
        answer[1].val = 63;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00035() {
        int[] output = new int[15];
        output[0] = 88;
        output[1] = 36;
        output[2] = 6;
        output[3] = -85;
        output[4] = -98;
        output[5] = -66;
        output[6] = -10;
        output[7] = -39;
        output[8] = -8;
        output[9] = -13;
        output[10] = 82;
        output[11] = -84;
        output[12] = -58;
        output[13] = 66;
        output[14] = 37;
        Sorting.radixSort(output);
        int[] answer = new int[15];
        answer[0] = -98;
        answer[1] = -85;
        answer[2] = -84;
        answer[3] = -66;
        answer[4] = -58;
        answer[5] = -39;
        answer[6] = -13;
        answer[7] = -10;
        answer[8] = -8;
        answer[9] = 6;
        answer[10] = 36;
        answer[11] = 37;
        answer[12] = 66;
        answer[13] = 82;
        answer[14] = 88;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00036() {
        TimeTicket[] output = new TimeTicket[30];
        output[0].val = -38;
        output[1].val = 26;
        output[2].val = 34;
        output[3].val = -38;
        output[4].val = 79;
        output[5].val = 67;
        output[6].val = -36;
        output[7].val = -76;
        output[8].val = -75;
        output[9].val = 37;
        output[10].val = -17;
        output[11].val = 9;
        output[12].val = -5;
        output[13].val = 44;
        output[14].val = -74;
        output[15].val = -3;
        output[16].val = -46;
        output[17].val = 38;
        output[18].val = -75;
        output[19].val = -30;
        output[20].val = -42;
        output[21].val = 60;
        output[22].val = 79;
        output[23].val = 52;
        output[24].val = -28;
        output[25].val = 29;
        output[26].val = 69;
        output[27].val = 40;
        output[28].val = -41;
        output[29].val = 44;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[30];
        answer[0].val = -76;
        answer[1].val = -75;
        answer[2].val = -75;
        answer[3].val = -74;
        answer[4].val = -46;
        answer[5].val = -42;
        answer[6].val = -41;
        answer[7].val = -38;
        answer[8].val = -38;
        answer[9].val = -36;
        answer[10].val = -30;
        answer[11].val = -28;
        answer[12].val = -17;
        answer[13].val = -5;
        answer[14].val = -3;
        answer[15].val = 9;
        answer[16].val = 26;
        answer[17].val = 29;
        answer[18].val = 34;
        answer[19].val = 37;
        answer[20].val = 38;
        answer[21].val = 40;
        answer[22].val = 44;
        answer[23].val = 44;
        answer[24].val = 52;
        answer[25].val = 60;
        answer[26].val = 67;
        answer[27].val = 69;
        answer[28].val = 79;
        answer[29].val = 79;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00037() {
        TimeTicket[] output = new TimeTicket[15];
        output[0].val = 42;
        output[1].val = 69;
        output[2].val = 26;
        output[3].val = 92;
        output[4].val = -51;
        output[5].val = 91;
        output[6].val = -59;
        output[7].val = -77;
        output[8].val = 59;
        output[9].val = -39;
        output[10].val = 39;
        output[11].val = 90;
        output[12].val = -67;
        output[13].val = -9;
        output[14].val = -69;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[15];
        answer[0].val = -77;
        answer[1].val = -69;
        answer[2].val = -67;
        answer[3].val = -59;
        answer[4].val = -51;
        answer[5].val = -39;
        answer[6].val = -9;
        answer[7].val = 26;
        answer[8].val = 39;
        answer[9].val = 42;
        answer[10].val = 59;
        answer[11].val = 69;
        answer[12].val = 90;
        answer[13].val = 91;
        answer[14].val = 92;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00038() {
        TimeTicket[] output = new TimeTicket[23];
        output[0].val = 12;
        output[1].val = 30;
        output[2].val = 0;
        output[3].val = -17;
        output[4].val = 66;
        output[5].val = -70;
        output[6].val = 8;
        output[7].val = 29;
        output[8].val = 48;
        output[9].val = -35;
        output[10].val = 51;
        output[11].val = 97;
        output[12].val = 18;
        output[13].val = 15;
        output[14].val = -79;
        output[15].val = 52;
        output[16].val = -31;
        output[17].val = 77;
        output[18].val = -40;
        output[19].val = 18;
        output[20].val = -53;
        output[21].val = 33;
        output[22].val = -18;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[23];
        answer[0].val = -79;
        answer[1].val = -70;
        answer[2].val = -53;
        answer[3].val = -40;
        answer[4].val = -35;
        answer[5].val = -31;
        answer[6].val = -18;
        answer[7].val = -17;
        answer[8].val = 0;
        answer[9].val = 8;
        answer[10].val = 12;
        answer[11].val = 15;
        answer[12].val = 18;
        answer[13].val = 18;
        answer[14].val = 29;
        answer[15].val = 30;
        answer[16].val = 33;
        answer[17].val = 48;
        answer[18].val = 51;
        answer[19].val = 52;
        answer[20].val = 66;
        answer[21].val = 77;
        answer[22].val = 97;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00039() {
        TimeTicket[] output = new TimeTicket[7];
        output[0].val = 35;
        output[1].val = -56;
        output[2].val = 79;
        output[3].val = -90;
        output[4].val = -5;
        output[5].val = -52;
        output[6].val = -15;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[7];
        answer[0].val = -90;
        answer[1].val = -56;
        answer[2].val = -52;
        answer[3].val = -15;
        answer[4].val = -5;
        answer[5].val = 35;
        answer[6].val = 79;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00040() {
        TimeTicket[] output = new TimeTicket[8];
        output[0].val = -14;
        output[1].val = 82;
        output[2].val = 38;
        output[3].val = -92;
        output[4].val = -62;
        output[5].val = -36;
        output[6].val = -1;
        output[7].val = 56;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[8];
        answer[0].val = -92;
        answer[1].val = -62;
        answer[2].val = -36;
        answer[3].val = -14;
        answer[4].val = -1;
        answer[5].val = 38;
        answer[6].val = 56;
        answer[7].val = 82;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00041() {
        int[] output = new int[1];
        output[0] = 43;
        Sorting.radixSort(output);
        int[] answer = new int[1];
        answer[0] = 43;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00042() {
        TimeTicket[] output = new TimeTicket[23];
        output[0].val = 51;
        output[1].val = -20;
        output[2].val = 0;
        output[3].val = -25;
        output[4].val = -39;
        output[5].val = -38;
        output[6].val = 82;
        output[7].val = -11;
        output[8].val = 88;
        output[9].val = 42;
        output[10].val = 49;
        output[11].val = 42;
        output[12].val = 38;
        output[13].val = 94;
        output[14].val = 82;
        output[15].val = 31;
        output[16].val = -72;
        output[17].val = -43;
        output[18].val = -47;
        output[19].val = 97;
        output[20].val = -84;
        output[21].val = 99;
        output[22].val = -80;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[23];
        answer[0].val = -84;
        answer[1].val = -80;
        answer[2].val = -72;
        answer[3].val = -47;
        answer[4].val = -43;
        answer[5].val = -39;
        answer[6].val = -38;
        answer[7].val = -25;
        answer[8].val = -20;
        answer[9].val = -11;
        answer[10].val = 0;
        answer[11].val = 31;
        answer[12].val = 38;
        answer[13].val = 42;
        answer[14].val = 42;
        answer[15].val = 49;
        answer[16].val = 51;
        answer[17].val = 82;
        answer[18].val = 82;
        answer[19].val = 88;
        answer[20].val = 94;
        answer[21].val = 97;
        answer[22].val = 99;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00043() {
        TimeTicket[] output = new TimeTicket[13];
        output[0].val = -29;
        output[1].val = -72;
        output[2].val = 85;
        output[3].val = 14;
        output[4].val = -68;
        output[5].val = 43;
        output[6].val = 44;
        output[7].val = -57;
        output[8].val = 90;
        output[9].val = -50;
        output[10].val = -57;
        output[11].val = -73;
        output[12].val = -36;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[13];
        answer[0].val = -73;
        answer[1].val = -72;
        answer[2].val = -68;
        answer[3].val = -57;
        answer[4].val = -57;
        answer[5].val = -50;
        answer[6].val = -36;
        answer[7].val = -29;
        answer[8].val = 14;
        answer[9].val = 43;
        answer[10].val = 44;
        answer[11].val = 85;
        answer[12].val = 90;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00044() {
        TimeTicket[] output = new TimeTicket[8];
        output[0].val = 39;
        output[1].val = -45;
        output[2].val = 37;
        output[3].val = 62;
        output[4].val = 74;
        output[5].val = -62;
        output[6].val = -47;
        output[7].val = -39;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[8];
        answer[0].val = -62;
        answer[1].val = -47;
        answer[2].val = -45;
        answer[3].val = -39;
        answer[4].val = 37;
        answer[5].val = 39;
        answer[6].val = 62;
        answer[7].val = 74;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00045() {
        TimeTicket[] output = new TimeTicket[25];
        output[0].val = -56;
        output[1].val = -28;
        output[2].val = -64;
        output[3].val = 85;
        output[4].val = -66;
        output[5].val = -63;
        output[6].val = -26;
        output[7].val = 85;
        output[8].val = -57;
        output[9].val = -28;
        output[10].val = 72;
        output[11].val = 70;
        output[12].val = 90;
        output[13].val = -19;
        output[14].val = -73;
        output[15].val = -14;
        output[16].val = 11;
        output[17].val = -53;
        output[18].val = 46;
        output[19].val = 7;
        output[20].val = 8;
        output[21].val = -41;
        output[22].val = -86;
        output[23].val = 32;
        output[24].val = 40;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[25];
        answer[0].val = -86;
        answer[1].val = -73;
        answer[2].val = -66;
        answer[3].val = -64;
        answer[4].val = -63;
        answer[5].val = -57;
        answer[6].val = -56;
        answer[7].val = -53;
        answer[8].val = -41;
        answer[9].val = -28;
        answer[10].val = -28;
        answer[11].val = -26;
        answer[12].val = -19;
        answer[13].val = -14;
        answer[14].val = 7;
        answer[15].val = 8;
        answer[16].val = 11;
        answer[17].val = 32;
        answer[18].val = 40;
        answer[19].val = 46;
        answer[20].val = 70;
        answer[21].val = 72;
        answer[22].val = 85;
        answer[23].val = 85;
        answer[24].val = 90;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00046() {
        TimeTicket[] output = new TimeTicket[3];
        output[0].val = 66;
        output[1].val = -16;
        output[2].val = 32;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[3];
        answer[0].val = -16;
        answer[1].val = 32;
        answer[2].val = 66;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00047() {
        int[] output = new int[9];
        output[0] = 69;
        output[1] = 59;
        output[2] = -25;
        output[3] = -17;
        output[4] = -89;
        output[5] = 42;
        output[6] = 51;
        output[7] = -70;
        output[8] = 85;
        Sorting.radixSort(output);
        int[] answer = new int[9];
        answer[0] = -89;
        answer[1] = -70;
        answer[2] = -25;
        answer[3] = -17;
        answer[4] = 42;
        answer[5] = 51;
        answer[6] = 59;
        answer[7] = 69;
        answer[8] = 85;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00048() {
        TimeTicket[] output = new TimeTicket[5];
        output[0].val = -89;
        output[1].val = 3;
        output[2].val = 29;
        output[3].val = 54;
        output[4].val = 27;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[5];
        answer[0].val = -89;
        answer[1].val = 3;
        answer[2].val = 27;
        answer[3].val = 29;
        answer[4].val = 54;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00049() {
        TimeTicket[] output = new TimeTicket[16];
        output[0].val = -75;
        output[1].val = 57;
        output[2].val = -46;
        output[3].val = 94;
        output[4].val = -39;
        output[5].val = -46;
        output[6].val = -25;
        output[7].val = 77;
        output[8].val = 18;
        output[9].val = -30;
        output[10].val = 30;
        output[11].val = -31;
        output[12].val = 22;
        output[13].val = 51;
        output[14].val = 64;
        output[15].val = 91;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[16];
        answer[0].val = -75;
        answer[1].val = -46;
        answer[2].val = -46;
        answer[3].val = -39;
        answer[4].val = -31;
        answer[5].val = -30;
        answer[6].val = -25;
        answer[7].val = 18;
        answer[8].val = 22;
        answer[9].val = 30;
        answer[10].val = 51;
        answer[11].val = 57;
        answer[12].val = 64;
        answer[13].val = 77;
        answer[14].val = 91;
        answer[15].val = 94;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00050() {
        TimeTicket[] output = new TimeTicket[29];
        output[0].val = -58;
        output[1].val = 26;
        output[2].val = 60;
        output[3].val = 63;
        output[4].val = -27;
        output[5].val = -27;
        output[6].val = 97;
        output[7].val = 99;
        output[8].val = -58;
        output[9].val = -64;
        output[10].val = 39;
        output[11].val = -84;
        output[12].val = 52;
        output[13].val = 93;
        output[14].val = -96;
        output[15].val = -77;
        output[16].val = -90;
        output[17].val = 73;
        output[18].val = -12;
        output[19].val = -80;
        output[20].val = 33;
        output[21].val = 75;
        output[22].val = 38;
        output[23].val = -90;
        output[24].val = -13;
        output[25].val = 66;
        output[26].val = 47;
        output[27].val = -71;
        output[28].val = 9;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[29];
        answer[0].val = -96;
        answer[1].val = -90;
        answer[2].val = -90;
        answer[3].val = -84;
        answer[4].val = -80;
        answer[5].val = -77;
        answer[6].val = -71;
        answer[7].val = -64;
        answer[8].val = -58;
        answer[9].val = -58;
        answer[10].val = -27;
        answer[11].val = -27;
        answer[12].val = -13;
        answer[13].val = -12;
        answer[14].val = 9;
        answer[15].val = 26;
        answer[16].val = 33;
        answer[17].val = 38;
        answer[18].val = 39;
        answer[19].val = 47;
        answer[20].val = 52;
        answer[21].val = 60;
        answer[22].val = 63;
        answer[23].val = 66;
        answer[24].val = 73;
        answer[25].val = 75;
        answer[26].val = 93;
        answer[27].val = 97;
        answer[28].val = 99;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00051() {
        TimeTicket[] output = new TimeTicket[15];
        output[0].val = -67;
        output[1].val = -87;
        output[2].val = 64;
        output[3].val = 67;
        output[4].val = -97;
        output[5].val = -83;
        output[6].val = 27;
        output[7].val = 59;
        output[8].val = -92;
        output[9].val = 30;
        output[10].val = 24;
        output[11].val = -71;
        output[12].val = -36;
        output[13].val = 96;
        output[14].val = 89;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[15];
        answer[0].val = -97;
        answer[1].val = -92;
        answer[2].val = -87;
        answer[3].val = -83;
        answer[4].val = -71;
        answer[5].val = -67;
        answer[6].val = -36;
        answer[7].val = 24;
        answer[8].val = 27;
        answer[9].val = 30;
        answer[10].val = 59;
        answer[11].val = 64;
        answer[12].val = 67;
        answer[13].val = 89;
        answer[14].val = 96;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00052() {
        TimeTicket[] output = new TimeTicket[6];
        output[0].val = -47;
        output[1].val = 26;
        output[2].val = 33;
        output[3].val = -32;
        output[4].val = 35;
        output[5].val = -69;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[6];
        answer[0].val = -69;
        answer[1].val = -47;
        answer[2].val = -32;
        answer[3].val = 26;
        answer[4].val = 33;
        answer[5].val = 35;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00053() {
        int[] output = new int[8];
        output[0] = 24;
        output[1] = 27;
        output[2] = -15;
        output[3] = 82;
        output[4] = 41;
        output[5] = -2;
        output[6] = 92;
        output[7] = -86;
        Sorting.radixSort(output);
        int[] answer = new int[8];
        answer[0] = -86;
        answer[1] = -15;
        answer[2] = -2;
        answer[3] = 24;
        answer[4] = 27;
        answer[5] = 41;
        answer[6] = 82;
        answer[7] = 92;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00054() {
        TimeTicket[] output = new TimeTicket[16];
        output[0].val = -59;
        output[1].val = -29;
        output[2].val = -80;
        output[3].val = -39;
        output[4].val = -10;
        output[5].val = -95;
        output[6].val = -49;
        output[7].val = 62;
        output[8].val = 87;
        output[9].val = -56;
        output[10].val = 72;
        output[11].val = -69;
        output[12].val = -11;
        output[13].val = -92;
        output[14].val = -90;
        output[15].val = -47;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[16];
        answer[0].val = -95;
        answer[1].val = -92;
        answer[2].val = -90;
        answer[3].val = -80;
        answer[4].val = -69;
        answer[5].val = -59;
        answer[6].val = -56;
        answer[7].val = -49;
        answer[8].val = -47;
        answer[9].val = -39;
        answer[10].val = -29;
        answer[11].val = -11;
        answer[12].val = -10;
        answer[13].val = 62;
        answer[14].val = 72;
        answer[15].val = 87;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00055() {
        TimeTicket[] output = new TimeTicket[4];
        output[0].val = -75;
        output[1].val = -7;
        output[2].val = -4;
        output[3].val = -91;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[4];
        answer[0].val = -91;
        answer[1].val = -75;
        answer[2].val = -7;
        answer[3].val = -4;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00056() {
        TimeTicket[] output = new TimeTicket[15];
        output[0].val = -37;
        output[1].val = -77;
        output[2].val = -18;
        output[3].val = 22;
        output[4].val = 56;
        output[5].val = 6;
        output[6].val = -39;
        output[7].val = 99;
        output[8].val = -67;
        output[9].val = 70;
        output[10].val = 19;
        output[11].val = -13;
        output[12].val = -76;
        output[13].val = 31;
        output[14].val = -69;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[15];
        answer[0].val = -77;
        answer[1].val = -76;
        answer[2].val = -69;
        answer[3].val = -67;
        answer[4].val = -39;
        answer[5].val = -37;
        answer[6].val = -18;
        answer[7].val = -13;
        answer[8].val = 6;
        answer[9].val = 19;
        answer[10].val = 22;
        answer[11].val = 31;
        answer[12].val = 56;
        answer[13].val = 70;
        answer[14].val = 99;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00057() {
        TimeTicket[] output = new TimeTicket[2];
        output[0].val = 48;
        output[1].val = -97;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[2];
        answer[0].val = -97;
        answer[1].val = 48;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00058() {
        TimeTicket[] output = new TimeTicket[6];
        output[0].val = -6;
        output[1].val = 75;
        output[2].val = 74;
        output[3].val = -15;
        output[4].val = -11;
        output[5].val = 27;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[6];
        answer[0].val = -15;
        answer[1].val = -11;
        answer[2].val = -6;
        answer[3].val = 27;
        answer[4].val = 74;
        answer[5].val = 75;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00059() {
        int[] output = new int[1];
        output[0] = -79;
        Sorting.radixSort(output);
        int[] answer = new int[1];
        answer[0] = -79;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00060() {
        TimeTicket[] output = new TimeTicket[3];
        output[0].val = -88;
        output[1].val = 67;
        output[2].val = -23;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[3];
        answer[0].val = -88;
        answer[1].val = -23;
        answer[2].val = 67;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00061() {
        TimeTicket[] output = new TimeTicket[11];
        output[0].val = -4;
        output[1].val = 41;
        output[2].val = -45;
        output[3].val = 37;
        output[4].val = -82;
        output[5].val = -44;
        output[6].val = 74;
        output[7].val = -25;
        output[8].val = -17;
        output[9].val = 35;
        output[10].val = 54;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[11];
        answer[0].val = -82;
        answer[1].val = -45;
        answer[2].val = -44;
        answer[3].val = -25;
        answer[4].val = -17;
        answer[5].val = -4;
        answer[6].val = 35;
        answer[7].val = 37;
        answer[8].val = 41;
        answer[9].val = 54;
        answer[10].val = 74;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00062() {
        TimeTicket[] output = new TimeTicket[5];
        output[0].val = 13;
        output[1].val = 28;
        output[2].val = 36;
        output[3].val = 50;
        output[4].val = 85;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[5];
        answer[0].val = 13;
        answer[1].val = 28;
        answer[2].val = 36;
        answer[3].val = 50;
        answer[4].val = 85;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00063() {
        TimeTicket[] output = new TimeTicket[29];
        output[0].val = -97;
        output[1].val = -72;
        output[2].val = -50;
        output[3].val = -7;
        output[4].val = -25;
        output[5].val = 14;
        output[6].val = -71;
        output[7].val = -2;
        output[8].val = 18;
        output[9].val = -31;
        output[10].val = 3;
        output[11].val = -1;
        output[12].val = 11;
        output[13].val = 11;
        output[14].val = -57;
        output[15].val = -8;
        output[16].val = -26;
        output[17].val = 71;
        output[18].val = 96;
        output[19].val = -79;
        output[20].val = 7;
        output[21].val = 62;
        output[22].val = 68;
        output[23].val = -34;
        output[24].val = -92;
        output[25].val = 45;
        output[26].val = 37;
        output[27].val = 21;
        output[28].val = 80;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[29];
        answer[0].val = -97;
        answer[1].val = -92;
        answer[2].val = -79;
        answer[3].val = -72;
        answer[4].val = -71;
        answer[5].val = -57;
        answer[6].val = -50;
        answer[7].val = -34;
        answer[8].val = -31;
        answer[9].val = -26;
        answer[10].val = -25;
        answer[11].val = -8;
        answer[12].val = -7;
        answer[13].val = -2;
        answer[14].val = -1;
        answer[15].val = 3;
        answer[16].val = 7;
        answer[17].val = 11;
        answer[18].val = 11;
        answer[19].val = 14;
        answer[20].val = 18;
        answer[21].val = 21;
        answer[22].val = 37;
        answer[23].val = 45;
        answer[24].val = 62;
        answer[25].val = 68;
        answer[26].val = 71;
        answer[27].val = 80;
        answer[28].val = 96;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00064() {
        TimeTicket[] output = new TimeTicket[2];
        output[0].val = -10;
        output[1].val = -80;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[2];
        answer[0].val = -80;
        answer[1].val = -10;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00065() {
        int[] output = new int[26];
        output[0] = 30;
        output[1] = -92;
        output[2] = 26;
        output[3] = 33;
        output[4] = 51;
        output[5] = 37;
        output[6] = -86;
        output[7] = 62;
        output[8] = -3;
        output[9] = -84;
        output[10] = -98;
        output[11] = -5;
        output[12] = 12;
        output[13] = -43;
        output[14] = -4;
        output[15] = 2;
        output[16] = -40;
        output[17] = -19;
        output[18] = 0;
        output[19] = -20;
        output[20] = -67;
        output[21] = -33;
        output[22] = -65;
        output[23] = -78;
        output[24] = 16;
        output[25] = 88;
        Sorting.radixSort(output);
        int[] answer = new int[26];
        answer[0] = -98;
        answer[1] = -92;
        answer[2] = -86;
        answer[3] = -84;
        answer[4] = -78;
        answer[5] = -67;
        answer[6] = -65;
        answer[7] = -43;
        answer[8] = -40;
        answer[9] = -33;
        answer[10] = -20;
        answer[11] = -19;
        answer[12] = -5;
        answer[13] = -4;
        answer[14] = -3;
        answer[15] = 0;
        answer[16] = 2;
        answer[17] = 12;
        answer[18] = 16;
        answer[19] = 26;
        answer[20] = 30;
        answer[21] = 33;
        answer[22] = 37;
        answer[23] = 51;
        answer[24] = 62;
        answer[25] = 88;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00066() {
        TimeTicket[] output = new TimeTicket[28];
        output[0].val = 80;
        output[1].val = 8;
        output[2].val = 51;
        output[3].val = 19;
        output[4].val = 17;
        output[5].val = -53;
        output[6].val = 15;
        output[7].val = -52;
        output[8].val = 75;
        output[9].val = 17;
        output[10].val = -43;
        output[11].val = 26;
        output[12].val = 84;
        output[13].val = 29;
        output[14].val = 37;
        output[15].val = -67;
        output[16].val = 0;
        output[17].val = 53;
        output[18].val = 81;
        output[19].val = -14;
        output[20].val = 67;
        output[21].val = 45;
        output[22].val = 99;
        output[23].val = 52;
        output[24].val = 66;
        output[25].val = 91;
        output[26].val = -12;
        output[27].val = 69;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[28];
        answer[0].val = -67;
        answer[1].val = -53;
        answer[2].val = -52;
        answer[3].val = -43;
        answer[4].val = -14;
        answer[5].val = -12;
        answer[6].val = 0;
        answer[7].val = 8;
        answer[8].val = 15;
        answer[9].val = 17;
        answer[10].val = 17;
        answer[11].val = 19;
        answer[12].val = 26;
        answer[13].val = 29;
        answer[14].val = 37;
        answer[15].val = 45;
        answer[16].val = 51;
        answer[17].val = 52;
        answer[18].val = 53;
        answer[19].val = 66;
        answer[20].val = 67;
        answer[21].val = 69;
        answer[22].val = 75;
        answer[23].val = 80;
        answer[24].val = 81;
        answer[25].val = 84;
        answer[26].val = 91;
        answer[27].val = 99;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00067() {
        TimeTicket[] output = new TimeTicket[27];
        output[0].val = -20;
        output[1].val = 31;
        output[2].val = -64;
        output[3].val = 45;
        output[4].val = -71;
        output[5].val = -95;
        output[6].val = -76;
        output[7].val = 87;
        output[8].val = 38;
        output[9].val = 53;
        output[10].val = -16;
        output[11].val = 13;
        output[12].val = 41;
        output[13].val = 0;
        output[14].val = 44;
        output[15].val = -95;
        output[16].val = 43;
        output[17].val = -35;
        output[18].val = -3;
        output[19].val = 45;
        output[20].val = -58;
        output[21].val = -53;
        output[22].val = 58;
        output[23].val = 41;
        output[24].val = 1;
        output[25].val = 41;
        output[26].val = -15;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[27];
        answer[0].val = -95;
        answer[1].val = -95;
        answer[2].val = -76;
        answer[3].val = -71;
        answer[4].val = -64;
        answer[5].val = -58;
        answer[6].val = -53;
        answer[7].val = -35;
        answer[8].val = -20;
        answer[9].val = -16;
        answer[10].val = -15;
        answer[11].val = -3;
        answer[12].val = 0;
        answer[13].val = 1;
        answer[14].val = 13;
        answer[15].val = 31;
        answer[16].val = 38;
        answer[17].val = 41;
        answer[18].val = 41;
        answer[19].val = 41;
        answer[20].val = 43;
        answer[21].val = 44;
        answer[22].val = 45;
        answer[23].val = 45;
        answer[24].val = 53;
        answer[25].val = 58;
        answer[26].val = 87;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00068() {
        TimeTicket[] output = new TimeTicket[20];
        output[0].val = -63;
        output[1].val = -73;
        output[2].val = 96;
        output[3].val = -41;
        output[4].val = 33;
        output[5].val = 14;
        output[6].val = 96;
        output[7].val = 26;
        output[8].val = -85;
        output[9].val = -99;
        output[10].val = 12;
        output[11].val = -47;
        output[12].val = -75;
        output[13].val = -99;
        output[14].val = 82;
        output[15].val = -32;
        output[16].val = 80;
        output[17].val = 9;
        output[18].val = -44;
        output[19].val = -37;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[20];
        answer[0].val = -99;
        answer[1].val = -99;
        answer[2].val = -85;
        answer[3].val = -75;
        answer[4].val = -73;
        answer[5].val = -63;
        answer[6].val = -47;
        answer[7].val = -44;
        answer[8].val = -41;
        answer[9].val = -37;
        answer[10].val = -32;
        answer[11].val = 9;
        answer[12].val = 12;
        answer[13].val = 14;
        answer[14].val = 26;
        answer[15].val = 33;
        answer[16].val = 80;
        answer[17].val = 82;
        answer[18].val = 96;
        answer[19].val = 96;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00069() {
        TimeTicket[] output = new TimeTicket[24];
        output[0].val = 88;
        output[1].val = -93;
        output[2].val = 29;
        output[3].val = -30;
        output[4].val = 19;
        output[5].val = 30;
        output[6].val = -91;
        output[7].val = 14;
        output[8].val = -41;
        output[9].val = 83;
        output[10].val = 31;
        output[11].val = -71;
        output[12].val = -50;
        output[13].val = -41;
        output[14].val = 58;
        output[15].val = -16;
        output[16].val = -50;
        output[17].val = -74;
        output[18].val = 35;
        output[19].val = 47;
        output[20].val = -94;
        output[21].val = -19;
        output[22].val = -48;
        output[23].val = 59;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[24];
        answer[0].val = -94;
        answer[1].val = -93;
        answer[2].val = -91;
        answer[3].val = -74;
        answer[4].val = -71;
        answer[5].val = -50;
        answer[6].val = -50;
        answer[7].val = -48;
        answer[8].val = -41;
        answer[9].val = -41;
        answer[10].val = -30;
        answer[11].val = -19;
        answer[12].val = -16;
        answer[13].val = 14;
        answer[14].val = 19;
        answer[15].val = 29;
        answer[16].val = 30;
        answer[17].val = 31;
        answer[18].val = 35;
        answer[19].val = 47;
        answer[20].val = 58;
        answer[21].val = 59;
        answer[22].val = 83;
        answer[23].val = 88;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00070() {
        TimeTicket[] output = new TimeTicket[29];
        output[0].val = 45;
        output[1].val = 63;
        output[2].val = -62;
        output[3].val = 25;
        output[4].val = -31;
        output[5].val = 52;
        output[6].val = 98;
        output[7].val = 44;
        output[8].val = 50;
        output[9].val = 43;
        output[10].val = -57;
        output[11].val = 12;
        output[12].val = 58;
        output[13].val = 18;
        output[14].val = -68;
        output[15].val = 71;
        output[16].val = -44;
        output[17].val = -30;
        output[18].val = 42;
        output[19].val = 65;
        output[20].val = 90;
        output[21].val = -73;
        output[22].val = -69;
        output[23].val = -53;
        output[24].val = -64;
        output[25].val = -89;
        output[26].val = -1;
        output[27].val = 28;
        output[28].val = -66;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[29];
        answer[0].val = -89;
        answer[1].val = -73;
        answer[2].val = -69;
        answer[3].val = -68;
        answer[4].val = -66;
        answer[5].val = -64;
        answer[6].val = -62;
        answer[7].val = -57;
        answer[8].val = -53;
        answer[9].val = -44;
        answer[10].val = -31;
        answer[11].val = -30;
        answer[12].val = -1;
        answer[13].val = 12;
        answer[14].val = 18;
        answer[15].val = 25;
        answer[16].val = 28;
        answer[17].val = 42;
        answer[18].val = 43;
        answer[19].val = 44;
        answer[20].val = 45;
        answer[21].val = 50;
        answer[22].val = 52;
        answer[23].val = 58;
        answer[24].val = 63;
        answer[25].val = 65;
        answer[26].val = 71;
        answer[27].val = 90;
        answer[28].val = 98;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00071() {
        int[] output = new int[27];
        output[0] = 78;
        output[1] = 4;
        output[2] = 17;
        output[3] = -14;
        output[4] = -68;
        output[5] = -46;
        output[6] = 7;
        output[7] = -34;
        output[8] = 29;
        output[9] = -31;
        output[10] = -25;
        output[11] = -45;
        output[12] = -24;
        output[13] = 31;
        output[14] = 34;
        output[15] = -33;
        output[16] = 68;
        output[17] = -19;
        output[18] = 58;
        output[19] = 19;
        output[20] = -31;
        output[21] = 61;
        output[22] = 24;
        output[23] = -46;
        output[24] = 11;
        output[25] = -9;
        output[26] = 37;
        Sorting.radixSort(output);
        int[] answer = new int[27];
        answer[0] = -68;
        answer[1] = -46;
        answer[2] = -46;
        answer[3] = -45;
        answer[4] = -34;
        answer[5] = -33;
        answer[6] = -31;
        answer[7] = -31;
        answer[8] = -25;
        answer[9] = -24;
        answer[10] = -19;
        answer[11] = -14;
        answer[12] = -9;
        answer[13] = 4;
        answer[14] = 7;
        answer[15] = 11;
        answer[16] = 17;
        answer[17] = 19;
        answer[18] = 24;
        answer[19] = 29;
        answer[20] = 31;
        answer[21] = 34;
        answer[22] = 37;
        answer[23] = 58;
        answer[24] = 61;
        answer[25] = 68;
        answer[26] = 78;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00072() {
        TimeTicket[] output = new TimeTicket[6];
        output[0].val = 38;
        output[1].val = 8;
        output[2].val = -74;
        output[3].val = -58;
        output[4].val = 25;
        output[5].val = -43;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[6];
        answer[0].val = -74;
        answer[1].val = -58;
        answer[2].val = -43;
        answer[3].val = 8;
        answer[4].val = 25;
        answer[5].val = 38;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00073() {
        TimeTicket[] output = new TimeTicket[22];
        output[0].val = 87;
        output[1].val = -12;
        output[2].val = 28;
        output[3].val = 45;
        output[4].val = 34;
        output[5].val = 98;
        output[6].val = -12;
        output[7].val = 49;
        output[8].val = -35;
        output[9].val = -53;
        output[10].val = 55;
        output[11].val = -79;
        output[12].val = -12;
        output[13].val = -41;
        output[14].val = 99;
        output[15].val = 7;
        output[16].val = 58;
        output[17].val = -27;
        output[18].val = 49;
        output[19].val = 57;
        output[20].val = 42;
        output[21].val = 96;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[22];
        answer[0].val = -79;
        answer[1].val = -53;
        answer[2].val = -41;
        answer[3].val = -35;
        answer[4].val = -27;
        answer[5].val = -12;
        answer[6].val = -12;
        answer[7].val = -12;
        answer[8].val = 7;
        answer[9].val = 28;
        answer[10].val = 34;
        answer[11].val = 42;
        answer[12].val = 45;
        answer[13].val = 49;
        answer[14].val = 49;
        answer[15].val = 55;
        answer[16].val = 57;
        answer[17].val = 58;
        answer[18].val = 87;
        answer[19].val = 96;
        answer[20].val = 98;
        answer[21].val = 99;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00074() {
        TimeTicket[] output = new TimeTicket[7];
        output[0].val = 30;
        output[1].val = 74;
        output[2].val = -25;
        output[3].val = -33;
        output[4].val = -49;
        output[5].val = 89;
        output[6].val = -92;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[7];
        answer[0].val = -92;
        answer[1].val = -49;
        answer[2].val = -33;
        answer[3].val = -25;
        answer[4].val = 30;
        answer[5].val = 74;
        answer[6].val = 89;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00075() {
        TimeTicket[] output = new TimeTicket[4];
        output[0].val = -38;
        output[1].val = 25;
        output[2].val = -7;
        output[3].val = -22;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[4];
        answer[0].val = -38;
        answer[1].val = -22;
        answer[2].val = -7;
        answer[3].val = 25;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00076() {
        TimeTicket[] output = new TimeTicket[11];
        output[0].val = 64;
        output[1].val = -41;
        output[2].val = 95;
        output[3].val = -61;
        output[4].val = 67;
        output[5].val = -52;
        output[6].val = 73;
        output[7].val = 94;
        output[8].val = -29;
        output[9].val = -48;
        output[10].val = -63;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[11];
        answer[0].val = -63;
        answer[1].val = -61;
        answer[2].val = -52;
        answer[3].val = -48;
        answer[4].val = -41;
        answer[5].val = -29;
        answer[6].val = 64;
        answer[7].val = 67;
        answer[8].val = 73;
        answer[9].val = 94;
        answer[10].val = 95;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00077() {
        int[] output = new int[6];
        output[0] = 58;
        output[1] = -51;
        output[2] = 68;
        output[3] = -10;
        output[4] = 38;
        output[5] = 8;
        Sorting.radixSort(output);
        int[] answer = new int[6];
        answer[0] = -51;
        answer[1] = -10;
        answer[2] = 8;
        answer[3] = 38;
        answer[4] = 58;
        answer[5] = 68;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00078() {
        TimeTicket[] output = new TimeTicket[23];
        output[0].val = 79;
        output[1].val = 29;
        output[2].val = -33;
        output[3].val = 66;
        output[4].val = 59;
        output[5].val = 98;
        output[6].val = -55;
        output[7].val = 97;
        output[8].val = 46;
        output[9].val = -46;
        output[10].val = 21;
        output[11].val = -99;
        output[12].val = 20;
        output[13].val = -16;
        output[14].val = 26;
        output[15].val = -55;
        output[16].val = 84;
        output[17].val = 5;
        output[18].val = 57;
        output[19].val = -15;
        output[20].val = -64;
        output[21].val = 57;
        output[22].val = 11;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[23];
        answer[0].val = -99;
        answer[1].val = -64;
        answer[2].val = -55;
        answer[3].val = -55;
        answer[4].val = -46;
        answer[5].val = -33;
        answer[6].val = -16;
        answer[7].val = -15;
        answer[8].val = 5;
        answer[9].val = 11;
        answer[10].val = 20;
        answer[11].val = 21;
        answer[12].val = 26;
        answer[13].val = 29;
        answer[14].val = 46;
        answer[15].val = 57;
        answer[16].val = 57;
        answer[17].val = 59;
        answer[18].val = 66;
        answer[19].val = 79;
        answer[20].val = 84;
        answer[21].val = 97;
        answer[22].val = 98;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00079() {
        TimeTicket[] output = new TimeTicket[4];
        output[0].val = -84;
        output[1].val = -46;
        output[2].val = 41;
        output[3].val = 11;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[4];
        answer[0].val = -84;
        answer[1].val = -46;
        answer[2].val = 11;
        answer[3].val = 41;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00080() {
        TimeTicket[] output = new TimeTicket[1];
        output[0].val = 14;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[1];
        answer[0].val = 14;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00081() {
        TimeTicket[] output = new TimeTicket[26];
        output[0].val = 31;
        output[1].val = 17;
        output[2].val = 95;
        output[3].val = -83;
        output[4].val = -78;
        output[5].val = 39;
        output[6].val = -80;
        output[7].val = 51;
        output[8].val = -16;
        output[9].val = -86;
        output[10].val = 90;
        output[11].val = 85;
        output[12].val = 13;
        output[13].val = -10;
        output[14].val = -63;
        output[15].val = -94;
        output[16].val = 53;
        output[17].val = -50;
        output[18].val = -35;
        output[19].val = -96;
        output[20].val = -23;
        output[21].val = -81;
        output[22].val = -72;
        output[23].val = -27;
        output[24].val = -20;
        output[25].val = -78;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[26];
        answer[0].val = -96;
        answer[1].val = -94;
        answer[2].val = -86;
        answer[3].val = -83;
        answer[4].val = -81;
        answer[5].val = -80;
        answer[6].val = -78;
        answer[7].val = -78;
        answer[8].val = -72;
        answer[9].val = -63;
        answer[10].val = -50;
        answer[11].val = -35;
        answer[12].val = -27;
        answer[13].val = -23;
        answer[14].val = -20;
        answer[15].val = -16;
        answer[16].val = -10;
        answer[17].val = 13;
        answer[18].val = 17;
        answer[19].val = 31;
        answer[20].val = 39;
        answer[21].val = 51;
        answer[22].val = 53;
        answer[23].val = 85;
        answer[24].val = 90;
        answer[25].val = 95;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00082() {
        TimeTicket[] output = new TimeTicket[5];
        output[0].val = 66;
        output[1].val = -61;
        output[2].val = 50;
        output[3].val = -63;
        output[4].val = -58;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[5];
        answer[0].val = -63;
        answer[1].val = -61;
        answer[2].val = -58;
        answer[3].val = 50;
        answer[4].val = 66;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00083() {
        int[] output = new int[27];
        output[0] = 18;
        output[1] = -16;
        output[2] = 8;
        output[3] = -27;
        output[4] = 92;
        output[5] = -11;
        output[6] = -39;
        output[7] = 91;
        output[8] = 17;
        output[9] = 89;
        output[10] = 6;
        output[11] = 86;
        output[12] = 5;
        output[13] = 91;
        output[14] = 53;
        output[15] = 3;
        output[16] = 62;
        output[17] = -9;
        output[18] = 72;
        output[19] = 23;
        output[20] = 43;
        output[21] = 65;
        output[22] = -4;
        output[23] = -64;
        output[24] = 27;
        output[25] = 64;
        output[26] = 81;
        Sorting.radixSort(output);
        int[] answer = new int[27];
        answer[0] = -64;
        answer[1] = -39;
        answer[2] = -27;
        answer[3] = -16;
        answer[4] = -11;
        answer[5] = -9;
        answer[6] = -4;
        answer[7] = 3;
        answer[8] = 5;
        answer[9] = 6;
        answer[10] = 8;
        answer[11] = 17;
        answer[12] = 18;
        answer[13] = 23;
        answer[14] = 27;
        answer[15] = 43;
        answer[16] = 53;
        answer[17] = 62;
        answer[18] = 64;
        answer[19] = 65;
        answer[20] = 72;
        answer[21] = 81;
        answer[22] = 86;
        answer[23] = 89;
        answer[24] = 91;
        answer[25] = 91;
        answer[26] = 92;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00084() {
        TimeTicket[] output = new TimeTicket[9];
        output[0].val = 88;
        output[1].val = 33;
        output[2].val = -50;
        output[3].val = -49;
        output[4].val = 20;
        output[5].val = -70;
        output[6].val = -56;
        output[7].val = 34;
        output[8].val = -53;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[9];
        answer[0].val = -70;
        answer[1].val = -56;
        answer[2].val = -53;
        answer[3].val = -50;
        answer[4].val = -49;
        answer[5].val = 20;
        answer[6].val = 33;
        answer[7].val = 34;
        answer[8].val = 88;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00085() {
        TimeTicket[] output = new TimeTicket[29];
        output[0].val = 21;
        output[1].val = 43;
        output[2].val = -84;
        output[3].val = 49;
        output[4].val = -48;
        output[5].val = 53;
        output[6].val = 2;
        output[7].val = 25;
        output[8].val = -78;
        output[9].val = 19;
        output[10].val = 78;
        output[11].val = 21;
        output[12].val = -98;
        output[13].val = -50;
        output[14].val = 23;
        output[15].val = -49;
        output[16].val = 28;
        output[17].val = -68;
        output[18].val = 38;
        output[19].val = -63;
        output[20].val = -36;
        output[21].val = -68;
        output[22].val = -70;
        output[23].val = -29;
        output[24].val = -82;
        output[25].val = -24;
        output[26].val = 23;
        output[27].val = 0;
        output[28].val = 72;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[29];
        answer[0].val = -98;
        answer[1].val = -84;
        answer[2].val = -82;
        answer[3].val = -78;
        answer[4].val = -70;
        answer[5].val = -68;
        answer[6].val = -68;
        answer[7].val = -63;
        answer[8].val = -50;
        answer[9].val = -49;
        answer[10].val = -48;
        answer[11].val = -36;
        answer[12].val = -29;
        answer[13].val = -24;
        answer[14].val = 0;
        answer[15].val = 2;
        answer[16].val = 19;
        answer[17].val = 21;
        answer[18].val = 21;
        answer[19].val = 23;
        answer[20].val = 23;
        answer[21].val = 25;
        answer[22].val = 28;
        answer[23].val = 38;
        answer[24].val = 43;
        answer[25].val = 49;
        answer[26].val = 53;
        answer[27].val = 72;
        answer[28].val = 78;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00086() {
        TimeTicket[] output = new TimeTicket[15];
        output[0].val = -88;
        output[1].val = 76;
        output[2].val = -70;
        output[3].val = -24;
        output[4].val = 93;
        output[5].val = 95;
        output[6].val = 7;
        output[7].val = 32;
        output[8].val = 27;
        output[9].val = 32;
        output[10].val = -45;
        output[11].val = -86;
        output[12].val = -95;
        output[13].val = 5;
        output[14].val = 84;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[15];
        answer[0].val = -95;
        answer[1].val = -88;
        answer[2].val = -86;
        answer[3].val = -70;
        answer[4].val = -45;
        answer[5].val = -24;
        answer[6].val = 5;
        answer[7].val = 7;
        answer[8].val = 27;
        answer[9].val = 32;
        answer[10].val = 32;
        answer[11].val = 76;
        answer[12].val = 84;
        answer[13].val = 93;
        answer[14].val = 95;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00087() {
        TimeTicket[] output = new TimeTicket[23];
        output[0].val = -39;
        output[1].val = -10;
        output[2].val = 27;
        output[3].val = 93;
        output[4].val = 79;
        output[5].val = 99;
        output[6].val = 72;
        output[7].val = 90;
        output[8].val = 34;
        output[9].val = -71;
        output[10].val = -28;
        output[11].val = 3;
        output[12].val = -8;
        output[13].val = -66;
        output[14].val = -9;
        output[15].val = 49;
        output[16].val = 18;
        output[17].val = 79;
        output[18].val = -54;
        output[19].val = -37;
        output[20].val = 36;
        output[21].val = -83;
        output[22].val = -55;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[23];
        answer[0].val = -83;
        answer[1].val = -71;
        answer[2].val = -66;
        answer[3].val = -55;
        answer[4].val = -54;
        answer[5].val = -39;
        answer[6].val = -37;
        answer[7].val = -28;
        answer[8].val = -10;
        answer[9].val = -9;
        answer[10].val = -8;
        answer[11].val = 3;
        answer[12].val = 18;
        answer[13].val = 27;
        answer[14].val = 34;
        answer[15].val = 36;
        answer[16].val = 49;
        answer[17].val = 72;
        answer[18].val = 79;
        answer[19].val = 79;
        answer[20].val = 90;
        answer[21].val = 93;
        answer[22].val = 99;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00088() {
        TimeTicket[] output = new TimeTicket[29];
        output[0].val = -66;
        output[1].val = -12;
        output[2].val = -64;
        output[3].val = 20;
        output[4].val = -6;
        output[5].val = 94;
        output[6].val = -38;
        output[7].val = -20;
        output[8].val = -41;
        output[9].val = -23;
        output[10].val = -86;
        output[11].val = -56;
        output[12].val = 90;
        output[13].val = 29;
        output[14].val = -60;
        output[15].val = 58;
        output[16].val = 8;
        output[17].val = 87;
        output[18].val = -89;
        output[19].val = -27;
        output[20].val = -18;
        output[21].val = -34;
        output[22].val = -94;
        output[23].val = -87;
        output[24].val = -60;
        output[25].val = 68;
        output[26].val = 72;
        output[27].val = -33;
        output[28].val = -90;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[29];
        answer[0].val = -94;
        answer[1].val = -90;
        answer[2].val = -89;
        answer[3].val = -87;
        answer[4].val = -86;
        answer[5].val = -66;
        answer[6].val = -64;
        answer[7].val = -60;
        answer[8].val = -60;
        answer[9].val = -56;
        answer[10].val = -41;
        answer[11].val = -38;
        answer[12].val = -34;
        answer[13].val = -33;
        answer[14].val = -27;
        answer[15].val = -23;
        answer[16].val = -20;
        answer[17].val = -18;
        answer[18].val = -12;
        answer[19].val = -6;
        answer[20].val = 8;
        answer[21].val = 20;
        answer[22].val = 29;
        answer[23].val = 58;
        answer[24].val = 68;
        answer[25].val = 72;
        answer[26].val = 87;
        answer[27].val = 90;
        answer[28].val = 94;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00089() {
        int[] output = new int[8];
        output[0] = -38;
        output[1] = 52;
        output[2] = 51;
        output[3] = 83;
        output[4] = -93;
        output[5] = 64;
        output[6] = 72;
        output[7] = 92;
        Sorting.radixSort(output);
        int[] answer = new int[8];
        answer[0] = -93;
        answer[1] = -38;
        answer[2] = 51;
        answer[3] = 52;
        answer[4] = 64;
        answer[5] = 72;
        answer[6] = 83;
        answer[7] = 92;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00090() {
        TimeTicket[] output = new TimeTicket[24];
        output[0].val = 90;
        output[1].val = 79;
        output[2].val = 35;
        output[3].val = 37;
        output[4].val = 72;
        output[5].val = 51;
        output[6].val = 66;
        output[7].val = 57;
        output[8].val = -25;
        output[9].val = 9;
        output[10].val = -54;
        output[11].val = -21;
        output[12].val = -98;
        output[13].val = -47;
        output[14].val = 33;
        output[15].val = 63;
        output[16].val = 57;
        output[17].val = 1;
        output[18].val = 70;
        output[19].val = 11;
        output[20].val = 40;
        output[21].val = -86;
        output[22].val = -84;
        output[23].val = 43;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[24];
        answer[0].val = -98;
        answer[1].val = -86;
        answer[2].val = -84;
        answer[3].val = -54;
        answer[4].val = -47;
        answer[5].val = -25;
        answer[6].val = -21;
        answer[7].val = 1;
        answer[8].val = 9;
        answer[9].val = 11;
        answer[10].val = 33;
        answer[11].val = 35;
        answer[12].val = 37;
        answer[13].val = 40;
        answer[14].val = 43;
        answer[15].val = 51;
        answer[16].val = 57;
        answer[17].val = 57;
        answer[18].val = 63;
        answer[19].val = 66;
        answer[20].val = 70;
        answer[21].val = 72;
        answer[22].val = 79;
        answer[23].val = 90;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00091() {
        TimeTicket[] output = new TimeTicket[7];
        output[0].val = -48;
        output[1].val = -17;
        output[2].val = 2;
        output[3].val = -15;
        output[4].val = 73;
        output[5].val = -75;
        output[6].val = 79;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[7];
        answer[0].val = -75;
        answer[1].val = -48;
        answer[2].val = -17;
        answer[3].val = -15;
        answer[4].val = 2;
        answer[5].val = 73;
        answer[6].val = 79;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00092() {
        TimeTicket[] output = new TimeTicket[1];
        output[0].val = -35;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[1];
        answer[0].val = -35;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00093() {
        TimeTicket[] output = new TimeTicket[5];
        output[0].val = 29;
        output[1].val = -78;
        output[2].val = -58;
        output[3].val = 21;
        output[4].val = 96;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[5];
        answer[0].val = -78;
        answer[1].val = -58;
        answer[2].val = 21;
        answer[3].val = 29;
        answer[4].val = 96;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00094() {
        TimeTicket[] output = new TimeTicket[26];
        output[0].val = 62;
        output[1].val = 96;
        output[2].val = -88;
        output[3].val = -68;
        output[4].val = -28;
        output[5].val = 34;
        output[6].val = -67;
        output[7].val = 49;
        output[8].val = 87;
        output[9].val = 7;
        output[10].val = -76;
        output[11].val = 93;
        output[12].val = -62;
        output[13].val = -18;
        output[14].val = 8;
        output[15].val = -5;
        output[16].val = 99;
        output[17].val = -4;
        output[18].val = -76;
        output[19].val = -93;
        output[20].val = 88;
        output[21].val = -66;
        output[22].val = -42;
        output[23].val = 19;
        output[24].val = 67;
        output[25].val = -69;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[26];
        answer[0].val = -93;
        answer[1].val = -88;
        answer[2].val = -76;
        answer[3].val = -76;
        answer[4].val = -69;
        answer[5].val = -68;
        answer[6].val = -67;
        answer[7].val = -66;
        answer[8].val = -62;
        answer[9].val = -42;
        answer[10].val = -28;
        answer[11].val = -18;
        answer[12].val = -5;
        answer[13].val = -4;
        answer[14].val = 7;
        answer[15].val = 8;
        answer[16].val = 19;
        answer[17].val = 34;
        answer[18].val = 49;
        answer[19].val = 62;
        answer[20].val = 67;
        answer[21].val = 87;
        answer[22].val = 88;
        answer[23].val = 93;
        answer[24].val = 96;
        answer[25].val = 99;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00095() {
        int[] output = new int[25];
        output[0] = -71;
        output[1] = 64;
        output[2] = -71;
        output[3] = -16;
        output[4] = -84;
        output[5] = 48;
        output[6] = -97;
        output[7] = 29;
        output[8] = 12;
        output[9] = -76;
        output[10] = -60;
        output[11] = 7;
        output[12] = -32;
        output[13] = -51;
        output[14] = -45;
        output[15] = 20;
        output[16] = -97;
        output[17] = -51;
        output[18] = 98;
        output[19] = 70;
        output[20] = 95;
        output[21] = -23;
        output[22] = 7;
        output[23] = -71;
        output[24] = 67;
        Sorting.radixSort(output);
        int[] answer = new int[25];
        answer[0] = -97;
        answer[1] = -97;
        answer[2] = -84;
        answer[3] = -76;
        answer[4] = -71;
        answer[5] = -71;
        answer[6] = -71;
        answer[7] = -60;
        answer[8] = -51;
        answer[9] = -51;
        answer[10] = -45;
        answer[11] = -32;
        answer[12] = -23;
        answer[13] = -16;
        answer[14] = 7;
        answer[15] = 7;
        answer[16] = 12;
        answer[17] = 20;
        answer[18] = 29;
        answer[19] = 48;
        answer[20] = 64;
        answer[21] = 67;
        answer[22] = 70;
        answer[23] = 95;
        answer[24] = 98;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00096() {
        TimeTicket[] output = new TimeTicket[11];
        output[0].val = -76;
        output[1].val = -54;
        output[2].val = -58;
        output[3].val = 95;
        output[4].val = -27;
        output[5].val = 41;
        output[6].val = 54;
        output[7].val = -86;
        output[8].val = 62;
        output[9].val = -44;
        output[10].val = -15;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[11];
        answer[0].val = -86;
        answer[1].val = -76;
        answer[2].val = -58;
        answer[3].val = -54;
        answer[4].val = -44;
        answer[5].val = -27;
        answer[6].val = -15;
        answer[7].val = 41;
        answer[8].val = 54;
        answer[9].val = 62;
        answer[10].val = 95;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00097() {
        TimeTicket[] output = new TimeTicket[15];
        output[0].val = 15;
        output[1].val = -91;
        output[2].val = -24;
        output[3].val = -98;
        output[4].val = -90;
        output[5].val = 84;
        output[6].val = -12;
        output[7].val = 92;
        output[8].val = 32;
        output[9].val = 6;
        output[10].val = 36;
        output[11].val = 10;
        output[12].val = 18;
        output[13].val = -69;
        output[14].val = -38;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[15];
        answer[0].val = -98;
        answer[1].val = -91;
        answer[2].val = -90;
        answer[3].val = -69;
        answer[4].val = -38;
        answer[5].val = -24;
        answer[6].val = -12;
        answer[7].val = 6;
        answer[8].val = 10;
        answer[9].val = 15;
        answer[10].val = 18;
        answer[11].val = 32;
        answer[12].val = 36;
        answer[13].val = 84;
        answer[14].val = 92;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00098() {
        TimeTicket[] output = new TimeTicket[15];
        output[0].val = -47;
        output[1].val = 47;
        output[2].val = 23;
        output[3].val = 13;
        output[4].val = 10;
        output[5].val = 93;
        output[6].val = 54;
        output[7].val = 35;
        output[8].val = -22;
        output[9].val = -80;
        output[10].val = -49;
        output[11].val = 45;
        output[12].val = 35;
        output[13].val = -87;
        output[14].val = -65;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[15];
        answer[0].val = -87;
        answer[1].val = -80;
        answer[2].val = -65;
        answer[3].val = -49;
        answer[4].val = -47;
        answer[5].val = -22;
        answer[6].val = 10;
        answer[7].val = 13;
        answer[8].val = 23;
        answer[9].val = 35;
        answer[10].val = 35;
        answer[11].val = 45;
        answer[12].val = 47;
        answer[13].val = 54;
        answer[14].val = 93;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00099() {
        TimeTicket[] output = new TimeTicket[2];
        output[0].val = -8;
        output[1].val = -51;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[2];
        answer[0].val = -51;
        answer[1].val = -8;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00100() {
        TimeTicket[] output = new TimeTicket[4];
        output[0].val = 713819953;
        output[1].val = -918229302;
        output[2].val = 152102765;
        output[3].val = 905649782;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[4];
        answer[0].val = -918229302;
        answer[1].val = 152102765;
        answer[2].val = 713819953;
        answer[3].val = 905649782;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00101() {
        int[] output = new int[26];
        output[0] = 695723721;
        output[1] = 899953056;
        output[2] = -899630346;
        output[3] = 845357059;
        output[4] = -879559996;
        output[5] = -194469896;
        output[6] = -265080688;
        output[7] = -813872143;
        output[8] = 120038780;
        output[9] = 623004539;
        output[10] = -443195942;
        output[11] = -985793147;
        output[12] = 571740417;
        output[13] = -812973390;
        output[14] = -466769787;
        output[15] = -67735472;
        output[16] = 663313914;
        output[17] = 197882871;
        output[18] = 349523354;
        output[19] = -910274530;
        output[20] = 907153928;
        output[21] = -417696485;
        output[22] = -615069228;
        output[23] = -38415221;
        output[24] = -47335066;
        output[25] = 56730148;
        Sorting.radixSort(output);
        int[] answer = new int[26];
        answer[0] = -985793147;
        answer[1] = -910274530;
        answer[2] = -899630346;
        answer[3] = -879559996;
        answer[4] = -813872143;
        answer[5] = -812973390;
        answer[6] = -615069228;
        answer[7] = -466769787;
        answer[8] = -443195942;
        answer[9] = -417696485;
        answer[10] = -265080688;
        answer[11] = -194469896;
        answer[12] = -67735472;
        answer[13] = -47335066;
        answer[14] = -38415221;
        answer[15] = 56730148;
        answer[16] = 120038780;
        answer[17] = 197882871;
        answer[18] = 349523354;
        answer[19] = 571740417;
        answer[20] = 623004539;
        answer[21] = 663313914;
        answer[22] = 695723721;
        answer[23] = 845357059;
        answer[24] = 899953056;
        answer[25] = 907153928;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00102() {
        TimeTicket[] output = new TimeTicket[17];
        output[0].val = 627173957;
        output[1].val = 489504932;
        output[2].val = 86867856;
        output[3].val = -372197109;
        output[4].val = 319214657;
        output[5].val = -145654627;
        output[6].val = -5876834;
        output[7].val = 908706655;
        output[8].val = -316067098;
        output[9].val = 255369317;
        output[10].val = -252997328;
        output[11].val = 999846596;
        output[12].val = 854309545;
        output[13].val = -176224633;
        output[14].val = 947386511;
        output[15].val = -372827717;
        output[16].val = -542553882;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[17];
        answer[0].val = -542553882;
        answer[1].val = -372827717;
        answer[2].val = -372197109;
        answer[3].val = -316067098;
        answer[4].val = -252997328;
        answer[5].val = -176224633;
        answer[6].val = -145654627;
        answer[7].val = -5876834;
        answer[8].val = 86867856;
        answer[9].val = 255369317;
        answer[10].val = 319214657;
        answer[11].val = 489504932;
        answer[12].val = 627173957;
        answer[13].val = 854309545;
        answer[14].val = 908706655;
        answer[15].val = 947386511;
        answer[16].val = 999846596;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00103() {
        TimeTicket[] output = new TimeTicket[10];
        output[0].val = 754013186;
        output[1].val = -847669256;
        output[2].val = 331506175;
        output[3].val = 32859492;
        output[4].val = 926696700;
        output[5].val = -731728266;
        output[6].val = -356080935;
        output[7].val = -574141573;
        output[8].val = 581888977;
        output[9].val = 263358754;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[10];
        answer[0].val = -847669256;
        answer[1].val = -731728266;
        answer[2].val = -574141573;
        answer[3].val = -356080935;
        answer[4].val = 32859492;
        answer[5].val = 263358754;
        answer[6].val = 331506175;
        answer[7].val = 581888977;
        answer[8].val = 754013186;
        answer[9].val = 926696700;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00104() {
        TimeTicket[] output = new TimeTicket[8];
        output[0].val = 363037470;
        output[1].val = -754260215;
        output[2].val = 92328859;
        output[3].val = -81193157;
        output[4].val = -610187797;
        output[5].val = 363636262;
        output[6].val = -271587115;
        output[7].val = -156312503;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[8];
        answer[0].val = -754260215;
        answer[1].val = -610187797;
        answer[2].val = -271587115;
        answer[3].val = -156312503;
        answer[4].val = -81193157;
        answer[5].val = 92328859;
        answer[6].val = 363037470;
        answer[7].val = 363636262;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00105() {
        TimeTicket[] output = new TimeTicket[15];
        output[0].val = -832064712;
        output[1].val = -736155991;
        output[2].val = 992106413;
        output[3].val = 669664500;
        output[4].val = -274876511;
        output[5].val = 578640983;
        output[6].val = 70453482;
        output[7].val = 406442153;
        output[8].val = -747549950;
        output[9].val = 199073365;
        output[10].val = 236904395;
        output[11].val = -257042995;
        output[12].val = -42938806;
        output[13].val = -217083169;
        output[14].val = 78459165;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[15];
        answer[0].val = -832064712;
        answer[1].val = -747549950;
        answer[2].val = -736155991;
        answer[3].val = -274876511;
        answer[4].val = -257042995;
        answer[5].val = -217083169;
        answer[6].val = -42938806;
        answer[7].val = 70453482;
        answer[8].val = 78459165;
        answer[9].val = 199073365;
        answer[10].val = 236904395;
        answer[11].val = 406442153;
        answer[12].val = 578640983;
        answer[13].val = 669664500;
        answer[14].val = 992106413;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00106() {
        TimeTicket[] output = new TimeTicket[1];
        output[0].val = -393670231;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[1];
        answer[0].val = -393670231;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00107() {
        int[] output = new int[17];
        output[0] = 993683842;
        output[1] = 789819644;
        output[2] = -315571057;
        output[3] = 803416047;
        output[4] = -984859724;
        output[5] = 867055397;
        output[6] = 562943814;
        output[7] = 305883238;
        output[8] = -195267274;
        output[9] = 991862215;
        output[10] = 941070968;
        output[11] = -631302925;
        output[12] = 172477559;
        output[13] = -628562903;
        output[14] = -241879233;
        output[15] = -658387444;
        output[16] = -268419840;
        Sorting.radixSort(output);
        int[] answer = new int[17];
        answer[0] = -984859724;
        answer[1] = -658387444;
        answer[2] = -631302925;
        answer[3] = -628562903;
        answer[4] = -315571057;
        answer[5] = -268419840;
        answer[6] = -241879233;
        answer[7] = -195267274;
        answer[8] = 172477559;
        answer[9] = 305883238;
        answer[10] = 562943814;
        answer[11] = 789819644;
        answer[12] = 803416047;
        answer[13] = 867055397;
        answer[14] = 941070968;
        answer[15] = 991862215;
        answer[16] = 993683842;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00108() {
        TimeTicket[] output = new TimeTicket[27];
        output[0].val = 474761347;
        output[1].val = 338776688;
        output[2].val = -766981884;
        output[3].val = 218135416;
        output[4].val = 600212398;
        output[5].val = -534778785;
        output[6].val = 126977619;
        output[7].val = 623010610;
        output[8].val = -351035151;
        output[9].val = 1175374;
        output[10].val = 514037208;
        output[11].val = -780843693;
        output[12].val = 564276113;
        output[13].val = 730964880;
        output[14].val = 436024843;
        output[15].val = 217317350;
        output[16].val = -475966693;
        output[17].val = 365509639;
        output[18].val = 985839248;
        output[19].val = -314911994;
        output[20].val = -323226437;
        output[21].val = 272118783;
        output[22].val = 85628537;
        output[23].val = 385659005;
        output[24].val = 370868805;
        output[25].val = -953838095;
        output[26].val = -564769464;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[27];
        answer[0].val = -953838095;
        answer[1].val = -780843693;
        answer[2].val = -766981884;
        answer[3].val = -564769464;
        answer[4].val = -534778785;
        answer[5].val = -475966693;
        answer[6].val = -351035151;
        answer[7].val = -323226437;
        answer[8].val = -314911994;
        answer[9].val = 1175374;
        answer[10].val = 85628537;
        answer[11].val = 126977619;
        answer[12].val = 217317350;
        answer[13].val = 218135416;
        answer[14].val = 272118783;
        answer[15].val = 338776688;
        answer[16].val = 365509639;
        answer[17].val = 370868805;
        answer[18].val = 385659005;
        answer[19].val = 436024843;
        answer[20].val = 474761347;
        answer[21].val = 514037208;
        answer[22].val = 564276113;
        answer[23].val = 600212398;
        answer[24].val = 623010610;
        answer[25].val = 730964880;
        answer[26].val = 985839248;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00109() {
        TimeTicket[] output = new TimeTicket[25];
        output[0].val = 742975508;
        output[1].val = -236290971;
        output[2].val = -467893202;
        output[3].val = 46106323;
        output[4].val = -603814646;
        output[5].val = -271560397;
        output[6].val = -80181762;
        output[7].val = -952565709;
        output[8].val = -215589963;
        output[9].val = -47359082;
        output[10].val = -921505742;
        output[11].val = 444686853;
        output[12].val = 128774522;
        output[13].val = -703112373;
        output[14].val = -81642679;
        output[15].val = 195952476;
        output[16].val = 896323403;
        output[17].val = -914644488;
        output[18].val = 68773165;
        output[19].val = -16546395;
        output[20].val = 429589383;
        output[21].val = 536028028;
        output[22].val = -399138145;
        output[23].val = 625358149;
        output[24].val = -846687396;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[25];
        answer[0].val = -952565709;
        answer[1].val = -921505742;
        answer[2].val = -914644488;
        answer[3].val = -846687396;
        answer[4].val = -703112373;
        answer[5].val = -603814646;
        answer[6].val = -467893202;
        answer[7].val = -399138145;
        answer[8].val = -271560397;
        answer[9].val = -236290971;
        answer[10].val = -215589963;
        answer[11].val = -81642679;
        answer[12].val = -80181762;
        answer[13].val = -47359082;
        answer[14].val = -16546395;
        answer[15].val = 46106323;
        answer[16].val = 68773165;
        answer[17].val = 128774522;
        answer[18].val = 195952476;
        answer[19].val = 429589383;
        answer[20].val = 444686853;
        answer[21].val = 536028028;
        answer[22].val = 625358149;
        answer[23].val = 742975508;
        answer[24].val = 896323403;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00110() {
        TimeTicket[] output = new TimeTicket[20];
        output[0].val = 821252780;
        output[1].val = 710371606;
        output[2].val = -745794171;
        output[3].val = -732101338;
        output[4].val = 804613796;
        output[5].val = -383289375;
        output[6].val = -301969083;
        output[7].val = 877475616;
        output[8].val = 456428337;
        output[9].val = 81625699;
        output[10].val = 937244690;
        output[11].val = -320044803;
        output[12].val = 366876816;
        output[13].val = -87646593;
        output[14].val = 107764471;
        output[15].val = 949382907;
        output[16].val = -476844474;
        output[17].val = -162685841;
        output[18].val = -783521828;
        output[19].val = 773473320;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[20];
        answer[0].val = -783521828;
        answer[1].val = -745794171;
        answer[2].val = -732101338;
        answer[3].val = -476844474;
        answer[4].val = -383289375;
        answer[5].val = -320044803;
        answer[6].val = -301969083;
        answer[7].val = -162685841;
        answer[8].val = -87646593;
        answer[9].val = 81625699;
        answer[10].val = 107764471;
        answer[11].val = 366876816;
        answer[12].val = 456428337;
        answer[13].val = 710371606;
        answer[14].val = 773473320;
        answer[15].val = 804613796;
        answer[16].val = 821252780;
        answer[17].val = 877475616;
        answer[18].val = 937244690;
        answer[19].val = 949382907;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00111() {
        TimeTicket[] output = new TimeTicket[18];
        output[0].val = -360480981;
        output[1].val = -950814379;
        output[2].val = -55583595;
        output[3].val = 615279398;
        output[4].val = 221145425;
        output[5].val = 134175765;
        output[6].val = 752730084;
        output[7].val = 683285766;
        output[8].val = 707271728;
        output[9].val = 540422446;
        output[10].val = -757902687;
        output[11].val = 162655642;
        output[12].val = -811075997;
        output[13].val = 420331379;
        output[14].val = -51524915;
        output[15].val = -758844804;
        output[16].val = -133346947;
        output[17].val = 996483989;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[18];
        answer[0].val = -950814379;
        answer[1].val = -811075997;
        answer[2].val = -758844804;
        answer[3].val = -757902687;
        answer[4].val = -360480981;
        answer[5].val = -133346947;
        answer[6].val = -55583595;
        answer[7].val = -51524915;
        answer[8].val = 134175765;
        answer[9].val = 162655642;
        answer[10].val = 221145425;
        answer[11].val = 420331379;
        answer[12].val = 540422446;
        answer[13].val = 615279398;
        answer[14].val = 683285766;
        answer[15].val = 707271728;
        answer[16].val = 752730084;
        answer[17].val = 996483989;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00112() {
        TimeTicket[] output = new TimeTicket[29];
        output[0].val = 225218762;
        output[1].val = 29347183;
        output[2].val = 774648734;
        output[3].val = -432568023;
        output[4].val = 76363847;
        output[5].val = -749803274;
        output[6].val = -746531182;
        output[7].val = -988236498;
        output[8].val = 234652381;
        output[9].val = -384974084;
        output[10].val = -77610483;
        output[11].val = 888433414;
        output[12].val = -408111884;
        output[13].val = 151696418;
        output[14].val = -936576529;
        output[15].val = -110518086;
        output[16].val = 250385726;
        output[17].val = 554406890;
        output[18].val = -397494742;
        output[19].val = -346214145;
        output[20].val = 840774531;
        output[21].val = 597030949;
        output[22].val = 40403191;
        output[23].val = 119337461;
        output[24].val = 730286858;
        output[25].val = -331805060;
        output[26].val = 475558699;
        output[27].val = 163652682;
        output[28].val = 55449365;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[29];
        answer[0].val = -988236498;
        answer[1].val = -936576529;
        answer[2].val = -749803274;
        answer[3].val = -746531182;
        answer[4].val = -432568023;
        answer[5].val = -408111884;
        answer[6].val = -397494742;
        answer[7].val = -384974084;
        answer[8].val = -346214145;
        answer[9].val = -331805060;
        answer[10].val = -110518086;
        answer[11].val = -77610483;
        answer[12].val = 29347183;
        answer[13].val = 40403191;
        answer[14].val = 55449365;
        answer[15].val = 76363847;
        answer[16].val = 119337461;
        answer[17].val = 151696418;
        answer[18].val = 163652682;
        answer[19].val = 225218762;
        answer[20].val = 234652381;
        answer[21].val = 250385726;
        answer[22].val = 475558699;
        answer[23].val = 554406890;
        answer[24].val = 597030949;
        answer[25].val = 730286858;
        answer[26].val = 774648734;
        answer[27].val = 840774531;
        answer[28].val = 888433414;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00113() {
        int[] output = new int[15];
        output[0] = -495510732;
        output[1] = -785949337;
        output[2] = 126858138;
        output[3] = -50781093;
        output[4] = 401689253;
        output[5] = -7874709;
        output[6] = 726858354;
        output[7] = -690864330;
        output[8] = -879500215;
        output[9] = -205525788;
        output[10] = 202378883;
        output[11] = -674759941;
        output[12] = 665547263;
        output[13] = 889266229;
        output[14] = -96460721;
        Sorting.radixSort(output);
        int[] answer = new int[15];
        answer[0] = -879500215;
        answer[1] = -785949337;
        answer[2] = -690864330;
        answer[3] = -674759941;
        answer[4] = -495510732;
        answer[5] = -205525788;
        answer[6] = -96460721;
        answer[7] = -50781093;
        answer[8] = -7874709;
        answer[9] = 126858138;
        answer[10] = 202378883;
        answer[11] = 401689253;
        answer[12] = 665547263;
        answer[13] = 726858354;
        answer[14] = 889266229;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00114() {
        TimeTicket[] output = new TimeTicket[18];
        output[0].val = -203528567;
        output[1].val = 439446388;
        output[2].val = 60537294;
        output[3].val = 616910379;
        output[4].val = -888472713;
        output[5].val = 367398156;
        output[6].val = -42867228;
        output[7].val = -377141080;
        output[8].val = 340655043;
        output[9].val = -41234754;
        output[10].val = 721098330;
        output[11].val = 777240857;
        output[12].val = 395736072;
        output[13].val = -287083119;
        output[14].val = 352200929;
        output[15].val = 699638528;
        output[16].val = 15460584;
        output[17].val = 356327383;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[18];
        answer[0].val = -888472713;
        answer[1].val = -377141080;
        answer[2].val = -287083119;
        answer[3].val = -203528567;
        answer[4].val = -42867228;
        answer[5].val = -41234754;
        answer[6].val = 15460584;
        answer[7].val = 60537294;
        answer[8].val = 340655043;
        answer[9].val = 352200929;
        answer[10].val = 356327383;
        answer[11].val = 367398156;
        answer[12].val = 395736072;
        answer[13].val = 439446388;
        answer[14].val = 616910379;
        answer[15].val = 699638528;
        answer[16].val = 721098330;
        answer[17].val = 777240857;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00115() {
        TimeTicket[] output = new TimeTicket[23];
        output[0].val = 82953010;
        output[1].val = 977573105;
        output[2].val = 104420604;
        output[3].val = -230649739;
        output[4].val = 389475243;
        output[5].val = 309041007;
        output[6].val = -87306953;
        output[7].val = 353571000;
        output[8].val = 933583455;
        output[9].val = -541367501;
        output[10].val = -712187812;
        output[11].val = 452058329;
        output[12].val = -828629541;
        output[13].val = -335852114;
        output[14].val = -469797518;
        output[15].val = -843680460;
        output[16].val = 305689473;
        output[17].val = 601803042;
        output[18].val = 91287331;
        output[19].val = -299728168;
        output[20].val = 872070736;
        output[21].val = 541513279;
        output[22].val = -242621662;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[23];
        answer[0].val = -843680460;
        answer[1].val = -828629541;
        answer[2].val = -712187812;
        answer[3].val = -541367501;
        answer[4].val = -469797518;
        answer[5].val = -335852114;
        answer[6].val = -299728168;
        answer[7].val = -242621662;
        answer[8].val = -230649739;
        answer[9].val = -87306953;
        answer[10].val = 82953010;
        answer[11].val = 91287331;
        answer[12].val = 104420604;
        answer[13].val = 305689473;
        answer[14].val = 309041007;
        answer[15].val = 353571000;
        answer[16].val = 389475243;
        answer[17].val = 452058329;
        answer[18].val = 541513279;
        answer[19].val = 601803042;
        answer[20].val = 872070736;
        answer[21].val = 933583455;
        answer[22].val = 977573105;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00116() {
        TimeTicket[] output = new TimeTicket[17];
        output[0].val = 186840633;
        output[1].val = 288681476;
        output[2].val = 91886954;
        output[3].val = 93163792;
        output[4].val = 904181863;
        output[5].val = -726251833;
        output[6].val = 605759744;
        output[7].val = -32420261;
        output[8].val = -908308606;
        output[9].val = -114504006;
        output[10].val = -81135681;
        output[11].val = 654041921;
        output[12].val = 377068460;
        output[13].val = 751868807;
        output[14].val = 818105070;
        output[15].val = 115996637;
        output[16].val = 442793950;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[17];
        answer[0].val = -908308606;
        answer[1].val = -726251833;
        answer[2].val = -114504006;
        answer[3].val = -81135681;
        answer[4].val = -32420261;
        answer[5].val = 91886954;
        answer[6].val = 93163792;
        answer[7].val = 115996637;
        answer[8].val = 186840633;
        answer[9].val = 288681476;
        answer[10].val = 377068460;
        answer[11].val = 442793950;
        answer[12].val = 605759744;
        answer[13].val = 654041921;
        answer[14].val = 751868807;
        answer[15].val = 818105070;
        answer[16].val = 904181863;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00117() {
        TimeTicket[] output = new TimeTicket[29];
        output[0].val = 549243495;
        output[1].val = 40073977;
        output[2].val = 944562863;
        output[3].val = 634657164;
        output[4].val = 556798847;
        output[5].val = 971844131;
        output[6].val = -191474914;
        output[7].val = -751550408;
        output[8].val = -51365890;
        output[9].val = -502747689;
        output[10].val = -318503332;
        output[11].val = -734111387;
        output[12].val = -515091491;
        output[13].val = 896586494;
        output[14].val = -643807418;
        output[15].val = 618951141;
        output[16].val = 427339065;
        output[17].val = -853128140;
        output[18].val = 155976424;
        output[19].val = -58592669;
        output[20].val = 790267859;
        output[21].val = 458478249;
        output[22].val = -686229543;
        output[23].val = -832970319;
        output[24].val = 751979200;
        output[25].val = 498229840;
        output[26].val = -609219327;
        output[27].val = -648512209;
        output[28].val = 500801138;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[29];
        answer[0].val = -853128140;
        answer[1].val = -832970319;
        answer[2].val = -751550408;
        answer[3].val = -734111387;
        answer[4].val = -686229543;
        answer[5].val = -648512209;
        answer[6].val = -643807418;
        answer[7].val = -609219327;
        answer[8].val = -515091491;
        answer[9].val = -502747689;
        answer[10].val = -318503332;
        answer[11].val = -191474914;
        answer[12].val = -58592669;
        answer[13].val = -51365890;
        answer[14].val = 40073977;
        answer[15].val = 155976424;
        answer[16].val = 427339065;
        answer[17].val = 458478249;
        answer[18].val = 498229840;
        answer[19].val = 500801138;
        answer[20].val = 549243495;
        answer[21].val = 556798847;
        answer[22].val = 618951141;
        answer[23].val = 634657164;
        answer[24].val = 751979200;
        answer[25].val = 790267859;
        answer[26].val = 896586494;
        answer[27].val = 944562863;
        answer[28].val = 971844131;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00118() {
        TimeTicket[] output = new TimeTicket[29];
        output[0].val = 921619505;
        output[1].val = -423697968;
        output[2].val = 184281461;
        output[3].val = 973317128;
        output[4].val = -691801682;
        output[5].val = -180393057;
        output[6].val = -533655752;
        output[7].val = -839933053;
        output[8].val = -104441252;
        output[9].val = -214005839;
        output[10].val = -835988537;
        output[11].val = 457817176;
        output[12].val = -513955898;
        output[13].val = -363399332;
        output[14].val = 738700300;
        output[15].val = -208374759;
        output[16].val = -100698870;
        output[17].val = -349298848;
        output[18].val = -21565610;
        output[19].val = 373011166;
        output[20].val = -871552737;
        output[21].val = 898225684;
        output[22].val = 560667823;
        output[23].val = -995638856;
        output[24].val = -949125740;
        output[25].val = -401259124;
        output[26].val = 688761201;
        output[27].val = -175099338;
        output[28].val = 344008349;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[29];
        answer[0].val = -995638856;
        answer[1].val = -949125740;
        answer[2].val = -871552737;
        answer[3].val = -839933053;
        answer[4].val = -835988537;
        answer[5].val = -691801682;
        answer[6].val = -533655752;
        answer[7].val = -513955898;
        answer[8].val = -423697968;
        answer[9].val = -401259124;
        answer[10].val = -363399332;
        answer[11].val = -349298848;
        answer[12].val = -214005839;
        answer[13].val = -208374759;
        answer[14].val = -180393057;
        answer[15].val = -175099338;
        answer[16].val = -104441252;
        answer[17].val = -100698870;
        answer[18].val = -21565610;
        answer[19].val = 184281461;
        answer[20].val = 344008349;
        answer[21].val = 373011166;
        answer[22].val = 457817176;
        answer[23].val = 560667823;
        answer[24].val = 688761201;
        answer[25].val = 738700300;
        answer[26].val = 898225684;
        answer[27].val = 921619505;
        answer[28].val = 973317128;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00119() {
        int[] output = new int[7];
        output[0] = -243306410;
        output[1] = -334192665;
        output[2] = 78270524;
        output[3] = -911473247;
        output[4] = 11201442;
        output[5] = 942815494;
        output[6] = 827579162;
        Sorting.radixSort(output);
        int[] answer = new int[7];
        answer[0] = -911473247;
        answer[1] = -334192665;
        answer[2] = -243306410;
        answer[3] = 11201442;
        answer[4] = 78270524;
        answer[5] = 827579162;
        answer[6] = 942815494;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00120() {
        TimeTicket[] output = new TimeTicket[29];
        output[0].val = 159509799;
        output[1].val = -624460913;
        output[2].val = -596747408;
        output[3].val = 275924994;
        output[4].val = 867962245;
        output[5].val = -930753054;
        output[6].val = 373282504;
        output[7].val = -994373658;
        output[8].val = -512505989;
        output[9].val = -743785537;
        output[10].val = 837211825;
        output[11].val = 434097248;
        output[12].val = 113385339;
        output[13].val = -117967707;
        output[14].val = -154129854;
        output[15].val = -483517510;
        output[16].val = 704868509;
        output[17].val = -608030837;
        output[18].val = 213294520;
        output[19].val = -131776661;
        output[20].val = 417335083;
        output[21].val = 880188380;
        output[22].val = -713011080;
        output[23].val = 133734784;
        output[24].val = -778825861;
        output[25].val = -532153496;
        output[26].val = 753405933;
        output[27].val = 309076031;
        output[28].val = -43266200;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[29];
        answer[0].val = -994373658;
        answer[1].val = -930753054;
        answer[2].val = -778825861;
        answer[3].val = -743785537;
        answer[4].val = -713011080;
        answer[5].val = -624460913;
        answer[6].val = -608030837;
        answer[7].val = -596747408;
        answer[8].val = -532153496;
        answer[9].val = -512505989;
        answer[10].val = -483517510;
        answer[11].val = -154129854;
        answer[12].val = -131776661;
        answer[13].val = -117967707;
        answer[14].val = -43266200;
        answer[15].val = 113385339;
        answer[16].val = 133734784;
        answer[17].val = 159509799;
        answer[18].val = 213294520;
        answer[19].val = 275924994;
        answer[20].val = 309076031;
        answer[21].val = 373282504;
        answer[22].val = 417335083;
        answer[23].val = 434097248;
        answer[24].val = 704868509;
        answer[25].val = 753405933;
        answer[26].val = 837211825;
        answer[27].val = 867962245;
        answer[28].val = 880188380;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00121() {
        TimeTicket[] output = new TimeTicket[25];
        output[0].val = -399835629;
        output[1].val = -557254003;
        output[2].val = 122884921;
        output[3].val = 127770187;
        output[4].val = -160956515;
        output[5].val = -83772874;
        output[6].val = 801070148;
        output[7].val = 199595251;
        output[8].val = 112235564;
        output[9].val = 270353718;
        output[10].val = -176096472;
        output[11].val = 916320548;
        output[12].val = -244929086;
        output[13].val = -481825204;
        output[14].val = -300923809;
        output[15].val = -813129361;
        output[16].val = 331882550;
        output[17].val = 489237002;
        output[18].val = -567021671;
        output[19].val = 928963007;
        output[20].val = 445827610;
        output[21].val = -530198371;
        output[22].val = -304118256;
        output[23].val = -563791570;
        output[24].val = 504077382;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[25];
        answer[0].val = -813129361;
        answer[1].val = -567021671;
        answer[2].val = -563791570;
        answer[3].val = -557254003;
        answer[4].val = -530198371;
        answer[5].val = -481825204;
        answer[6].val = -399835629;
        answer[7].val = -304118256;
        answer[8].val = -300923809;
        answer[9].val = -244929086;
        answer[10].val = -176096472;
        answer[11].val = -160956515;
        answer[12].val = -83772874;
        answer[13].val = 112235564;
        answer[14].val = 122884921;
        answer[15].val = 127770187;
        answer[16].val = 199595251;
        answer[17].val = 270353718;
        answer[18].val = 331882550;
        answer[19].val = 445827610;
        answer[20].val = 489237002;
        answer[21].val = 504077382;
        answer[22].val = 801070148;
        answer[23].val = 916320548;
        answer[24].val = 928963007;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00122() {
        TimeTicket[] output = new TimeTicket[28];
        output[0].val = 368674742;
        output[1].val = 537082902;
        output[2].val = 101512286;
        output[3].val = 838522995;
        output[4].val = -456661299;
        output[5].val = -431741052;
        output[6].val = -65892787;
        output[7].val = 980473986;
        output[8].val = -967127301;
        output[9].val = -56715407;
        output[10].val = -408922650;
        output[11].val = -938409190;
        output[12].val = -792392431;
        output[13].val = 535722410;
        output[14].val = -28545827;
        output[15].val = 27863385;
        output[16].val = 685936257;
        output[17].val = 113778907;
        output[18].val = -640950268;
        output[19].val = 515384436;
        output[20].val = 928482112;
        output[21].val = 43981551;
        output[22].val = 173542671;
        output[23].val = -197132986;
        output[24].val = 36883422;
        output[25].val = -75942498;
        output[26].val = 457385726;
        output[27].val = -559709392;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[28];
        answer[0].val = -967127301;
        answer[1].val = -938409190;
        answer[2].val = -792392431;
        answer[3].val = -640950268;
        answer[4].val = -559709392;
        answer[5].val = -456661299;
        answer[6].val = -431741052;
        answer[7].val = -408922650;
        answer[8].val = -197132986;
        answer[9].val = -75942498;
        answer[10].val = -65892787;
        answer[11].val = -56715407;
        answer[12].val = -28545827;
        answer[13].val = 27863385;
        answer[14].val = 36883422;
        answer[15].val = 43981551;
        answer[16].val = 101512286;
        answer[17].val = 113778907;
        answer[18].val = 173542671;
        answer[19].val = 368674742;
        answer[20].val = 457385726;
        answer[21].val = 515384436;
        answer[22].val = 535722410;
        answer[23].val = 537082902;
        answer[24].val = 685936257;
        answer[25].val = 838522995;
        answer[26].val = 928482112;
        answer[27].val = 980473986;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00123() {
        TimeTicket[] output = new TimeTicket[28];
        output[0].val = -444782717;
        output[1].val = 22186799;
        output[2].val = -616560185;
        output[3].val = -290356168;
        output[4].val = 241475056;
        output[5].val = 627765126;
        output[6].val = -624106646;
        output[7].val = 675660125;
        output[8].val = 121419103;
        output[9].val = 837762411;
        output[10].val = 143376481;
        output[11].val = 699342958;
        output[12].val = 822825367;
        output[13].val = 32454231;
        output[14].val = 102993021;
        output[15].val = 379079551;
        output[16].val = 436332804;
        output[17].val = 162418316;
        output[18].val = 87140222;
        output[19].val = 129245174;
        output[20].val = 678902598;
        output[21].val = -226708040;
        output[22].val = 291783882;
        output[23].val = -975186536;
        output[24].val = -88290751;
        output[25].val = -829726537;
        output[26].val = -946329442;
        output[27].val = -407539651;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[28];
        answer[0].val = -975186536;
        answer[1].val = -946329442;
        answer[2].val = -829726537;
        answer[3].val = -624106646;
        answer[4].val = -616560185;
        answer[5].val = -444782717;
        answer[6].val = -407539651;
        answer[7].val = -290356168;
        answer[8].val = -226708040;
        answer[9].val = -88290751;
        answer[10].val = 22186799;
        answer[11].val = 32454231;
        answer[12].val = 87140222;
        answer[13].val = 102993021;
        answer[14].val = 121419103;
        answer[15].val = 129245174;
        answer[16].val = 143376481;
        answer[17].val = 162418316;
        answer[18].val = 241475056;
        answer[19].val = 291783882;
        answer[20].val = 379079551;
        answer[21].val = 436332804;
        answer[22].val = 627765126;
        answer[23].val = 675660125;
        answer[24].val = 678902598;
        answer[25].val = 699342958;
        answer[26].val = 822825367;
        answer[27].val = 837762411;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00124() {
        TimeTicket[] output = new TimeTicket[6];
        output[0].val = -65451726;
        output[1].val = -883386313;
        output[2].val = -477397330;
        output[3].val = 140653498;
        output[4].val = -661106580;
        output[5].val = -558545861;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[6];
        answer[0].val = -883386313;
        answer[1].val = -661106580;
        answer[2].val = -558545861;
        answer[3].val = -477397330;
        answer[4].val = -65451726;
        answer[5].val = 140653498;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00125() {
        int[] output = new int[11];
        output[0] = -561797278;
        output[1] = 715050785;
        output[2] = 436526359;
        output[3] = 873069538;
        output[4] = 143585634;
        output[5] = 515037274;
        output[6] = 96829029;
        output[7] = 264960177;
        output[8] = 657359312;
        output[9] = -126615122;
        output[10] = -200482947;
        Sorting.radixSort(output);
        int[] answer = new int[11];
        answer[0] = -561797278;
        answer[1] = -200482947;
        answer[2] = -126615122;
        answer[3] = 96829029;
        answer[4] = 143585634;
        answer[5] = 264960177;
        answer[6] = 436526359;
        answer[7] = 515037274;
        answer[8] = 657359312;
        answer[9] = 715050785;
        answer[10] = 873069538;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00126() {
        TimeTicket[] output = new TimeTicket[13];
        output[0].val = -637552424;
        output[1].val = -764029695;
        output[2].val = 642450147;
        output[3].val = 705731866;
        output[4].val = 451246658;
        output[5].val = -952370417;
        output[6].val = -311739227;
        output[7].val = -852637787;
        output[8].val = -265435027;
        output[9].val = -53271695;
        output[10].val = 159136292;
        output[11].val = 853246263;
        output[12].val = -686354129;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[13];
        answer[0].val = -952370417;
        answer[1].val = -852637787;
        answer[2].val = -764029695;
        answer[3].val = -686354129;
        answer[4].val = -637552424;
        answer[5].val = -311739227;
        answer[6].val = -265435027;
        answer[7].val = -53271695;
        answer[8].val = 159136292;
        answer[9].val = 451246658;
        answer[10].val = 642450147;
        answer[11].val = 705731866;
        answer[12].val = 853246263;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00127() {
        TimeTicket[] output = new TimeTicket[4];
        output[0].val = 681343113;
        output[1].val = 416108499;
        output[2].val = 258496074;
        output[3].val = 63341943;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[4];
        answer[0].val = 63341943;
        answer[1].val = 258496074;
        answer[2].val = 416108499;
        answer[3].val = 681343113;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00128() {
        TimeTicket[] output = new TimeTicket[3];
        output[0].val = -372329848;
        output[1].val = -736815048;
        output[2].val = 777444529;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[3];
        answer[0].val = -736815048;
        answer[1].val = -372329848;
        answer[2].val = 777444529;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00129() {
        TimeTicket[] output = new TimeTicket[15];
        output[0].val = 40467355;
        output[1].val = 791786453;
        output[2].val = -523302611;
        output[3].val = 265536307;
        output[4].val = 61897917;
        output[5].val = -506839492;
        output[6].val = 548949893;
        output[7].val = 867911383;
        output[8].val = 647684010;
        output[9].val = 503075120;
        output[10].val = -191118844;
        output[11].val = 333729870;
        output[12].val = 12420694;
        output[13].val = -937665004;
        output[14].val = 693461300;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[15];
        answer[0].val = -937665004;
        answer[1].val = -523302611;
        answer[2].val = -506839492;
        answer[3].val = -191118844;
        answer[4].val = 12420694;
        answer[5].val = 40467355;
        answer[6].val = 61897917;
        answer[7].val = 265536307;
        answer[8].val = 333729870;
        answer[9].val = 503075120;
        answer[10].val = 548949893;
        answer[11].val = 647684010;
        answer[12].val = 693461300;
        answer[13].val = 791786453;
        answer[14].val = 867911383;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00130() {
        TimeTicket[] output = new TimeTicket[30];
        output[0].val = -453805863;
        output[1].val = -999483394;
        output[2].val = 2710508;
        output[3].val = -102511322;
        output[4].val = -500399878;
        output[5].val = 606441815;
        output[6].val = -110175877;
        output[7].val = -974197424;
        output[8].val = -789694798;
        output[9].val = -79638273;
        output[10].val = 605508003;
        output[11].val = -896801346;
        output[12].val = 980657699;
        output[13].val = 400217083;
        output[14].val = 38861341;
        output[15].val = 802635011;
        output[16].val = 378756305;
        output[17].val = -299181343;
        output[18].val = -547797727;
        output[19].val = 771878676;
        output[20].val = 623316513;
        output[21].val = 237589176;
        output[22].val = -805955750;
        output[23].val = -802668422;
        output[24].val = 116155726;
        output[25].val = 212332153;
        output[26].val = -933728714;
        output[27].val = 950965927;
        output[28].val = -675599749;
        output[29].val = 710909953;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[30];
        answer[0].val = -999483394;
        answer[1].val = -974197424;
        answer[2].val = -933728714;
        answer[3].val = -896801346;
        answer[4].val = -805955750;
        answer[5].val = -802668422;
        answer[6].val = -789694798;
        answer[7].val = -675599749;
        answer[8].val = -547797727;
        answer[9].val = -500399878;
        answer[10].val = -453805863;
        answer[11].val = -299181343;
        answer[12].val = -110175877;
        answer[13].val = -102511322;
        answer[14].val = -79638273;
        answer[15].val = 2710508;
        answer[16].val = 38861341;
        answer[17].val = 116155726;
        answer[18].val = 212332153;
        answer[19].val = 237589176;
        answer[20].val = 378756305;
        answer[21].val = 400217083;
        answer[22].val = 605508003;
        answer[23].val = 606441815;
        answer[24].val = 623316513;
        answer[25].val = 710909953;
        answer[26].val = 771878676;
        answer[27].val = 802635011;
        answer[28].val = 950965927;
        answer[29].val = 980657699;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00131() {
        int[] output = new int[28];
        output[0] = 608283667;
        output[1] = 259403747;
        output[2] = -250030438;
        output[3] = 681451912;
        output[4] = 802252233;
        output[5] = 562073869;
        output[6] = 76601790;
        output[7] = -359861464;
        output[8] = 26890029;
        output[9] = -13836283;
        output[10] = -747915677;
        output[11] = 868694642;
        output[12] = 983557385;
        output[13] = 167380968;
        output[14] = -661386498;
        output[15] = 117412903;
        output[16] = 202780096;
        output[17] = 967366553;
        output[18] = -514618065;
        output[19] = -325950215;
        output[20] = -699842345;
        output[21] = 236709947;
        output[22] = -846548409;
        output[23] = -900102070;
        output[24] = -839419985;
        output[25] = 322272409;
        output[26] = -845611488;
        output[27] = 939473668;
        Sorting.radixSort(output);
        int[] answer = new int[28];
        answer[0] = -900102070;
        answer[1] = -846548409;
        answer[2] = -845611488;
        answer[3] = -839419985;
        answer[4] = -747915677;
        answer[5] = -699842345;
        answer[6] = -661386498;
        answer[7] = -514618065;
        answer[8] = -359861464;
        answer[9] = -325950215;
        answer[10] = -250030438;
        answer[11] = -13836283;
        answer[12] = 26890029;
        answer[13] = 76601790;
        answer[14] = 117412903;
        answer[15] = 167380968;
        answer[16] = 202780096;
        answer[17] = 236709947;
        answer[18] = 259403747;
        answer[19] = 322272409;
        answer[20] = 562073869;
        answer[21] = 608283667;
        answer[22] = 681451912;
        answer[23] = 802252233;
        answer[24] = 868694642;
        answer[25] = 939473668;
        answer[26] = 967366553;
        answer[27] = 983557385;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00132() {
        TimeTicket[] output = new TimeTicket[11];
        output[0].val = 713526389;
        output[1].val = -287777124;
        output[2].val = -792768674;
        output[3].val = 905141887;
        output[4].val = -964685460;
        output[5].val = -729667327;
        output[6].val = -895678165;
        output[7].val = 529502057;
        output[8].val = 155782094;
        output[9].val = 472955466;
        output[10].val = 906665829;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[11];
        answer[0].val = -964685460;
        answer[1].val = -895678165;
        answer[2].val = -792768674;
        answer[3].val = -729667327;
        answer[4].val = -287777124;
        answer[5].val = 155782094;
        answer[6].val = 472955466;
        answer[7].val = 529502057;
        answer[8].val = 713526389;
        answer[9].val = 905141887;
        answer[10].val = 906665829;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00133() {
        TimeTicket[] output = new TimeTicket[17];
        output[0].val = -85480861;
        output[1].val = -825736328;
        output[2].val = -374907762;
        output[3].val = -656106299;
        output[4].val = -74654778;
        output[5].val = 107254058;
        output[6].val = 507243839;
        output[7].val = 663171471;
        output[8].val = -284530567;
        output[9].val = 257281260;
        output[10].val = 30608328;
        output[11].val = 640420975;
        output[12].val = -449886913;
        output[13].val = 275054038;
        output[14].val = 978976273;
        output[15].val = 585329810;
        output[16].val = 470652618;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[17];
        answer[0].val = -825736328;
        answer[1].val = -656106299;
        answer[2].val = -449886913;
        answer[3].val = -374907762;
        answer[4].val = -284530567;
        answer[5].val = -85480861;
        answer[6].val = -74654778;
        answer[7].val = 30608328;
        answer[8].val = 107254058;
        answer[9].val = 257281260;
        answer[10].val = 275054038;
        answer[11].val = 470652618;
        answer[12].val = 507243839;
        answer[13].val = 585329810;
        answer[14].val = 640420975;
        answer[15].val = 663171471;
        answer[16].val = 978976273;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00134() {
        TimeTicket[] output = new TimeTicket[9];
        output[0].val = 560190699;
        output[1].val = -41173536;
        output[2].val = 144561503;
        output[3].val = -377834475;
        output[4].val = 577459822;
        output[5].val = -562136489;
        output[6].val = -161340995;
        output[7].val = 636992180;
        output[8].val = 213027310;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[9];
        answer[0].val = -562136489;
        answer[1].val = -377834475;
        answer[2].val = -161340995;
        answer[3].val = -41173536;
        answer[4].val = 144561503;
        answer[5].val = 213027310;
        answer[6].val = 560190699;
        answer[7].val = 577459822;
        answer[8].val = 636992180;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00135() {
        TimeTicket[] output = new TimeTicket[28];
        output[0].val = 867421153;
        output[1].val = -834412724;
        output[2].val = 551131252;
        output[3].val = 856830253;
        output[4].val = -938312429;
        output[5].val = -69235794;
        output[6].val = -743592289;
        output[7].val = -94599813;
        output[8].val = 960160615;
        output[9].val = 201049394;
        output[10].val = -583662246;
        output[11].val = 10047691;
        output[12].val = 107558862;
        output[13].val = -723733700;
        output[14].val = 527928954;
        output[15].val = 945395464;
        output[16].val = -855361184;
        output[17].val = 444271070;
        output[18].val = -897941279;
        output[19].val = -858157412;
        output[20].val = 139559583;
        output[21].val = 318547222;
        output[22].val = -2212219;
        output[23].val = 846427001;
        output[24].val = 151466904;
        output[25].val = -443580473;
        output[26].val = 912864623;
        output[27].val = -823700256;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[28];
        answer[0].val = -938312429;
        answer[1].val = -897941279;
        answer[2].val = -858157412;
        answer[3].val = -855361184;
        answer[4].val = -834412724;
        answer[5].val = -823700256;
        answer[6].val = -743592289;
        answer[7].val = -723733700;
        answer[8].val = -583662246;
        answer[9].val = -443580473;
        answer[10].val = -94599813;
        answer[11].val = -69235794;
        answer[12].val = -2212219;
        answer[13].val = 10047691;
        answer[14].val = 107558862;
        answer[15].val = 139559583;
        answer[16].val = 151466904;
        answer[17].val = 201049394;
        answer[18].val = 318547222;
        answer[19].val = 444271070;
        answer[20].val = 527928954;
        answer[21].val = 551131252;
        answer[22].val = 846427001;
        answer[23].val = 856830253;
        answer[24].val = 867421153;
        answer[25].val = 912864623;
        answer[26].val = 945395464;
        answer[27].val = 960160615;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00136() {
        TimeTicket[] output = new TimeTicket[22];
        output[0].val = 702251529;
        output[1].val = 814229757;
        output[2].val = 900426950;
        output[3].val = 832144207;
        output[4].val = -869578567;
        output[5].val = -686945856;
        output[6].val = -14372458;
        output[7].val = 27929119;
        output[8].val = -462894897;
        output[9].val = -80111880;
        output[10].val = -72003987;
        output[11].val = -710034412;
        output[12].val = -128878256;
        output[13].val = -576228824;
        output[14].val = -250104685;
        output[15].val = -148484166;
        output[16].val = -653396468;
        output[17].val = -696736774;
        output[18].val = -364997268;
        output[19].val = -667907081;
        output[20].val = -257480229;
        output[21].val = -746453808;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[22];
        answer[0].val = -869578567;
        answer[1].val = -746453808;
        answer[2].val = -710034412;
        answer[3].val = -696736774;
        answer[4].val = -686945856;
        answer[5].val = -667907081;
        answer[6].val = -653396468;
        answer[7].val = -576228824;
        answer[8].val = -462894897;
        answer[9].val = -364997268;
        answer[10].val = -257480229;
        answer[11].val = -250104685;
        answer[12].val = -148484166;
        answer[13].val = -128878256;
        answer[14].val = -80111880;
        answer[15].val = -72003987;
        answer[16].val = -14372458;
        answer[17].val = 27929119;
        answer[18].val = 702251529;
        answer[19].val = 814229757;
        answer[20].val = 832144207;
        answer[21].val = 900426950;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00137() {
        int[] output = new int[23];
        output[0] = 628316560;
        output[1] = -194265050;
        output[2] = 287092449;
        output[3] = 576392066;
        output[4] = -305833559;
        output[5] = -72968865;
        output[6] = 226381924;
        output[7] = -199486357;
        output[8] = -660746939;
        output[9] = -886408881;
        output[10] = 589922372;
        output[11] = -283932444;
        output[12] = 429887841;
        output[13] = 928327308;
        output[14] = -955039216;
        output[15] = -441930286;
        output[16] = -717081010;
        output[17] = 93512387;
        output[18] = -795941127;
        output[19] = -32779042;
        output[20] = -772314368;
        output[21] = 849141415;
        output[22] = 488259098;
        Sorting.radixSort(output);
        int[] answer = new int[23];
        answer[0] = -955039216;
        answer[1] = -886408881;
        answer[2] = -795941127;
        answer[3] = -772314368;
        answer[4] = -717081010;
        answer[5] = -660746939;
        answer[6] = -441930286;
        answer[7] = -305833559;
        answer[8] = -283932444;
        answer[9] = -199486357;
        answer[10] = -194265050;
        answer[11] = -72968865;
        answer[12] = -32779042;
        answer[13] = 93512387;
        answer[14] = 226381924;
        answer[15] = 287092449;
        answer[16] = 429887841;
        answer[17] = 488259098;
        answer[18] = 576392066;
        answer[19] = 589922372;
        answer[20] = 628316560;
        answer[21] = 849141415;
        answer[22] = 928327308;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00138() {
        TimeTicket[] output = new TimeTicket[10];
        output[0].val = 545416889;
        output[1].val = 418731004;
        output[2].val = 199989346;
        output[3].val = -483266222;
        output[4].val = 988965735;
        output[5].val = -18867024;
        output[6].val = 608401418;
        output[7].val = 83171174;
        output[8].val = -184472310;
        output[9].val = 662639241;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[10];
        answer[0].val = -483266222;
        answer[1].val = -184472310;
        answer[2].val = -18867024;
        answer[3].val = 83171174;
        answer[4].val = 199989346;
        answer[5].val = 418731004;
        answer[6].val = 545416889;
        answer[7].val = 608401418;
        answer[8].val = 662639241;
        answer[9].val = 988965735;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00139() {
        TimeTicket[] output = new TimeTicket[24];
        output[0].val = 837326420;
        output[1].val = 516761525;
        output[2].val = 138871176;
        output[3].val = -319012023;
        output[4].val = 85175899;
        output[5].val = 767866548;
        output[6].val = -672266303;
        output[7].val = 159219413;
        output[8].val = 199669258;
        output[9].val = -504684762;
        output[10].val = -958221203;
        output[11].val = 276687388;
        output[12].val = 360339767;
        output[13].val = -999745118;
        output[14].val = -442711679;
        output[15].val = -395080430;
        output[16].val = 934562835;
        output[17].val = 729871863;
        output[18].val = 45721577;
        output[19].val = -541517432;
        output[20].val = 528812333;
        output[21].val = -343567729;
        output[22].val = 629635752;
        output[23].val = 330581830;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[24];
        answer[0].val = -999745118;
        answer[1].val = -958221203;
        answer[2].val = -672266303;
        answer[3].val = -541517432;
        answer[4].val = -504684762;
        answer[5].val = -442711679;
        answer[6].val = -395080430;
        answer[7].val = -343567729;
        answer[8].val = -319012023;
        answer[9].val = 45721577;
        answer[10].val = 85175899;
        answer[11].val = 138871176;
        answer[12].val = 159219413;
        answer[13].val = 199669258;
        answer[14].val = 276687388;
        answer[15].val = 330581830;
        answer[16].val = 360339767;
        answer[17].val = 516761525;
        answer[18].val = 528812333;
        answer[19].val = 629635752;
        answer[20].val = 729871863;
        answer[21].val = 767866548;
        answer[22].val = 837326420;
        answer[23].val = 934562835;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00140() {
        TimeTicket[] output = new TimeTicket[7];
        output[0].val = 362868260;
        output[1].val = -660908204;
        output[2].val = -686835055;
        output[3].val = -48463034;
        output[4].val = -257135954;
        output[5].val = 684505892;
        output[6].val = 317422295;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[7];
        answer[0].val = -686835055;
        answer[1].val = -660908204;
        answer[2].val = -257135954;
        answer[3].val = -48463034;
        answer[4].val = 317422295;
        answer[5].val = 362868260;
        answer[6].val = 684505892;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00141() {
        TimeTicket[] output = new TimeTicket[14];
        output[0].val = 42306710;
        output[1].val = 429884597;
        output[2].val = -99206010;
        output[3].val = 270387157;
        output[4].val = 232868277;
        output[5].val = -490606371;
        output[6].val = -911873807;
        output[7].val = -678547746;
        output[8].val = -721288075;
        output[9].val = 306464053;
        output[10].val = -453868056;
        output[11].val = -726375508;
        output[12].val = 468210423;
        output[13].val = -224414630;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[14];
        answer[0].val = -911873807;
        answer[1].val = -726375508;
        answer[2].val = -721288075;
        answer[3].val = -678547746;
        answer[4].val = -490606371;
        answer[5].val = -453868056;
        answer[6].val = -224414630;
        answer[7].val = -99206010;
        answer[8].val = 42306710;
        answer[9].val = 232868277;
        answer[10].val = 270387157;
        answer[11].val = 306464053;
        answer[12].val = 429884597;
        answer[13].val = 468210423;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00142() {
        TimeTicket[] output = new TimeTicket[27];
        output[0].val = 3140473;
        output[1].val = 872913547;
        output[2].val = 763971668;
        output[3].val = -886406811;
        output[4].val = 674261762;
        output[5].val = 724416438;
        output[6].val = -198078234;
        output[7].val = 674316782;
        output[8].val = 333426596;
        output[9].val = -31401592;
        output[10].val = -520091824;
        output[11].val = -344252160;
        output[12].val = -481564791;
        output[13].val = -286197474;
        output[14].val = -815241236;
        output[15].val = -278544165;
        output[16].val = -782296384;
        output[17].val = 51017824;
        output[18].val = 556576339;
        output[19].val = 520520035;
        output[20].val = 496647941;
        output[21].val = -385122072;
        output[22].val = 415534157;
        output[23].val = 113561989;
        output[24].val = -825787537;
        output[25].val = 507534775;
        output[26].val = -523080328;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[27];
        answer[0].val = -886406811;
        answer[1].val = -825787537;
        answer[2].val = -815241236;
        answer[3].val = -782296384;
        answer[4].val = -523080328;
        answer[5].val = -520091824;
        answer[6].val = -481564791;
        answer[7].val = -385122072;
        answer[8].val = -344252160;
        answer[9].val = -286197474;
        answer[10].val = -278544165;
        answer[11].val = -198078234;
        answer[12].val = -31401592;
        answer[13].val = 3140473;
        answer[14].val = 51017824;
        answer[15].val = 113561989;
        answer[16].val = 333426596;
        answer[17].val = 415534157;
        answer[18].val = 496647941;
        answer[19].val = 507534775;
        answer[20].val = 520520035;
        answer[21].val = 556576339;
        answer[22].val = 674261762;
        answer[23].val = 674316782;
        answer[24].val = 724416438;
        answer[25].val = 763971668;
        answer[26].val = 872913547;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00143() {
        int[] output = new int[14];
        output[0] = 77383097;
        output[1] = 514793234;
        output[2] = 62131769;
        output[3] = -311786920;
        output[4] = -87217877;
        output[5] = 961630139;
        output[6] = -372310228;
        output[7] = 80238928;
        output[8] = 240730275;
        output[9] = -959785306;
        output[10] = 830471066;
        output[11] = 297506865;
        output[12] = 103476467;
        output[13] = -890605556;
        Sorting.radixSort(output);
        int[] answer = new int[14];
        answer[0] = -959785306;
        answer[1] = -890605556;
        answer[2] = -372310228;
        answer[3] = -311786920;
        answer[4] = -87217877;
        answer[5] = 62131769;
        answer[6] = 77383097;
        answer[7] = 80238928;
        answer[8] = 103476467;
        answer[9] = 240730275;
        answer[10] = 297506865;
        answer[11] = 514793234;
        answer[12] = 830471066;
        answer[13] = 961630139;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00144() {
        TimeTicket[] output = new TimeTicket[14];
        output[0].val = 612247448;
        output[1].val = -228101827;
        output[2].val = 707239100;
        output[3].val = -97774515;
        output[4].val = -944615414;
        output[5].val = -437015652;
        output[6].val = -532626764;
        output[7].val = 950072974;
        output[8].val = 233857967;
        output[9].val = 851139074;
        output[10].val = -728746293;
        output[11].val = -71061232;
        output[12].val = 908760593;
        output[13].val = 762125031;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[14];
        answer[0].val = -944615414;
        answer[1].val = -728746293;
        answer[2].val = -532626764;
        answer[3].val = -437015652;
        answer[4].val = -228101827;
        answer[5].val = -97774515;
        answer[6].val = -71061232;
        answer[7].val = 233857967;
        answer[8].val = 612247448;
        answer[9].val = 707239100;
        answer[10].val = 762125031;
        answer[11].val = 851139074;
        answer[12].val = 908760593;
        answer[13].val = 950072974;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00145() {
        TimeTicket[] output = new TimeTicket[10];
        output[0].val = -292043600;
        output[1].val = -705521021;
        output[2].val = 268837151;
        output[3].val = 765398895;
        output[4].val = 493625436;
        output[5].val = -356079222;
        output[6].val = 570413447;
        output[7].val = 312457122;
        output[8].val = -540732432;
        output[9].val = 484732776;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[10];
        answer[0].val = -705521021;
        answer[1].val = -540732432;
        answer[2].val = -356079222;
        answer[3].val = -292043600;
        answer[4].val = 268837151;
        answer[5].val = 312457122;
        answer[6].val = 484732776;
        answer[7].val = 493625436;
        answer[8].val = 570413447;
        answer[9].val = 765398895;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00146() {
        TimeTicket[] output = new TimeTicket[16];
        output[0].val = 833165393;
        output[1].val = -45804253;
        output[2].val = -887989795;
        output[3].val = -133879144;
        output[4].val = 338798618;
        output[5].val = 106354506;
        output[6].val = 642033830;
        output[7].val = 116934464;
        output[8].val = 615480436;
        output[9].val = 730139783;
        output[10].val = -195746083;
        output[11].val = 708341785;
        output[12].val = 699622612;
        output[13].val = 130117835;
        output[14].val = 459298351;
        output[15].val = 404464816;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[16];
        answer[0].val = -887989795;
        answer[1].val = -195746083;
        answer[2].val = -133879144;
        answer[3].val = -45804253;
        answer[4].val = 106354506;
        answer[5].val = 116934464;
        answer[6].val = 130117835;
        answer[7].val = 338798618;
        answer[8].val = 404464816;
        answer[9].val = 459298351;
        answer[10].val = 615480436;
        answer[11].val = 642033830;
        answer[12].val = 699622612;
        answer[13].val = 708341785;
        answer[14].val = 730139783;
        answer[15].val = 833165393;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00147() {
        TimeTicket[] output = new TimeTicket[6];
        output[0].val = 310469319;
        output[1].val = 397456386;
        output[2].val = -88009780;
        output[3].val = -709754903;
        output[4].val = 445718281;
        output[5].val = -756027957;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[6];
        answer[0].val = -756027957;
        answer[1].val = -709754903;
        answer[2].val = -88009780;
        answer[3].val = 310469319;
        answer[4].val = 397456386;
        answer[5].val = 445718281;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00148() {
        TimeTicket[] output = new TimeTicket[3];
        output[0].val = -499227571;
        output[1].val = -8083549;
        output[2].val = 642039941;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[3];
        answer[0].val = -499227571;
        answer[1].val = -8083549;
        answer[2].val = 642039941;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00149() {
        int[] output = new int[19];
        output[0] = 33766681;
        output[1] = 449212415;
        output[2] = -328683170;
        output[3] = -697611215;
        output[4] = 440162843;
        output[5] = 698719145;
        output[6] = 20939032;
        output[7] = -51145337;
        output[8] = -694685273;
        output[9] = -878788633;
        output[10] = 64803906;
        output[11] = -984143780;
        output[12] = 77427108;
        output[13] = -135250162;
        output[14] = -641348473;
        output[15] = -218519104;
        output[16] = -611370267;
        output[17] = -719797723;
        output[18] = 153356991;
        Sorting.radixSort(output);
        int[] answer = new int[19];
        answer[0] = -984143780;
        answer[1] = -878788633;
        answer[2] = -719797723;
        answer[3] = -697611215;
        answer[4] = -694685273;
        answer[5] = -641348473;
        answer[6] = -611370267;
        answer[7] = -328683170;
        answer[8] = -218519104;
        answer[9] = -135250162;
        answer[10] = -51145337;
        answer[11] = 20939032;
        answer[12] = 33766681;
        answer[13] = 64803906;
        answer[14] = 77427108;
        answer[15] = 153356991;
        answer[16] = 440162843;
        answer[17] = 449212415;
        answer[18] = 698719145;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00150() {
        TimeTicket[] output = new TimeTicket[11];
        output[0].val = -697476383;
        output[1].val = -814800031;
        output[2].val = 147246412;
        output[3].val = -358991767;
        output[4].val = -291957146;
        output[5].val = 466930495;
        output[6].val = -135790667;
        output[7].val = 280958459;
        output[8].val = 551844153;
        output[9].val = -612803824;
        output[10].val = -234017403;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[11];
        answer[0].val = -814800031;
        answer[1].val = -697476383;
        answer[2].val = -612803824;
        answer[3].val = -358991767;
        answer[4].val = -291957146;
        answer[5].val = -234017403;
        answer[6].val = -135790667;
        answer[7].val = 147246412;
        answer[8].val = 280958459;
        answer[9].val = 466930495;
        answer[10].val = 551844153;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00151() {
        TimeTicket[] output = new TimeTicket[15];
        output[0].val = -833423720;
        output[1].val = -535127616;
        output[2].val = -270866107;
        output[3].val = 283615827;
        output[4].val = 522868981;
        output[5].val = -843053670;
        output[6].val = 81129325;
        output[7].val = -70277488;
        output[8].val = -318792025;
        output[9].val = 124606930;
        output[10].val = 527943458;
        output[11].val = -567608484;
        output[12].val = 416956972;
        output[13].val = 127980933;
        output[14].val = 295603782;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[15];
        answer[0].val = -843053670;
        answer[1].val = -833423720;
        answer[2].val = -567608484;
        answer[3].val = -535127616;
        answer[4].val = -318792025;
        answer[5].val = -270866107;
        answer[6].val = -70277488;
        answer[7].val = 81129325;
        answer[8].val = 124606930;
        answer[9].val = 127980933;
        answer[10].val = 283615827;
        answer[11].val = 295603782;
        answer[12].val = 416956972;
        answer[13].val = 522868981;
        answer[14].val = 527943458;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00152() {
        TimeTicket[] output = new TimeTicket[30];
        output[0].val = 19021956;
        output[1].val = 654400790;
        output[2].val = 21645206;
        output[3].val = 426593644;
        output[4].val = -97062472;
        output[5].val = -46716891;
        output[6].val = -97504567;
        output[7].val = -472883202;
        output[8].val = -947336828;
        output[9].val = 108148442;
        output[10].val = -296657657;
        output[11].val = 80560869;
        output[12].val = -114869075;
        output[13].val = 418153111;
        output[14].val = 700345694;
        output[15].val = 126034625;
        output[16].val = -29628984;
        output[17].val = -658465187;
        output[18].val = -573928625;
        output[19].val = -899553878;
        output[20].val = -225985217;
        output[21].val = 589996232;
        output[22].val = 102192979;
        output[23].val = -212441949;
        output[24].val = -479854297;
        output[25].val = 843344069;
        output[26].val = -338062734;
        output[27].val = 917314402;
        output[28].val = -11360069;
        output[29].val = 57807479;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[30];
        answer[0].val = -947336828;
        answer[1].val = -899553878;
        answer[2].val = -658465187;
        answer[3].val = -573928625;
        answer[4].val = -479854297;
        answer[5].val = -472883202;
        answer[6].val = -338062734;
        answer[7].val = -296657657;
        answer[8].val = -225985217;
        answer[9].val = -212441949;
        answer[10].val = -114869075;
        answer[11].val = -97504567;
        answer[12].val = -97062472;
        answer[13].val = -46716891;
        answer[14].val = -29628984;
        answer[15].val = -11360069;
        answer[16].val = 19021956;
        answer[17].val = 21645206;
        answer[18].val = 57807479;
        answer[19].val = 80560869;
        answer[20].val = 102192979;
        answer[21].val = 108148442;
        answer[22].val = 126034625;
        answer[23].val = 418153111;
        answer[24].val = 426593644;
        answer[25].val = 589996232;
        answer[26].val = 654400790;
        answer[27].val = 700345694;
        answer[28].val = 843344069;
        answer[29].val = 917314402;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00153() {
        TimeTicket[] output = new TimeTicket[10];
        output[0].val = 126246847;
        output[1].val = -645879774;
        output[2].val = -886281114;
        output[3].val = -184954871;
        output[4].val = -676778605;
        output[5].val = 948806689;
        output[6].val = 836804074;
        output[7].val = 6765447;
        output[8].val = -6135886;
        output[9].val = -341602595;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[10];
        answer[0].val = -886281114;
        answer[1].val = -676778605;
        answer[2].val = -645879774;
        answer[3].val = -341602595;
        answer[4].val = -184954871;
        answer[5].val = -6135886;
        answer[6].val = 6765447;
        answer[7].val = 126246847;
        answer[8].val = 836804074;
        answer[9].val = 948806689;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00154() {
        TimeTicket[] output = new TimeTicket[3];
        output[0].val = 841755949;
        output[1].val = -784511860;
        output[2].val = -103777066;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[3];
        answer[0].val = -784511860;
        answer[1].val = -103777066;
        answer[2].val = 841755949;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00155() {
        int[] output = new int[11];
        output[0] = -678154709;
        output[1] = -253913115;
        output[2] = -440548456;
        output[3] = -321332165;
        output[4] = 830047915;
        output[5] = 700692933;
        output[6] = -540892575;
        output[7] = 175509328;
        output[8] = -725746796;
        output[9] = 947031552;
        output[10] = -399880003;
        Sorting.radixSort(output);
        int[] answer = new int[11];
        answer[0] = -725746796;
        answer[1] = -678154709;
        answer[2] = -540892575;
        answer[3] = -440548456;
        answer[4] = -399880003;
        answer[5] = -321332165;
        answer[6] = -253913115;
        answer[7] = 175509328;
        answer[8] = 700692933;
        answer[9] = 830047915;
        answer[10] = 947031552;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00156() {
        TimeTicket[] output = new TimeTicket[25];
        output[0].val = -505813559;
        output[1].val = -947443743;
        output[2].val = 46831033;
        output[3].val = -375347031;
        output[4].val = 831099137;
        output[5].val = -448124639;
        output[6].val = 774927130;
        output[7].val = 708319134;
        output[8].val = 706541926;
        output[9].val = 378929160;
        output[10].val = -222665399;
        output[11].val = 480267157;
        output[12].val = -180228580;
        output[13].val = -968275988;
        output[14].val = -968867169;
        output[15].val = -198204577;
        output[16].val = -721418860;
        output[17].val = -670725177;
        output[18].val = -503614291;
        output[19].val = 965868536;
        output[20].val = -12207111;
        output[21].val = 817242327;
        output[22].val = -151513967;
        output[23].val = -197518419;
        output[24].val = 46111986;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[25];
        answer[0].val = -968867169;
        answer[1].val = -968275988;
        answer[2].val = -947443743;
        answer[3].val = -721418860;
        answer[4].val = -670725177;
        answer[5].val = -505813559;
        answer[6].val = -503614291;
        answer[7].val = -448124639;
        answer[8].val = -375347031;
        answer[9].val = -222665399;
        answer[10].val = -198204577;
        answer[11].val = -197518419;
        answer[12].val = -180228580;
        answer[13].val = -151513967;
        answer[14].val = -12207111;
        answer[15].val = 46111986;
        answer[16].val = 46831033;
        answer[17].val = 378929160;
        answer[18].val = 480267157;
        answer[19].val = 706541926;
        answer[20].val = 708319134;
        answer[21].val = 774927130;
        answer[22].val = 817242327;
        answer[23].val = 831099137;
        answer[24].val = 965868536;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00157() {
        TimeTicket[] output = new TimeTicket[17];
        output[0].val = -920517396;
        output[1].val = 466319770;
        output[2].val = -243159593;
        output[3].val = 62303932;
        output[4].val = -875963381;
        output[5].val = 355383474;
        output[6].val = -549241858;
        output[7].val = 337075469;
        output[8].val = 352013614;
        output[9].val = -697950526;
        output[10].val = -909243378;
        output[11].val = 773694408;
        output[12].val = -580298759;
        output[13].val = 474774886;
        output[14].val = -795350428;
        output[15].val = -210111080;
        output[16].val = -562448658;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[17];
        answer[0].val = -920517396;
        answer[1].val = -909243378;
        answer[2].val = -875963381;
        answer[3].val = -795350428;
        answer[4].val = -697950526;
        answer[5].val = -580298759;
        answer[6].val = -562448658;
        answer[7].val = -549241858;
        answer[8].val = -243159593;
        answer[9].val = -210111080;
        answer[10].val = 62303932;
        answer[11].val = 337075469;
        answer[12].val = 352013614;
        answer[13].val = 355383474;
        answer[14].val = 466319770;
        answer[15].val = 474774886;
        answer[16].val = 773694408;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00158() {
        TimeTicket[] output = new TimeTicket[13];
        output[0].val = 377153947;
        output[1].val = -259869555;
        output[2].val = 10281293;
        output[3].val = -468101555;
        output[4].val = 674831538;
        output[5].val = 884998953;
        output[6].val = -996739273;
        output[7].val = -7199428;
        output[8].val = -100630324;
        output[9].val = -128336574;
        output[10].val = -483179567;
        output[11].val = 114872146;
        output[12].val = 316249402;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[13];
        answer[0].val = -996739273;
        answer[1].val = -483179567;
        answer[2].val = -468101555;
        answer[3].val = -259869555;
        answer[4].val = -128336574;
        answer[5].val = -100630324;
        answer[6].val = -7199428;
        answer[7].val = 10281293;
        answer[8].val = 114872146;
        answer[9].val = 316249402;
        answer[10].val = 377153947;
        answer[11].val = 674831538;
        answer[12].val = 884998953;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00159() {
        TimeTicket[] output = new TimeTicket[27];
        output[0].val = 627487389;
        output[1].val = 508503820;
        output[2].val = -600199031;
        output[3].val = 271823992;
        output[4].val = 442949486;
        output[5].val = 698141213;
        output[6].val = 242178904;
        output[7].val = -788333077;
        output[8].val = 576978090;
        output[9].val = 644261023;
        output[10].val = 204955401;
        output[11].val = -248110989;
        output[12].val = -518428671;
        output[13].val = -796386123;
        output[14].val = -580889548;
        output[15].val = -642964330;
        output[16].val = 767707235;
        output[17].val = 667676062;
        output[18].val = -148443698;
        output[19].val = -807920081;
        output[20].val = -276365393;
        output[21].val = 412406697;
        output[22].val = -894027309;
        output[23].val = -951232127;
        output[24].val = -299500197;
        output[25].val = 991756382;
        output[26].val = -857893438;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[27];
        answer[0].val = -951232127;
        answer[1].val = -894027309;
        answer[2].val = -857893438;
        answer[3].val = -807920081;
        answer[4].val = -796386123;
        answer[5].val = -788333077;
        answer[6].val = -642964330;
        answer[7].val = -600199031;
        answer[8].val = -580889548;
        answer[9].val = -518428671;
        answer[10].val = -299500197;
        answer[11].val = -276365393;
        answer[12].val = -248110989;
        answer[13].val = -148443698;
        answer[14].val = 204955401;
        answer[15].val = 242178904;
        answer[16].val = 271823992;
        answer[17].val = 412406697;
        answer[18].val = 442949486;
        answer[19].val = 508503820;
        answer[20].val = 576978090;
        answer[21].val = 627487389;
        answer[22].val = 644261023;
        answer[23].val = 667676062;
        answer[24].val = 698141213;
        answer[25].val = 767707235;
        answer[26].val = 991756382;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00160() {
        TimeTicket[] output = new TimeTicket[2];
        output[0].val = -769586631;
        output[1].val = 793403502;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[2];
        answer[0].val = -769586631;
        answer[1].val = 793403502;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00161() {
        int[] output = new int[2];
        output[0] = -630751170;
        output[1] = 962113883;
        Sorting.radixSort(output);
        int[] answer = new int[2];
        answer[0] = -630751170;
        answer[1] = 962113883;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00162() {
        TimeTicket[] output = new TimeTicket[8];
        output[0].val = 605378735;
        output[1].val = 5694366;
        output[2].val = 277430934;
        output[3].val = -211221533;
        output[4].val = 863707270;
        output[5].val = -930528709;
        output[6].val = -705968569;
        output[7].val = 139277713;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[8];
        answer[0].val = -930528709;
        answer[1].val = -705968569;
        answer[2].val = -211221533;
        answer[3].val = 5694366;
        answer[4].val = 139277713;
        answer[5].val = 277430934;
        answer[6].val = 605378735;
        answer[7].val = 863707270;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00163() {
        TimeTicket[] output = new TimeTicket[24];
        output[0].val = 442279342;
        output[1].val = -833427596;
        output[2].val = 192532770;
        output[3].val = 834043796;
        output[4].val = 608889796;
        output[5].val = -123396852;
        output[6].val = -563160673;
        output[7].val = -634875454;
        output[8].val = 73499582;
        output[9].val = 572086362;
        output[10].val = -777079124;
        output[11].val = -700842997;
        output[12].val = 419503214;
        output[13].val = 68022775;
        output[14].val = 787826420;
        output[15].val = 562399812;
        output[16].val = 252283;
        output[17].val = 913348583;
        output[18].val = 191169087;
        output[19].val = -18242354;
        output[20].val = 923468120;
        output[21].val = -147519806;
        output[22].val = -122892778;
        output[23].val = 37710582;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[24];
        answer[0].val = -833427596;
        answer[1].val = -777079124;
        answer[2].val = -700842997;
        answer[3].val = -634875454;
        answer[4].val = -563160673;
        answer[5].val = -147519806;
        answer[6].val = -123396852;
        answer[7].val = -122892778;
        answer[8].val = -18242354;
        answer[9].val = 252283;
        answer[10].val = 37710582;
        answer[11].val = 68022775;
        answer[12].val = 73499582;
        answer[13].val = 191169087;
        answer[14].val = 192532770;
        answer[15].val = 419503214;
        answer[16].val = 442279342;
        answer[17].val = 562399812;
        answer[18].val = 572086362;
        answer[19].val = 608889796;
        answer[20].val = 787826420;
        answer[21].val = 834043796;
        answer[22].val = 913348583;
        answer[23].val = 923468120;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00164() {
        TimeTicket[] output = new TimeTicket[21];
        output[0].val = 411552700;
        output[1].val = -11841860;
        output[2].val = -154406296;
        output[3].val = 398482190;
        output[4].val = 64877972;
        output[5].val = -10247140;
        output[6].val = 894911946;
        output[7].val = 61018715;
        output[8].val = 199223614;
        output[9].val = 141275735;
        output[10].val = -811115420;
        output[11].val = -899326528;
        output[12].val = -669141438;
        output[13].val = 523548614;
        output[14].val = 748366428;
        output[15].val = -724189528;
        output[16].val = 831223300;
        output[17].val = 26990586;
        output[18].val = -271214624;
        output[19].val = 617142139;
        output[20].val = 165718511;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[21];
        answer[0].val = -899326528;
        answer[1].val = -811115420;
        answer[2].val = -724189528;
        answer[3].val = -669141438;
        answer[4].val = -271214624;
        answer[5].val = -154406296;
        answer[6].val = -11841860;
        answer[7].val = -10247140;
        answer[8].val = 26990586;
        answer[9].val = 61018715;
        answer[10].val = 64877972;
        answer[11].val = 141275735;
        answer[12].val = 165718511;
        answer[13].val = 199223614;
        answer[14].val = 398482190;
        answer[15].val = 411552700;
        answer[16].val = 523548614;
        answer[17].val = 617142139;
        answer[18].val = 748366428;
        answer[19].val = 831223300;
        answer[20].val = 894911946;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00165() {
        TimeTicket[] output = new TimeTicket[18];
        output[0].val = -928088467;
        output[1].val = -630346959;
        output[2].val = -609820523;
        output[3].val = 938952417;
        output[4].val = -530484569;
        output[5].val = -826093079;
        output[6].val = -192291803;
        output[7].val = -262393325;
        output[8].val = -583118950;
        output[9].val = -108516195;
        output[10].val = 575552495;
        output[11].val = 327664661;
        output[12].val = -633419841;
        output[13].val = -135247905;
        output[14].val = -204801803;
        output[15].val = 681866239;
        output[16].val = -906019639;
        output[17].val = -12530382;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[18];
        answer[0].val = -928088467;
        answer[1].val = -906019639;
        answer[2].val = -826093079;
        answer[3].val = -633419841;
        answer[4].val = -630346959;
        answer[5].val = -609820523;
        answer[6].val = -583118950;
        answer[7].val = -530484569;
        answer[8].val = -262393325;
        answer[9].val = -204801803;
        answer[10].val = -192291803;
        answer[11].val = -135247905;
        answer[12].val = -108516195;
        answer[13].val = -12530382;
        answer[14].val = 327664661;
        answer[15].val = 575552495;
        answer[16].val = 681866239;
        answer[17].val = 938952417;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00166() {
        TimeTicket[] output = new TimeTicket[7];
        output[0].val = 123928671;
        output[1].val = -889119202;
        output[2].val = 486828167;
        output[3].val = -629152483;
        output[4].val = 39945345;
        output[5].val = -704193571;
        output[6].val = 619154771;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[7];
        answer[0].val = -889119202;
        answer[1].val = -704193571;
        answer[2].val = -629152483;
        answer[3].val = 39945345;
        answer[4].val = 123928671;
        answer[5].val = 486828167;
        answer[6].val = 619154771;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00167() {
        int[] output = new int[11];
        output[0] = 912852869;
        output[1] = 619341772;
        output[2] = 704133866;
        output[3] = -930940281;
        output[4] = 979505194;
        output[5] = 489286244;
        output[6] = -961651310;
        output[7] = 606402748;
        output[8] = 420601480;
        output[9] = -792297284;
        output[10] = -621048012;
        Sorting.radixSort(output);
        int[] answer = new int[11];
        answer[0] = -961651310;
        answer[1] = -930940281;
        answer[2] = -792297284;
        answer[3] = -621048012;
        answer[4] = 420601480;
        answer[5] = 489286244;
        answer[6] = 606402748;
        answer[7] = 619341772;
        answer[8] = 704133866;
        answer[9] = 912852869;
        answer[10] = 979505194;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00168() {
        TimeTicket[] output = new TimeTicket[22];
        output[0].val = -442048475;
        output[1].val = 403508809;
        output[2].val = -805971173;
        output[3].val = -866666822;
        output[4].val = 767265586;
        output[5].val = -523935632;
        output[6].val = -349335270;
        output[7].val = 580968394;
        output[8].val = -440991111;
        output[9].val = 19848038;
        output[10].val = 345031377;
        output[11].val = 366298265;
        output[12].val = 242919224;
        output[13].val = -214575061;
        output[14].val = 124105690;
        output[15].val = 58538021;
        output[16].val = 195315143;
        output[17].val = -935067920;
        output[18].val = 222473642;
        output[19].val = 694009428;
        output[20].val = 542862881;
        output[21].val = 356709015;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[22];
        answer[0].val = -935067920;
        answer[1].val = -866666822;
        answer[2].val = -805971173;
        answer[3].val = -523935632;
        answer[4].val = -442048475;
        answer[5].val = -440991111;
        answer[6].val = -349335270;
        answer[7].val = -214575061;
        answer[8].val = 19848038;
        answer[9].val = 58538021;
        answer[10].val = 124105690;
        answer[11].val = 195315143;
        answer[12].val = 222473642;
        answer[13].val = 242919224;
        answer[14].val = 345031377;
        answer[15].val = 356709015;
        answer[16].val = 366298265;
        answer[17].val = 403508809;
        answer[18].val = 542862881;
        answer[19].val = 580968394;
        answer[20].val = 694009428;
        answer[21].val = 767265586;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00169() {
        TimeTicket[] output = new TimeTicket[22];
        output[0].val = -867542951;
        output[1].val = -919281839;
        output[2].val = 987299622;
        output[3].val = 407955466;
        output[4].val = 721682525;
        output[5].val = -479407508;
        output[6].val = -475769151;
        output[7].val = 694991812;
        output[8].val = -871011157;
        output[9].val = 392917250;
        output[10].val = 122348395;
        output[11].val = 175744944;
        output[12].val = 760790873;
        output[13].val = 447250421;
        output[14].val = 574679836;
        output[15].val = -112219406;
        output[16].val = -278066734;
        output[17].val = -622169829;
        output[18].val = 335162000;
        output[19].val = -321349204;
        output[20].val = -107515535;
        output[21].val = 735371694;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[22];
        answer[0].val = -919281839;
        answer[1].val = -871011157;
        answer[2].val = -867542951;
        answer[3].val = -622169829;
        answer[4].val = -479407508;
        answer[5].val = -475769151;
        answer[6].val = -321349204;
        answer[7].val = -278066734;
        answer[8].val = -112219406;
        answer[9].val = -107515535;
        answer[10].val = 122348395;
        answer[11].val = 175744944;
        answer[12].val = 335162000;
        answer[13].val = 392917250;
        answer[14].val = 407955466;
        answer[15].val = 447250421;
        answer[16].val = 574679836;
        answer[17].val = 694991812;
        answer[18].val = 721682525;
        answer[19].val = 735371694;
        answer[20].val = 760790873;
        answer[21].val = 987299622;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00170() {
        TimeTicket[] output = new TimeTicket[9];
        output[0].val = -89524373;
        output[1].val = -634917019;
        output[2].val = 716642471;
        output[3].val = -126984724;
        output[4].val = 859928457;
        output[5].val = -726519668;
        output[6].val = 367708202;
        output[7].val = -230895917;
        output[8].val = -765866411;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[9];
        answer[0].val = -765866411;
        answer[1].val = -726519668;
        answer[2].val = -634917019;
        answer[3].val = -230895917;
        answer[4].val = -126984724;
        answer[5].val = -89524373;
        answer[6].val = 367708202;
        answer[7].val = 716642471;
        answer[8].val = 859928457;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00171() {
        TimeTicket[] output = new TimeTicket[29];
        output[0].val = -519709811;
        output[1].val = -32734026;
        output[2].val = -809732107;
        output[3].val = -737200253;
        output[4].val = 499378567;
        output[5].val = -628032003;
        output[6].val = -197742567;
        output[7].val = 60340207;
        output[8].val = -783575544;
        output[9].val = 934535385;
        output[10].val = 347736130;
        output[11].val = -161425207;
        output[12].val = -766303149;
        output[13].val = -879973078;
        output[14].val = 656386758;
        output[15].val = 673845428;
        output[16].val = 321059933;
        output[17].val = 962530406;
        output[18].val = 343860454;
        output[19].val = 486555189;
        output[20].val = 103390954;
        output[21].val = 173252111;
        output[22].val = -321219050;
        output[23].val = 51440993;
        output[24].val = 250424623;
        output[25].val = 320345544;
        output[26].val = 642697488;
        output[27].val = -35839630;
        output[28].val = 413193415;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[29];
        answer[0].val = -879973078;
        answer[1].val = -809732107;
        answer[2].val = -783575544;
        answer[3].val = -766303149;
        answer[4].val = -737200253;
        answer[5].val = -628032003;
        answer[6].val = -519709811;
        answer[7].val = -321219050;
        answer[8].val = -197742567;
        answer[9].val = -161425207;
        answer[10].val = -35839630;
        answer[11].val = -32734026;
        answer[12].val = 51440993;
        answer[13].val = 60340207;
        answer[14].val = 103390954;
        answer[15].val = 173252111;
        answer[16].val = 250424623;
        answer[17].val = 320345544;
        answer[18].val = 321059933;
        answer[19].val = 343860454;
        answer[20].val = 347736130;
        answer[21].val = 413193415;
        answer[22].val = 486555189;
        answer[23].val = 499378567;
        answer[24].val = 642697488;
        answer[25].val = 656386758;
        answer[26].val = 673845428;
        answer[27].val = 934535385;
        answer[28].val = 962530406;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00172() {
        TimeTicket[] output = new TimeTicket[4];
        output[0].val = -428021440;
        output[1].val = -371424253;
        output[2].val = 815727533;
        output[3].val = -205743116;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[4];
        answer[0].val = -428021440;
        answer[1].val = -371424253;
        answer[2].val = -205743116;
        answer[3].val = 815727533;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00173() {
        int[] output = new int[21];
        output[0] = 395055463;
        output[1] = 18764964;
        output[2] = 312412970;
        output[3] = -131076713;
        output[4] = -943680157;
        output[5] = -523730057;
        output[6] = 912767786;
        output[7] = 414708329;
        output[8] = 997237133;
        output[9] = -565628315;
        output[10] = -308703040;
        output[11] = -467802719;
        output[12] = 28554133;
        output[13] = -682549736;
        output[14] = 533965374;
        output[15] = -824987562;
        output[16] = -324491705;
        output[17] = -314616658;
        output[18] = 657806429;
        output[19] = 496827727;
        output[20] = 946918047;
        Sorting.radixSort(output);
        int[] answer = new int[21];
        answer[0] = -943680157;
        answer[1] = -824987562;
        answer[2] = -682549736;
        answer[3] = -565628315;
        answer[4] = -523730057;
        answer[5] = -467802719;
        answer[6] = -324491705;
        answer[7] = -314616658;
        answer[8] = -308703040;
        answer[9] = -131076713;
        answer[10] = 18764964;
        answer[11] = 28554133;
        answer[12] = 312412970;
        answer[13] = 395055463;
        answer[14] = 414708329;
        answer[15] = 496827727;
        answer[16] = 533965374;
        answer[17] = 657806429;
        answer[18] = 912767786;
        answer[19] = 946918047;
        answer[20] = 997237133;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00174() {
        TimeTicket[] output = new TimeTicket[29];
        output[0].val = 138306626;
        output[1].val = 52815293;
        output[2].val = 231253356;
        output[3].val = -37799206;
        output[4].val = 509255094;
        output[5].val = 428936070;
        output[6].val = 98330200;
        output[7].val = -33662161;
        output[8].val = 433918727;
        output[9].val = -253010300;
        output[10].val = 821638359;
        output[11].val = 851350067;
        output[12].val = -607856195;
        output[13].val = 165197546;
        output[14].val = 41580925;
        output[15].val = 407548092;
        output[16].val = 253373730;
        output[17].val = 345637594;
        output[18].val = 318309518;
        output[19].val = -184261836;
        output[20].val = 744401246;
        output[21].val = 837211483;
        output[22].val = 464326205;
        output[23].val = -270103235;
        output[24].val = -219502561;
        output[25].val = -785335682;
        output[26].val = 202988072;
        output[27].val = 329621598;
        output[28].val = 986714237;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[29];
        answer[0].val = -785335682;
        answer[1].val = -607856195;
        answer[2].val = -270103235;
        answer[3].val = -253010300;
        answer[4].val = -219502561;
        answer[5].val = -184261836;
        answer[6].val = -37799206;
        answer[7].val = -33662161;
        answer[8].val = 41580925;
        answer[9].val = 52815293;
        answer[10].val = 98330200;
        answer[11].val = 138306626;
        answer[12].val = 165197546;
        answer[13].val = 202988072;
        answer[14].val = 231253356;
        answer[15].val = 253373730;
        answer[16].val = 318309518;
        answer[17].val = 329621598;
        answer[18].val = 345637594;
        answer[19].val = 407548092;
        answer[20].val = 428936070;
        answer[21].val = 433918727;
        answer[22].val = 464326205;
        answer[23].val = 509255094;
        answer[24].val = 744401246;
        answer[25].val = 821638359;
        answer[26].val = 837211483;
        answer[27].val = 851350067;
        answer[28].val = 986714237;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00175() {
        TimeTicket[] output = new TimeTicket[22];
        output[0].val = -338968704;
        output[1].val = -232474425;
        output[2].val = 734137352;
        output[3].val = -328277271;
        output[4].val = -575914341;
        output[5].val = -234951703;
        output[6].val = -22752742;
        output[7].val = 73824207;
        output[8].val = -93135276;
        output[9].val = -436246948;
        output[10].val = 340302226;
        output[11].val = 539881944;
        output[12].val = -658271284;
        output[13].val = 801069324;
        output[14].val = -368223951;
        output[15].val = -119996291;
        output[16].val = 510805697;
        output[17].val = -497815320;
        output[18].val = 514856522;
        output[19].val = -246882042;
        output[20].val = -582584359;
        output[21].val = 285251429;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[22];
        answer[0].val = -658271284;
        answer[1].val = -582584359;
        answer[2].val = -575914341;
        answer[3].val = -497815320;
        answer[4].val = -436246948;
        answer[5].val = -368223951;
        answer[6].val = -338968704;
        answer[7].val = -328277271;
        answer[8].val = -246882042;
        answer[9].val = -234951703;
        answer[10].val = -232474425;
        answer[11].val = -119996291;
        answer[12].val = -93135276;
        answer[13].val = -22752742;
        answer[14].val = 73824207;
        answer[15].val = 285251429;
        answer[16].val = 340302226;
        answer[17].val = 510805697;
        answer[18].val = 514856522;
        answer[19].val = 539881944;
        answer[20].val = 734137352;
        answer[21].val = 801069324;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00176() {
        TimeTicket[] output = new TimeTicket[18];
        output[0].val = 967392758;
        output[1].val = -709834065;
        output[2].val = -4163408;
        output[3].val = 29627277;
        output[4].val = 349588555;
        output[5].val = 919191424;
        output[6].val = -703227894;
        output[7].val = 890866243;
        output[8].val = 598715646;
        output[9].val = -721308897;
        output[10].val = -48389598;
        output[11].val = 481886082;
        output[12].val = -87534419;
        output[13].val = -10358147;
        output[14].val = -601253514;
        output[15].val = 48041771;
        output[16].val = 942716867;
        output[17].val = 139101406;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[18];
        answer[0].val = -721308897;
        answer[1].val = -709834065;
        answer[2].val = -703227894;
        answer[3].val = -601253514;
        answer[4].val = -87534419;
        answer[5].val = -48389598;
        answer[6].val = -10358147;
        answer[7].val = -4163408;
        answer[8].val = 29627277;
        answer[9].val = 48041771;
        answer[10].val = 139101406;
        answer[11].val = 349588555;
        answer[12].val = 481886082;
        answer[13].val = 598715646;
        answer[14].val = 890866243;
        answer[15].val = 919191424;
        answer[16].val = 942716867;
        answer[17].val = 967392758;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00177() {
        TimeTicket[] output = new TimeTicket[22];
        output[0].val = -918659290;
        output[1].val = 444395457;
        output[2].val = 19306428;
        output[3].val = 102883708;
        output[4].val = 444440155;
        output[5].val = 201589034;
        output[6].val = -387870441;
        output[7].val = -82507833;
        output[8].val = -841050058;
        output[9].val = -52627598;
        output[10].val = 103189567;
        output[11].val = 479537942;
        output[12].val = 782912802;
        output[13].val = -609989852;
        output[14].val = -979673543;
        output[15].val = -197064494;
        output[16].val = -422304737;
        output[17].val = -366205620;
        output[18].val = 559197961;
        output[19].val = -984507975;
        output[20].val = -254074292;
        output[21].val = 152956482;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[22];
        answer[0].val = -984507975;
        answer[1].val = -979673543;
        answer[2].val = -918659290;
        answer[3].val = -841050058;
        answer[4].val = -609989852;
        answer[5].val = -422304737;
        answer[6].val = -387870441;
        answer[7].val = -366205620;
        answer[8].val = -254074292;
        answer[9].val = -197064494;
        answer[10].val = -82507833;
        answer[11].val = -52627598;
        answer[12].val = 19306428;
        answer[13].val = 102883708;
        answer[14].val = 103189567;
        answer[15].val = 152956482;
        answer[16].val = 201589034;
        answer[17].val = 444395457;
        answer[18].val = 444440155;
        answer[19].val = 479537942;
        answer[20].val = 559197961;
        answer[21].val = 782912802;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00178() {
        TimeTicket[] output = new TimeTicket[4];
        output[0].val = -125546248;
        output[1].val = 656984227;
        output[2].val = 446019643;
        output[3].val = 662766368;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[4];
        answer[0].val = -125546248;
        answer[1].val = 446019643;
        answer[2].val = 656984227;
        answer[3].val = 662766368;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00179() {
        int[] output = new int[29];
        output[0] = -70162499;
        output[1] = -995134958;
        output[2] = -907159109;
        output[3] = 485597947;
        output[4] = -39532407;
        output[5] = -809076108;
        output[6] = 472747485;
        output[7] = -439481703;
        output[8] = -612415414;
        output[9] = -109562190;
        output[10] = -908501142;
        output[11] = -598201548;
        output[12] = 354856740;
        output[13] = 783401134;
        output[14] = -156150286;
        output[15] = 819327417;
        output[16] = 423555981;
        output[17] = -923176717;
        output[18] = 208208616;
        output[19] = -70509448;
        output[20] = -256512801;
        output[21] = -17795927;
        output[22] = -40165448;
        output[23] = -407376274;
        output[24] = -51463248;
        output[25] = -745009185;
        output[26] = -40260809;
        output[27] = -949659006;
        output[28] = 606973543;
        Sorting.radixSort(output);
        int[] answer = new int[29];
        answer[0] = -995134958;
        answer[1] = -949659006;
        answer[2] = -923176717;
        answer[3] = -908501142;
        answer[4] = -907159109;
        answer[5] = -809076108;
        answer[6] = -745009185;
        answer[7] = -612415414;
        answer[8] = -598201548;
        answer[9] = -439481703;
        answer[10] = -407376274;
        answer[11] = -256512801;
        answer[12] = -156150286;
        answer[13] = -109562190;
        answer[14] = -70509448;
        answer[15] = -70162499;
        answer[16] = -51463248;
        answer[17] = -40260809;
        answer[18] = -40165448;
        answer[19] = -39532407;
        answer[20] = -17795927;
        answer[21] = 208208616;
        answer[22] = 354856740;
        answer[23] = 423555981;
        answer[24] = 472747485;
        answer[25] = 485597947;
        answer[26] = 606973543;
        answer[27] = 783401134;
        answer[28] = 819327417;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00180() {
        TimeTicket[] output = new TimeTicket[29];
        output[0].val = 121793606;
        output[1].val = 474003791;
        output[2].val = -822017853;
        output[3].val = 424803127;
        output[4].val = -550226662;
        output[5].val = -515490096;
        output[6].val = -80634635;
        output[7].val = -150259968;
        output[8].val = 105283835;
        output[9].val = 149169702;
        output[10].val = -415310354;
        output[11].val = -76494075;
        output[12].val = 234209772;
        output[13].val = -102864947;
        output[14].val = -608487298;
        output[15].val = 934795135;
        output[16].val = -912449667;
        output[17].val = 124180413;
        output[18].val = -307213366;
        output[19].val = -399422732;
        output[20].val = -813650678;
        output[21].val = -392586916;
        output[22].val = 562838190;
        output[23].val = -585421444;
        output[24].val = 39738546;
        output[25].val = -955341314;
        output[26].val = 784574685;
        output[27].val = -498989519;
        output[28].val = 672994276;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[29];
        answer[0].val = -955341314;
        answer[1].val = -912449667;
        answer[2].val = -822017853;
        answer[3].val = -813650678;
        answer[4].val = -608487298;
        answer[5].val = -585421444;
        answer[6].val = -550226662;
        answer[7].val = -515490096;
        answer[8].val = -498989519;
        answer[9].val = -415310354;
        answer[10].val = -399422732;
        answer[11].val = -392586916;
        answer[12].val = -307213366;
        answer[13].val = -150259968;
        answer[14].val = -102864947;
        answer[15].val = -80634635;
        answer[16].val = -76494075;
        answer[17].val = 39738546;
        answer[18].val = 105283835;
        answer[19].val = 121793606;
        answer[20].val = 124180413;
        answer[21].val = 149169702;
        answer[22].val = 234209772;
        answer[23].val = 424803127;
        answer[24].val = 474003791;
        answer[25].val = 562838190;
        answer[26].val = 672994276;
        answer[27].val = 784574685;
        answer[28].val = 934795135;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00181() {
        TimeTicket[] output = new TimeTicket[13];
        output[0].val = 34582582;
        output[1].val = 354830594;
        output[2].val = 381802813;
        output[3].val = -443163042;
        output[4].val = 19288780;
        output[5].val = 289234043;
        output[6].val = 891402589;
        output[7].val = 937356433;
        output[8].val = -89666557;
        output[9].val = -241660313;
        output[10].val = 423422540;
        output[11].val = -776447052;
        output[12].val = -783188779;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[13];
        answer[0].val = -783188779;
        answer[1].val = -776447052;
        answer[2].val = -443163042;
        answer[3].val = -241660313;
        answer[4].val = -89666557;
        answer[5].val = 19288780;
        answer[6].val = 34582582;
        answer[7].val = 289234043;
        answer[8].val = 354830594;
        answer[9].val = 381802813;
        answer[10].val = 423422540;
        answer[11].val = 891402589;
        answer[12].val = 937356433;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00182() {
        TimeTicket[] output = new TimeTicket[3];
        output[0].val = -913113510;
        output[1].val = -228809797;
        output[2].val = 602093919;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[3];
        answer[0].val = -913113510;
        answer[1].val = -228809797;
        answer[2].val = 602093919;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00183() {
        TimeTicket[] output = new TimeTicket[12];
        output[0].val = 831156010;
        output[1].val = -645244973;
        output[2].val = -200265165;
        output[3].val = 124704157;
        output[4].val = -580616498;
        output[5].val = -946374179;
        output[6].val = 868938733;
        output[7].val = -84659651;
        output[8].val = -124948306;
        output[9].val = 32897677;
        output[10].val = 48615212;
        output[11].val = 595416277;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[12];
        answer[0].val = -946374179;
        answer[1].val = -645244973;
        answer[2].val = -580616498;
        answer[3].val = -200265165;
        answer[4].val = -124948306;
        answer[5].val = -84659651;
        answer[6].val = 32897677;
        answer[7].val = 48615212;
        answer[8].val = 124704157;
        answer[9].val = 595416277;
        answer[10].val = 831156010;
        answer[11].val = 868938733;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00184() {
        TimeTicket[] output = new TimeTicket[8];
        output[0].val = 38193811;
        output[1].val = 901294876;
        output[2].val = 974548026;
        output[3].val = 673595997;
        output[4].val = 483131848;
        output[5].val = 740764498;
        output[6].val = 600023785;
        output[7].val = -407368382;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[8];
        answer[0].val = -407368382;
        answer[1].val = 38193811;
        answer[2].val = 483131848;
        answer[3].val = 600023785;
        answer[4].val = 673595997;
        answer[5].val = 740764498;
        answer[6].val = 901294876;
        answer[7].val = 974548026;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00185() {
        int[] output = new int[11];
        output[0] = -563824653;
        output[1] = 931391952;
        output[2] = -866707873;
        output[3] = -247018485;
        output[4] = 623934474;
        output[5] = 409242906;
        output[6] = -743086576;
        output[7] = 608647880;
        output[8] = 78154472;
        output[9] = -816853426;
        output[10] = -918148550;
        Sorting.radixSort(output);
        int[] answer = new int[11];
        answer[0] = -918148550;
        answer[1] = -866707873;
        answer[2] = -816853426;
        answer[3] = -743086576;
        answer[4] = -563824653;
        answer[5] = -247018485;
        answer[6] = 78154472;
        answer[7] = 409242906;
        answer[8] = 608647880;
        answer[9] = 623934474;
        answer[10] = 931391952;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00186() {
        TimeTicket[] output = new TimeTicket[2];
        output[0].val = 302120459;
        output[1].val = 996425659;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[2];
        answer[0].val = 302120459;
        answer[1].val = 996425659;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00187() {
        TimeTicket[] output = new TimeTicket[17];
        output[0].val = 659549216;
        output[1].val = 94917469;
        output[2].val = 993740030;
        output[3].val = 457475479;
        output[4].val = 676243571;
        output[5].val = -543058142;
        output[6].val = -93761620;
        output[7].val = 845791896;
        output[8].val = -492321139;
        output[9].val = 460684660;
        output[10].val = 753880177;
        output[11].val = 16232116;
        output[12].val = 364775892;
        output[13].val = 310948614;
        output[14].val = 957953562;
        output[15].val = -787809578;
        output[16].val = -97981423;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[17];
        answer[0].val = -787809578;
        answer[1].val = -543058142;
        answer[2].val = -492321139;
        answer[3].val = -97981423;
        answer[4].val = -93761620;
        answer[5].val = 16232116;
        answer[6].val = 94917469;
        answer[7].val = 310948614;
        answer[8].val = 364775892;
        answer[9].val = 457475479;
        answer[10].val = 460684660;
        answer[11].val = 659549216;
        answer[12].val = 676243571;
        answer[13].val = 753880177;
        answer[14].val = 845791896;
        answer[15].val = 957953562;
        answer[16].val = 993740030;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00188() {
        TimeTicket[] output = new TimeTicket[19];
        output[0].val = -911423797;
        output[1].val = -991262127;
        output[2].val = 408041354;
        output[3].val = -685624831;
        output[4].val = -644483188;
        output[5].val = 404033205;
        output[6].val = 262195847;
        output[7].val = -663664236;
        output[8].val = 753056453;
        output[9].val = -682308101;
        output[10].val = 939962343;
        output[11].val = -151240558;
        output[12].val = -331492450;
        output[13].val = 722980613;
        output[14].val = -820157111;
        output[15].val = 974947959;
        output[16].val = 175136585;
        output[17].val = -29737552;
        output[18].val = -749925131;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[19];
        answer[0].val = -991262127;
        answer[1].val = -911423797;
        answer[2].val = -820157111;
        answer[3].val = -749925131;
        answer[4].val = -685624831;
        answer[5].val = -682308101;
        answer[6].val = -663664236;
        answer[7].val = -644483188;
        answer[8].val = -331492450;
        answer[9].val = -151240558;
        answer[10].val = -29737552;
        answer[11].val = 175136585;
        answer[12].val = 262195847;
        answer[13].val = 404033205;
        answer[14].val = 408041354;
        answer[15].val = 722980613;
        answer[16].val = 753056453;
        answer[17].val = 939962343;
        answer[18].val = 974947959;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00189() {
        TimeTicket[] output = new TimeTicket[23];
        output[0].val = -915774489;
        output[1].val = -548332111;
        output[2].val = -412272532;
        output[3].val = 86200316;
        output[4].val = 408482459;
        output[5].val = 326721578;
        output[6].val = 522061171;
        output[7].val = -829521906;
        output[8].val = 878424786;
        output[9].val = 167673587;
        output[10].val = 948147763;
        output[11].val = 548501578;
        output[12].val = 87319538;
        output[13].val = 71660233;
        output[14].val = -173908901;
        output[15].val = -685294489;
        output[16].val = -665207474;
        output[17].val = 688486433;
        output[18].val = -517335627;
        output[19].val = -529149239;
        output[20].val = -64506871;
        output[21].val = -589576166;
        output[22].val = -755714366;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[23];
        answer[0].val = -915774489;
        answer[1].val = -829521906;
        answer[2].val = -755714366;
        answer[3].val = -685294489;
        answer[4].val = -665207474;
        answer[5].val = -589576166;
        answer[6].val = -548332111;
        answer[7].val = -529149239;
        answer[8].val = -517335627;
        answer[9].val = -412272532;
        answer[10].val = -173908901;
        answer[11].val = -64506871;
        answer[12].val = 71660233;
        answer[13].val = 86200316;
        answer[14].val = 87319538;
        answer[15].val = 167673587;
        answer[16].val = 326721578;
        answer[17].val = 408482459;
        answer[18].val = 522061171;
        answer[19].val = 548501578;
        answer[20].val = 688486433;
        answer[21].val = 878424786;
        answer[22].val = 948147763;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00190() {
        TimeTicket[] output = new TimeTicket[7];
        output[0].val = 437825725;
        output[1].val = 985003856;
        output[2].val = 139733628;
        output[3].val = 72681492;
        output[4].val = -803438458;
        output[5].val = 755873707;
        output[6].val = 454967322;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[7];
        answer[0].val = -803438458;
        answer[1].val = 72681492;
        answer[2].val = 139733628;
        answer[3].val = 437825725;
        answer[4].val = 454967322;
        answer[5].val = 755873707;
        answer[6].val = 985003856;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00191() {
        int[] output = new int[28];
        output[0] = -264257862;
        output[1] = -432204220;
        output[2] = 575758955;
        output[3] = 954171622;
        output[4] = 432065150;
        output[5] = 661235096;
        output[6] = 84077457;
        output[7] = 27519260;
        output[8] = 270744906;
        output[9] = -492709416;
        output[10] = 670637402;
        output[11] = -392268742;
        output[12] = 768557108;
        output[13] = 410587662;
        output[14] = -929200414;
        output[15] = -735385601;
        output[16] = -832950884;
        output[17] = 961200264;
        output[18] = 787465968;
        output[19] = -743549639;
        output[20] = 68453150;
        output[21] = -23858125;
        output[22] = 597162938;
        output[23] = -54964238;
        output[24] = -630274784;
        output[25] = 20984919;
        output[26] = 781602908;
        output[27] = 863485157;
        Sorting.radixSort(output);
        int[] answer = new int[28];
        answer[0] = -929200414;
        answer[1] = -832950884;
        answer[2] = -743549639;
        answer[3] = -735385601;
        answer[4] = -630274784;
        answer[5] = -492709416;
        answer[6] = -432204220;
        answer[7] = -392268742;
        answer[8] = -264257862;
        answer[9] = -54964238;
        answer[10] = -23858125;
        answer[11] = 20984919;
        answer[12] = 27519260;
        answer[13] = 68453150;
        answer[14] = 84077457;
        answer[15] = 270744906;
        answer[16] = 410587662;
        answer[17] = 432065150;
        answer[18] = 575758955;
        answer[19] = 597162938;
        answer[20] = 661235096;
        answer[21] = 670637402;
        answer[22] = 768557108;
        answer[23] = 781602908;
        answer[24] = 787465968;
        answer[25] = 863485157;
        answer[26] = 954171622;
        answer[27] = 961200264;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00192() {
        TimeTicket[] output = new TimeTicket[9];
        output[0].val = 989232067;
        output[1].val = 114831177;
        output[2].val = 69699640;
        output[3].val = -30738368;
        output[4].val = -173982517;
        output[5].val = -991623808;
        output[6].val = -804068898;
        output[7].val = -768011334;
        output[8].val = 307610902;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[9];
        answer[0].val = -991623808;
        answer[1].val = -804068898;
        answer[2].val = -768011334;
        answer[3].val = -173982517;
        answer[4].val = -30738368;
        answer[5].val = 69699640;
        answer[6].val = 114831177;
        answer[7].val = 307610902;
        answer[8].val = 989232067;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00193() {
        TimeTicket[] output = new TimeTicket[30];
        output[0].val = -538489048;
        output[1].val = -980123390;
        output[2].val = 778077596;
        output[3].val = -267916486;
        output[4].val = -94933787;
        output[5].val = -392357431;
        output[6].val = -671689767;
        output[7].val = -886363005;
        output[8].val = -364278082;
        output[9].val = 376485967;
        output[10].val = 786239026;
        output[11].val = -927449600;
        output[12].val = 143756204;
        output[13].val = 842565793;
        output[14].val = -667119177;
        output[15].val = 244030730;
        output[16].val = -994633256;
        output[17].val = 90654618;
        output[18].val = -171476370;
        output[19].val = 920452696;
        output[20].val = 551029087;
        output[21].val = -965711718;
        output[22].val = 793832581;
        output[23].val = -848383962;
        output[24].val = 1679852;
        output[25].val = 35407440;
        output[26].val = -733176408;
        output[27].val = 58135851;
        output[28].val = 541940432;
        output[29].val = -569020253;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[30];
        answer[0].val = -994633256;
        answer[1].val = -980123390;
        answer[2].val = -965711718;
        answer[3].val = -927449600;
        answer[4].val = -886363005;
        answer[5].val = -848383962;
        answer[6].val = -733176408;
        answer[7].val = -671689767;
        answer[8].val = -667119177;
        answer[9].val = -569020253;
        answer[10].val = -538489048;
        answer[11].val = -392357431;
        answer[12].val = -364278082;
        answer[13].val = -267916486;
        answer[14].val = -171476370;
        answer[15].val = -94933787;
        answer[16].val = 1679852;
        answer[17].val = 35407440;
        answer[18].val = 58135851;
        answer[19].val = 90654618;
        answer[20].val = 143756204;
        answer[21].val = 244030730;
        answer[22].val = 376485967;
        answer[23].val = 541940432;
        answer[24].val = 551029087;
        answer[25].val = 778077596;
        answer[26].val = 786239026;
        answer[27].val = 793832581;
        answer[28].val = 842565793;
        answer[29].val = 920452696;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00194() {
        TimeTicket[] output = new TimeTicket[7];
        output[0].val = -714975178;
        output[1].val = 362691795;
        output[2].val = 363954747;
        output[3].val = 176288273;
        output[4].val = -394070998;
        output[5].val = 270142797;
        output[6].val = -307851675;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[7];
        answer[0].val = -714975178;
        answer[1].val = -394070998;
        answer[2].val = -307851675;
        answer[3].val = 176288273;
        answer[4].val = 270142797;
        answer[5].val = 362691795;
        answer[6].val = 363954747;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00195() {
        TimeTicket[] output = new TimeTicket[20];
        output[0].val = 164616767;
        output[1].val = -907223708;
        output[2].val = -935659539;
        output[3].val = -769402233;
        output[4].val = 978332868;
        output[5].val = -433759869;
        output[6].val = -925639534;
        output[7].val = -136144811;
        output[8].val = -657364950;
        output[9].val = -129239393;
        output[10].val = -84507013;
        output[11].val = 229661582;
        output[12].val = 419286210;
        output[13].val = 729792394;
        output[14].val = 974168051;
        output[15].val = 521017929;
        output[16].val = 229264223;
        output[17].val = -704633051;
        output[18].val = -266883032;
        output[19].val = 550959627;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[20];
        answer[0].val = -935659539;
        answer[1].val = -925639534;
        answer[2].val = -907223708;
        answer[3].val = -769402233;
        answer[4].val = -704633051;
        answer[5].val = -657364950;
        answer[6].val = -433759869;
        answer[7].val = -266883032;
        answer[8].val = -136144811;
        answer[9].val = -129239393;
        answer[10].val = -84507013;
        answer[11].val = 164616767;
        answer[12].val = 229264223;
        answer[13].val = 229661582;
        answer[14].val = 419286210;
        answer[15].val = 521017929;
        answer[16].val = 550959627;
        answer[17].val = 729792394;
        answer[18].val = 974168051;
        answer[19].val = 978332868;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00196() {
        TimeTicket[] output = new TimeTicket[8];
        output[0].val = 440582615;
        output[1].val = 749336785;
        output[2].val = -894163988;
        output[3].val = -469853621;
        output[4].val = 123260247;
        output[5].val = 550529643;
        output[6].val = 175676310;
        output[7].val = 836916123;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[8];
        answer[0].val = -894163988;
        answer[1].val = -469853621;
        answer[2].val = 123260247;
        answer[3].val = 175676310;
        answer[4].val = 440582615;
        answer[5].val = 550529643;
        answer[6].val = 749336785;
        answer[7].val = 836916123;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00197() {
        int[] output = new int[13];
        output[0] = -652774407;
        output[1] = 710284360;
        output[2] = -740000053;
        output[3] = 731458771;
        output[4] = 836654183;
        output[5] = -751732651;
        output[6] = 710183513;
        output[7] = 21694441;
        output[8] = -991380187;
        output[9] = -322347548;
        output[10] = -24979151;
        output[11] = -892065569;
        output[12] = -771534524;
        Sorting.radixSort(output);
        int[] answer = new int[13];
        answer[0] = -991380187;
        answer[1] = -892065569;
        answer[2] = -771534524;
        answer[3] = -751732651;
        answer[4] = -740000053;
        answer[5] = -652774407;
        answer[6] = -322347548;
        answer[7] = -24979151;
        answer[8] = 21694441;
        answer[9] = 710183513;
        answer[10] = 710284360;
        answer[11] = 731458771;
        answer[12] = 836654183;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00198() {
        TimeTicket[] output = new TimeTicket[3];
        output[0].val = 689306894;
        output[1].val = 712453882;
        output[2].val = 701434889;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[3];
        answer[0].val = 689306894;
        answer[1].val = 701434889;
        answer[2].val = 712453882;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00199() {
        TimeTicket[] output = new TimeTicket[5];
        output[0].val = -66688618;
        output[1].val = -964672815;
        output[2].val = -788001519;
        output[3].val = -852666759;
        output[4].val = -385617502;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[5];
        answer[0].val = -964672815;
        answer[1].val = -852666759;
        answer[2].val = -788001519;
        answer[3].val = -385617502;
        answer[4].val = -66688618;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00200() {
        TimeTicket[] output = new TimeTicket[12];
        output[0].val = -81147173;
        output[1].val = -396918484;
        output[2].val = 292065667;
        output[3].val = 89297110;
        output[4].val = 338546950;
        output[5].val = 276555815;
        output[6].val = -436434555;
        output[7].val = 72900703;
        output[8].val = -486838588;
        output[9].val = -103642275;
        output[10].val = 313456350;
        output[11].val = -218176629;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[12];
        answer[0].val = -486838588;
        answer[1].val = -436434555;
        answer[2].val = -396918484;
        answer[3].val = -218176629;
        answer[4].val = -103642275;
        answer[5].val = -81147173;
        answer[6].val = 72900703;
        answer[7].val = 89297110;
        answer[8].val = 276555815;
        answer[9].val = 292065667;
        answer[10].val = 313456350;
        answer[11].val = 338546950;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00201() {
        TimeTicket[] output = new TimeTicket[25];
        output[0].val = 109459883;
        output[1].val = 933228697;
        output[2].val = 671333531;
        output[3].val = -969775014;
        output[4].val = -33442830;
        output[5].val = -65743422;
        output[6].val = 676119710;
        output[7].val = 372371513;
        output[8].val = -402748262;
        output[9].val = -206852333;
        output[10].val = -69962075;
        output[11].val = 594662407;
        output[12].val = -829307188;
        output[13].val = 738552225;
        output[14].val = -224871703;
        output[15].val = -920426525;
        output[16].val = 530000482;
        output[17].val = -251453141;
        output[18].val = -123414026;
        output[19].val = 627528426;
        output[20].val = -328570527;
        output[21].val = 795888543;
        output[22].val = 191224761;
        output[23].val = -522508199;
        output[24].val = 681757467;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[25];
        answer[0].val = -969775014;
        answer[1].val = -920426525;
        answer[2].val = -829307188;
        answer[3].val = -522508199;
        answer[4].val = -402748262;
        answer[5].val = -328570527;
        answer[6].val = -251453141;
        answer[7].val = -224871703;
        answer[8].val = -206852333;
        answer[9].val = -123414026;
        answer[10].val = -69962075;
        answer[11].val = -65743422;
        answer[12].val = -33442830;
        answer[13].val = 109459883;
        answer[14].val = 191224761;
        answer[15].val = 372371513;
        answer[16].val = 530000482;
        answer[17].val = 594662407;
        answer[18].val = 627528426;
        answer[19].val = 671333531;
        answer[20].val = 676119710;
        answer[21].val = 681757467;
        answer[22].val = 738552225;
        answer[23].val = 795888543;
        answer[24].val = 933228697;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00202() {
        TimeTicket[] output = new TimeTicket[5];
        output[0].val = -517063967;
        output[1].val = -483647797;
        output[2].val = -290339850;
        output[3].val = -765199147;
        output[4].val = 920376626;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[5];
        answer[0].val = -765199147;
        answer[1].val = -517063967;
        answer[2].val = -483647797;
        answer[3].val = -290339850;
        answer[4].val = 920376626;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00203() {
        int[] output = new int[20];
        output[0] = -63367079;
        output[1] = 886380916;
        output[2] = 306990589;
        output[3] = 124184300;
        output[4] = -309468284;
        output[5] = -240861585;
        output[6] = -607144029;
        output[7] = -415171067;
        output[8] = 141866946;
        output[9] = 232222874;
        output[10] = 741688089;
        output[11] = -544452691;
        output[12] = -859508229;
        output[13] = 23654468;
        output[14] = -167349664;
        output[15] = -701297312;
        output[16] = 846955093;
        output[17] = -266606604;
        output[18] = 295681139;
        output[19] = 42331390;
        Sorting.radixSort(output);
        int[] answer = new int[20];
        answer[0] = -859508229;
        answer[1] = -701297312;
        answer[2] = -607144029;
        answer[3] = -544452691;
        answer[4] = -415171067;
        answer[5] = -309468284;
        answer[6] = -266606604;
        answer[7] = -240861585;
        answer[8] = -167349664;
        answer[9] = -63367079;
        answer[10] = 23654468;
        answer[11] = 42331390;
        answer[12] = 124184300;
        answer[13] = 141866946;
        answer[14] = 232222874;
        answer[15] = 295681139;
        answer[16] = 306990589;
        answer[17] = 741688089;
        answer[18] = 846955093;
        answer[19] = 886380916;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00204() {
        TimeTicket[] output = new TimeTicket[2];
        output[0].val = 245354989;
        output[1].val = -516374981;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[2];
        answer[0].val = -516374981;
        answer[1].val = 245354989;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00205() {
        TimeTicket[] output = new TimeTicket[10];
        output[0].val = 186814731;
        output[1].val = -91567207;
        output[2].val = -39500151;
        output[3].val = 60558585;
        output[4].val = -3188755;
        output[5].val = 981690832;
        output[6].val = 771396652;
        output[7].val = 134494089;
        output[8].val = -276072740;
        output[9].val = 258905201;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[10];
        answer[0].val = -276072740;
        answer[1].val = -91567207;
        answer[2].val = -39500151;
        answer[3].val = -3188755;
        answer[4].val = 60558585;
        answer[5].val = 134494089;
        answer[6].val = 186814731;
        answer[7].val = 258905201;
        answer[8].val = 771396652;
        answer[9].val = 981690832;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00206() {
        TimeTicket[] output = new TimeTicket[15];
        output[0].val = -31370583;
        output[1].val = -215997368;
        output[2].val = -67571680;
        output[3].val = 705057157;
        output[4].val = 32140367;
        output[5].val = 153807280;
        output[6].val = 883725277;
        output[7].val = 564330577;
        output[8].val = -890079308;
        output[9].val = -265912095;
        output[10].val = 61545083;
        output[11].val = 805821907;
        output[12].val = -610074786;
        output[13].val = 45167825;
        output[14].val = -176244181;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[15];
        answer[0].val = -890079308;
        answer[1].val = -610074786;
        answer[2].val = -265912095;
        answer[3].val = -215997368;
        answer[4].val = -176244181;
        answer[5].val = -67571680;
        answer[6].val = -31370583;
        answer[7].val = 32140367;
        answer[8].val = 45167825;
        answer[9].val = 61545083;
        answer[10].val = 153807280;
        answer[11].val = 564330577;
        answer[12].val = 705057157;
        answer[13].val = 805821907;
        answer[14].val = 883725277;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00207() {
        TimeTicket[] output = new TimeTicket[27];
        output[0].val = -364008686;
        output[1].val = -904821455;
        output[2].val = -836488131;
        output[3].val = -509503477;
        output[4].val = -200440817;
        output[5].val = 857477570;
        output[6].val = 178978253;
        output[7].val = 128176256;
        output[8].val = 751358321;
        output[9].val = 390072812;
        output[10].val = -104005547;
        output[11].val = 303522830;
        output[12].val = 830344347;
        output[13].val = 28787841;
        output[14].val = 465766954;
        output[15].val = 974267308;
        output[16].val = 927759854;
        output[17].val = 571988897;
        output[18].val = 759842715;
        output[19].val = -145595625;
        output[20].val = -21819703;
        output[21].val = -317968806;
        output[22].val = -251832147;
        output[23].val = 595346146;
        output[24].val = -789339313;
        output[25].val = -701081228;
        output[26].val = 85501694;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[27];
        answer[0].val = -904821455;
        answer[1].val = -836488131;
        answer[2].val = -789339313;
        answer[3].val = -701081228;
        answer[4].val = -509503477;
        answer[5].val = -364008686;
        answer[6].val = -317968806;
        answer[7].val = -251832147;
        answer[8].val = -200440817;
        answer[9].val = -145595625;
        answer[10].val = -104005547;
        answer[11].val = -21819703;
        answer[12].val = 28787841;
        answer[13].val = 85501694;
        answer[14].val = 128176256;
        answer[15].val = 178978253;
        answer[16].val = 303522830;
        answer[17].val = 390072812;
        answer[18].val = 465766954;
        answer[19].val = 571988897;
        answer[20].val = 595346146;
        answer[21].val = 751358321;
        answer[22].val = 759842715;
        answer[23].val = 830344347;
        answer[24].val = 857477570;
        answer[25].val = 927759854;
        answer[26].val = 974267308;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00208() {
        TimeTicket[] output = new TimeTicket[6];
        output[0].val = 92537517;
        output[1].val = 658076273;
        output[2].val = 815868618;
        output[3].val = 917280091;
        output[4].val = 596790541;
        output[5].val = -606110680;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[6];
        answer[0].val = -606110680;
        answer[1].val = 92537517;
        answer[2].val = 596790541;
        answer[3].val = 658076273;
        answer[4].val = 815868618;
        answer[5].val = 917280091;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00209() {
        int[] output = new int[29];
        output[0] = 808790921;
        output[1] = 65407997;
        output[2] = -156607500;
        output[3] = -643809476;
        output[4] = -984945246;
        output[5] = 216824461;
        output[6] = 32801119;
        output[7] = 378428489;
        output[8] = 195260963;
        output[9] = -701992786;
        output[10] = 779319748;
        output[11] = 950365487;
        output[12] = 495530249;
        output[13] = -957415057;
        output[14] = 163014784;
        output[15] = -261984428;
        output[16] = -401735328;
        output[17] = 996624400;
        output[18] = -398380057;
        output[19] = -155622136;
        output[20] = -500492451;
        output[21] = -279297973;
        output[22] = 291259938;
        output[23] = 348755590;
        output[24] = 956711824;
        output[25] = -778549561;
        output[26] = -459074200;
        output[27] = -850258012;
        output[28] = 843213626;
        Sorting.radixSort(output);
        int[] answer = new int[29];
        answer[0] = -984945246;
        answer[1] = -957415057;
        answer[2] = -850258012;
        answer[3] = -778549561;
        answer[4] = -701992786;
        answer[5] = -643809476;
        answer[6] = -500492451;
        answer[7] = -459074200;
        answer[8] = -401735328;
        answer[9] = -398380057;
        answer[10] = -279297973;
        answer[11] = -261984428;
        answer[12] = -156607500;
        answer[13] = -155622136;
        answer[14] = 32801119;
        answer[15] = 65407997;
        answer[16] = 163014784;
        answer[17] = 195260963;
        answer[18] = 216824461;
        answer[19] = 291259938;
        answer[20] = 348755590;
        answer[21] = 378428489;
        answer[22] = 495530249;
        answer[23] = 779319748;
        answer[24] = 808790921;
        answer[25] = 843213626;
        answer[26] = 950365487;
        answer[27] = 956711824;
        answer[28] = 996624400;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00210() {
        TimeTicket[] output = new TimeTicket[30];
        output[0].val = -187498857;
        output[1].val = 155301862;
        output[2].val = 906227877;
        output[3].val = 61409503;
        output[4].val = -727475921;
        output[5].val = -236419598;
        output[6].val = -295886249;
        output[7].val = 579341367;
        output[8].val = 296749093;
        output[9].val = 701605964;
        output[10].val = -401477724;
        output[11].val = 33406763;
        output[12].val = 806271;
        output[13].val = 223303894;
        output[14].val = -645353306;
        output[15].val = -949445332;
        output[16].val = 6037782;
        output[17].val = -666239234;
        output[18].val = 768205585;
        output[19].val = 52539904;
        output[20].val = 942571906;
        output[21].val = -770159277;
        output[22].val = 56615728;
        output[23].val = 979051371;
        output[24].val = 68114146;
        output[25].val = 842743834;
        output[26].val = -923397293;
        output[27].val = -378197982;
        output[28].val = -377216760;
        output[29].val = 560346314;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[30];
        answer[0].val = -949445332;
        answer[1].val = -923397293;
        answer[2].val = -770159277;
        answer[3].val = -727475921;
        answer[4].val = -666239234;
        answer[5].val = -645353306;
        answer[6].val = -401477724;
        answer[7].val = -378197982;
        answer[8].val = -377216760;
        answer[9].val = -295886249;
        answer[10].val = -236419598;
        answer[11].val = -187498857;
        answer[12].val = 806271;
        answer[13].val = 6037782;
        answer[14].val = 33406763;
        answer[15].val = 52539904;
        answer[16].val = 56615728;
        answer[17].val = 61409503;
        answer[18].val = 68114146;
        answer[19].val = 155301862;
        answer[20].val = 223303894;
        answer[21].val = 296749093;
        answer[22].val = 560346314;
        answer[23].val = 579341367;
        answer[24].val = 701605964;
        answer[25].val = 768205585;
        answer[26].val = 842743834;
        answer[27].val = 906227877;
        answer[28].val = 942571906;
        answer[29].val = 979051371;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00211() {
        TimeTicket[] output = new TimeTicket[19];
        output[0].val = -280824843;
        output[1].val = -511553441;
        output[2].val = 621335597;
        output[3].val = -266274483;
        output[4].val = 144147335;
        output[5].val = -623064392;
        output[6].val = -295521508;
        output[7].val = -97477977;
        output[8].val = 353809498;
        output[9].val = 6029420;
        output[10].val = -840218796;
        output[11].val = -269123634;
        output[12].val = -188441097;
        output[13].val = 510710442;
        output[14].val = -980621571;
        output[15].val = 284158919;
        output[16].val = -781508150;
        output[17].val = 310016623;
        output[18].val = 43379344;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[19];
        answer[0].val = -980621571;
        answer[1].val = -840218796;
        answer[2].val = -781508150;
        answer[3].val = -623064392;
        answer[4].val = -511553441;
        answer[5].val = -295521508;
        answer[6].val = -280824843;
        answer[7].val = -269123634;
        answer[8].val = -266274483;
        answer[9].val = -188441097;
        answer[10].val = -97477977;
        answer[11].val = 6029420;
        answer[12].val = 43379344;
        answer[13].val = 144147335;
        answer[14].val = 284158919;
        answer[15].val = 310016623;
        answer[16].val = 353809498;
        answer[17].val = 510710442;
        answer[18].val = 621335597;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00212() {
        TimeTicket[] output = new TimeTicket[13];
        output[0].val = 428915151;
        output[1].val = 566145749;
        output[2].val = -267264828;
        output[3].val = -2338008;
        output[4].val = 168547364;
        output[5].val = 290825291;
        output[6].val = -411753418;
        output[7].val = -15622548;
        output[8].val = -878493567;
        output[9].val = 505773483;
        output[10].val = -855668156;
        output[11].val = -341708532;
        output[12].val = 357412784;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[13];
        answer[0].val = -878493567;
        answer[1].val = -855668156;
        answer[2].val = -411753418;
        answer[3].val = -341708532;
        answer[4].val = -267264828;
        answer[5].val = -15622548;
        answer[6].val = -2338008;
        answer[7].val = 168547364;
        answer[8].val = 290825291;
        answer[9].val = 357412784;
        answer[10].val = 428915151;
        answer[11].val = 505773483;
        answer[12].val = 566145749;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00213() {
        TimeTicket[] output = new TimeTicket[22];
        output[0].val = -12835604;
        output[1].val = -60814594;
        output[2].val = 4844435;
        output[3].val = -875893257;
        output[4].val = 450182526;
        output[5].val = -876706727;
        output[6].val = -853237426;
        output[7].val = -976060177;
        output[8].val = 976487225;
        output[9].val = 867719246;
        output[10].val = -54977528;
        output[11].val = -232366202;
        output[12].val = 844979870;
        output[13].val = -269080029;
        output[14].val = 821407644;
        output[15].val = 715443352;
        output[16].val = -444483920;
        output[17].val = 507542223;
        output[18].val = -172207984;
        output[19].val = 985952701;
        output[20].val = 80872610;
        output[21].val = -824485866;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[22];
        answer[0].val = -976060177;
        answer[1].val = -876706727;
        answer[2].val = -875893257;
        answer[3].val = -853237426;
        answer[4].val = -824485866;
        answer[5].val = -444483920;
        answer[6].val = -269080029;
        answer[7].val = -232366202;
        answer[8].val = -172207984;
        answer[9].val = -60814594;
        answer[10].val = -54977528;
        answer[11].val = -12835604;
        answer[12].val = 4844435;
        answer[13].val = 80872610;
        answer[14].val = 450182526;
        answer[15].val = 507542223;
        answer[16].val = 715443352;
        answer[17].val = 821407644;
        answer[18].val = 844979870;
        answer[19].val = 867719246;
        answer[20].val = 976487225;
        answer[21].val = 985952701;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00214() {
        TimeTicket[] output = new TimeTicket[16];
        output[0].val = 910921742;
        output[1].val = -245242501;
        output[2].val = 301159317;
        output[3].val = 938206923;
        output[4].val = 13667866;
        output[5].val = -11689671;
        output[6].val = -3865528;
        output[7].val = 314159075;
        output[8].val = -826656192;
        output[9].val = -415965003;
        output[10].val = 944002695;
        output[11].val = 76937233;
        output[12].val = 283855190;
        output[13].val = -123269573;
        output[14].val = -567161276;
        output[15].val = -643889791;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[16];
        answer[0].val = -826656192;
        answer[1].val = -643889791;
        answer[2].val = -567161276;
        answer[3].val = -415965003;
        answer[4].val = -245242501;
        answer[5].val = -123269573;
        answer[6].val = -11689671;
        answer[7].val = -3865528;
        answer[8].val = 13667866;
        answer[9].val = 76937233;
        answer[10].val = 283855190;
        answer[11].val = 301159317;
        answer[12].val = 314159075;
        answer[13].val = 910921742;
        answer[14].val = 938206923;
        answer[15].val = 944002695;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00215() {
        int[] output = new int[1];
        output[0] = 390156618;
        Sorting.radixSort(output);
        int[] answer = new int[1];
        answer[0] = 390156618;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00216() {
        TimeTicket[] output = new TimeTicket[27];
        output[0].val = -108264315;
        output[1].val = 138026779;
        output[2].val = -767407296;
        output[3].val = 688844178;
        output[4].val = 179865089;
        output[5].val = 245672093;
        output[6].val = 549886696;
        output[7].val = -856198755;
        output[8].val = 260141129;
        output[9].val = -840162249;
        output[10].val = -124584817;
        output[11].val = 567797116;
        output[12].val = -616429812;
        output[13].val = -341780694;
        output[14].val = 114106634;
        output[15].val = -841787932;
        output[16].val = 419250534;
        output[17].val = 136080794;
        output[18].val = -399141104;
        output[19].val = -258444774;
        output[20].val = -995271035;
        output[21].val = -481819629;
        output[22].val = 914371049;
        output[23].val = -703529986;
        output[24].val = 538659148;
        output[25].val = 913413148;
        output[26].val = -627006801;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[27];
        answer[0].val = -995271035;
        answer[1].val = -856198755;
        answer[2].val = -841787932;
        answer[3].val = -840162249;
        answer[4].val = -767407296;
        answer[5].val = -703529986;
        answer[6].val = -627006801;
        answer[7].val = -616429812;
        answer[8].val = -481819629;
        answer[9].val = -399141104;
        answer[10].val = -341780694;
        answer[11].val = -258444774;
        answer[12].val = -124584817;
        answer[13].val = -108264315;
        answer[14].val = 114106634;
        answer[15].val = 136080794;
        answer[16].val = 138026779;
        answer[17].val = 179865089;
        answer[18].val = 245672093;
        answer[19].val = 260141129;
        answer[20].val = 419250534;
        answer[21].val = 538659148;
        answer[22].val = 549886696;
        answer[23].val = 567797116;
        answer[24].val = 688844178;
        answer[25].val = 913413148;
        answer[26].val = 914371049;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00217() {
        TimeTicket[] output = new TimeTicket[11];
        output[0].val = 907141748;
        output[1].val = -445413323;
        output[2].val = -680575526;
        output[3].val = 761093821;
        output[4].val = -683135170;
        output[5].val = -875683911;
        output[6].val = -643892811;
        output[7].val = -651529411;
        output[8].val = 359700500;
        output[9].val = -659615088;
        output[10].val = 506201989;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[11];
        answer[0].val = -875683911;
        answer[1].val = -683135170;
        answer[2].val = -680575526;
        answer[3].val = -659615088;
        answer[4].val = -651529411;
        answer[5].val = -643892811;
        answer[6].val = -445413323;
        answer[7].val = 359700500;
        answer[8].val = 506201989;
        answer[9].val = 761093821;
        answer[10].val = 907141748;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00218() {
        TimeTicket[] output = new TimeTicket[6];
        output[0].val = -406185564;
        output[1].val = 426454186;
        output[2].val = -103807998;
        output[3].val = 270572588;
        output[4].val = 934578783;
        output[5].val = 224451509;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[6];
        answer[0].val = -406185564;
        answer[1].val = -103807998;
        answer[2].val = 224451509;
        answer[3].val = 270572588;
        answer[4].val = 426454186;
        answer[5].val = 934578783;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00219() {
        TimeTicket[] output = new TimeTicket[27];
        output[0].val = -664528319;
        output[1].val = 822320100;
        output[2].val = -214033851;
        output[3].val = 747977166;
        output[4].val = 141543467;
        output[5].val = -850331453;
        output[6].val = -415945415;
        output[7].val = -44147119;
        output[8].val = 829257573;
        output[9].val = -47389895;
        output[10].val = -547542569;
        output[11].val = -945938595;
        output[12].val = 85669665;
        output[13].val = -833722443;
        output[14].val = -166509425;
        output[15].val = -8223018;
        output[16].val = -595038507;
        output[17].val = 459471704;
        output[18].val = -414185819;
        output[19].val = -405940453;
        output[20].val = 963406638;
        output[21].val = 526056296;
        output[22].val = 319900897;
        output[23].val = 201648285;
        output[24].val = -148751386;
        output[25].val = 946689362;
        output[26].val = -580859810;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[27];
        answer[0].val = -945938595;
        answer[1].val = -850331453;
        answer[2].val = -833722443;
        answer[3].val = -664528319;
        answer[4].val = -595038507;
        answer[5].val = -580859810;
        answer[6].val = -547542569;
        answer[7].val = -415945415;
        answer[8].val = -414185819;
        answer[9].val = -405940453;
        answer[10].val = -214033851;
        answer[11].val = -166509425;
        answer[12].val = -148751386;
        answer[13].val = -47389895;
        answer[14].val = -44147119;
        answer[15].val = -8223018;
        answer[16].val = 85669665;
        answer[17].val = 141543467;
        answer[18].val = 201648285;
        answer[19].val = 319900897;
        answer[20].val = 459471704;
        answer[21].val = 526056296;
        answer[22].val = 747977166;
        answer[23].val = 822320100;
        answer[24].val = 829257573;
        answer[25].val = 946689362;
        answer[26].val = 963406638;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00220() {
        TimeTicket[] output = new TimeTicket[27];
        output[0].val = -172290488;
        output[1].val = 523911789;
        output[2].val = 108137519;
        output[3].val = 138619241;
        output[4].val = 762838813;
        output[5].val = -368891327;
        output[6].val = -469821020;
        output[7].val = 705029581;
        output[8].val = -725308776;
        output[9].val = 556270124;
        output[10].val = -548517849;
        output[11].val = 627091437;
        output[12].val = -566945637;
        output[13].val = 497281352;
        output[14].val = -272565665;
        output[15].val = -498667037;
        output[16].val = -451084704;
        output[17].val = 492578748;
        output[18].val = 143725706;
        output[19].val = -616813555;
        output[20].val = -856691729;
        output[21].val = 636451940;
        output[22].val = 959983500;
        output[23].val = 523846918;
        output[24].val = 974255974;
        output[25].val = 103921718;
        output[26].val = 988049878;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[27];
        answer[0].val = -856691729;
        answer[1].val = -725308776;
        answer[2].val = -616813555;
        answer[3].val = -566945637;
        answer[4].val = -548517849;
        answer[5].val = -498667037;
        answer[6].val = -469821020;
        answer[7].val = -451084704;
        answer[8].val = -368891327;
        answer[9].val = -272565665;
        answer[10].val = -172290488;
        answer[11].val = 103921718;
        answer[12].val = 108137519;
        answer[13].val = 138619241;
        answer[14].val = 143725706;
        answer[15].val = 492578748;
        answer[16].val = 497281352;
        answer[17].val = 523846918;
        answer[18].val = 523911789;
        answer[19].val = 556270124;
        answer[20].val = 627091437;
        answer[21].val = 636451940;
        answer[22].val = 705029581;
        answer[23].val = 762838813;
        answer[24].val = 959983500;
        answer[25].val = 974255974;
        answer[26].val = 988049878;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00221() {
        int[] output = new int[2];
        output[0] = -301346098;
        output[1] = 729414413;
        Sorting.radixSort(output);
        int[] answer = new int[2];
        answer[0] = -301346098;
        answer[1] = 729414413;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00222() {
        TimeTicket[] output = new TimeTicket[22];
        output[0].val = -178036585;
        output[1].val = -594783743;
        output[2].val = -259630085;
        output[3].val = 249800116;
        output[4].val = 581721246;
        output[5].val = 339072496;
        output[6].val = -309286142;
        output[7].val = -47273053;
        output[8].val = 783258973;
        output[9].val = 136476097;
        output[10].val = -472714173;
        output[11].val = 589881005;
        output[12].val = -736314035;
        output[13].val = -472821886;
        output[14].val = 458029363;
        output[15].val = 673544044;
        output[16].val = -642316985;
        output[17].val = 367632544;
        output[18].val = 783209183;
        output[19].val = -564232590;
        output[20].val = -64545245;
        output[21].val = 637367719;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[22];
        answer[0].val = -736314035;
        answer[1].val = -642316985;
        answer[2].val = -594783743;
        answer[3].val = -564232590;
        answer[4].val = -472821886;
        answer[5].val = -472714173;
        answer[6].val = -309286142;
        answer[7].val = -259630085;
        answer[8].val = -178036585;
        answer[9].val = -64545245;
        answer[10].val = -47273053;
        answer[11].val = 136476097;
        answer[12].val = 249800116;
        answer[13].val = 339072496;
        answer[14].val = 367632544;
        answer[15].val = 458029363;
        answer[16].val = 581721246;
        answer[17].val = 589881005;
        answer[18].val = 637367719;
        answer[19].val = 673544044;
        answer[20].val = 783209183;
        answer[21].val = 783258973;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00223() {
        TimeTicket[] output = new TimeTicket[26];
        output[0].val = -861313473;
        output[1].val = 600210898;
        output[2].val = -23667391;
        output[3].val = 180239755;
        output[4].val = 828222473;
        output[5].val = 713070797;
        output[6].val = -916684968;
        output[7].val = -246550721;
        output[8].val = 85430337;
        output[9].val = -530020978;
        output[10].val = -555691497;
        output[11].val = 870471543;
        output[12].val = 875720260;
        output[13].val = 69918758;
        output[14].val = 668674916;
        output[15].val = 246879955;
        output[16].val = 774706138;
        output[17].val = 832779605;
        output[18].val = -849557220;
        output[19].val = -331133361;
        output[20].val = 63391203;
        output[21].val = 353675861;
        output[22].val = -328725773;
        output[23].val = -492286574;
        output[24].val = 164362237;
        output[25].val = -234597298;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[26];
        answer[0].val = -916684968;
        answer[1].val = -861313473;
        answer[2].val = -849557220;
        answer[3].val = -555691497;
        answer[4].val = -530020978;
        answer[5].val = -492286574;
        answer[6].val = -331133361;
        answer[7].val = -328725773;
        answer[8].val = -246550721;
        answer[9].val = -234597298;
        answer[10].val = -23667391;
        answer[11].val = 63391203;
        answer[12].val = 69918758;
        answer[13].val = 85430337;
        answer[14].val = 164362237;
        answer[15].val = 180239755;
        answer[16].val = 246879955;
        answer[17].val = 353675861;
        answer[18].val = 600210898;
        answer[19].val = 668674916;
        answer[20].val = 713070797;
        answer[21].val = 774706138;
        answer[22].val = 828222473;
        answer[23].val = 832779605;
        answer[24].val = 870471543;
        answer[25].val = 875720260;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00224() {
        TimeTicket[] output = new TimeTicket[10];
        output[0].val = 21585752;
        output[1].val = 772706302;
        output[2].val = -823998379;
        output[3].val = 752436707;
        output[4].val = 336097623;
        output[5].val = 996291688;
        output[6].val = -275109241;
        output[7].val = 126455142;
        output[8].val = -456015395;
        output[9].val = -204090887;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[10];
        answer[0].val = -823998379;
        answer[1].val = -456015395;
        answer[2].val = -275109241;
        answer[3].val = -204090887;
        answer[4].val = 21585752;
        answer[5].val = 126455142;
        answer[6].val = 336097623;
        answer[7].val = 752436707;
        answer[8].val = 772706302;
        answer[9].val = 996291688;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00225() {
        TimeTicket[] output = new TimeTicket[17];
        output[0].val = -339467897;
        output[1].val = -988182685;
        output[2].val = 430815057;
        output[3].val = 803281384;
        output[4].val = 398242948;
        output[5].val = 431727804;
        output[6].val = -205237920;
        output[7].val = -393140570;
        output[8].val = 15340803;
        output[9].val = 633421882;
        output[10].val = 686682907;
        output[11].val = -594505593;
        output[12].val = 900797171;
        output[13].val = 250109794;
        output[14].val = 512967687;
        output[15].val = 11968865;
        output[16].val = 676493087;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[17];
        answer[0].val = -988182685;
        answer[1].val = -594505593;
        answer[2].val = -393140570;
        answer[3].val = -339467897;
        answer[4].val = -205237920;
        answer[5].val = 11968865;
        answer[6].val = 15340803;
        answer[7].val = 250109794;
        answer[8].val = 398242948;
        answer[9].val = 430815057;
        answer[10].val = 431727804;
        answer[11].val = 512967687;
        answer[12].val = 633421882;
        answer[13].val = 676493087;
        answer[14].val = 686682907;
        answer[15].val = 803281384;
        answer[16].val = 900797171;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00226() {
        TimeTicket[] output = new TimeTicket[6];
        output[0].val = 73068279;
        output[1].val = 192028519;
        output[2].val = 395151349;
        output[3].val = 229250967;
        output[4].val = 584176192;
        output[5].val = 389934940;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[6];
        answer[0].val = 73068279;
        answer[1].val = 192028519;
        answer[2].val = 229250967;
        answer[3].val = 389934940;
        answer[4].val = 395151349;
        answer[5].val = 584176192;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00227() {
        int[] output = new int[18];
        output[0] = 91221615;
        output[1] = 619803880;
        output[2] = -290463027;
        output[3] = -541412879;
        output[4] = 236700827;
        output[5] = 812617446;
        output[6] = 973645107;
        output[7] = 742031062;
        output[8] = 658224374;
        output[9] = -861240724;
        output[10] = -919376023;
        output[11] = 461248755;
        output[12] = 342857432;
        output[13] = -544872492;
        output[14] = -897079174;
        output[15] = -724257256;
        output[16] = 75629285;
        output[17] = 23440606;
        Sorting.radixSort(output);
        int[] answer = new int[18];
        answer[0] = -919376023;
        answer[1] = -897079174;
        answer[2] = -861240724;
        answer[3] = -724257256;
        answer[4] = -544872492;
        answer[5] = -541412879;
        answer[6] = -290463027;
        answer[7] = 23440606;
        answer[8] = 75629285;
        answer[9] = 91221615;
        answer[10] = 236700827;
        answer[11] = 342857432;
        answer[12] = 461248755;
        answer[13] = 619803880;
        answer[14] = 658224374;
        answer[15] = 742031062;
        answer[16] = 812617446;
        answer[17] = 973645107;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00228() {
        TimeTicket[] output = new TimeTicket[20];
        output[0].val = 393881876;
        output[1].val = -936787838;
        output[2].val = -672387826;
        output[3].val = 872806345;
        output[4].val = -211787553;
        output[5].val = 596728995;
        output[6].val = 264558191;
        output[7].val = -599786406;
        output[8].val = -437182775;
        output[9].val = -510653390;
        output[10].val = 920002711;
        output[11].val = 483173752;
        output[12].val = -653736330;
        output[13].val = -43373277;
        output[14].val = 978049045;
        output[15].val = -468156393;
        output[16].val = 945543225;
        output[17].val = -881018417;
        output[18].val = 901755022;
        output[19].val = -395219575;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[20];
        answer[0].val = -936787838;
        answer[1].val = -881018417;
        answer[2].val = -672387826;
        answer[3].val = -653736330;
        answer[4].val = -599786406;
        answer[5].val = -510653390;
        answer[6].val = -468156393;
        answer[7].val = -437182775;
        answer[8].val = -395219575;
        answer[9].val = -211787553;
        answer[10].val = -43373277;
        answer[11].val = 264558191;
        answer[12].val = 393881876;
        answer[13].val = 483173752;
        answer[14].val = 596728995;
        answer[15].val = 872806345;
        answer[16].val = 901755022;
        answer[17].val = 920002711;
        answer[18].val = 945543225;
        answer[19].val = 978049045;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00229() {
        TimeTicket[] output = new TimeTicket[10];
        output[0].val = -656397917;
        output[1].val = -309155223;
        output[2].val = -486034209;
        output[3].val = -747565033;
        output[4].val = -165698384;
        output[5].val = -997711710;
        output[6].val = -462656177;
        output[7].val = -722670047;
        output[8].val = -158992610;
        output[9].val = -845411262;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[10];
        answer[0].val = -997711710;
        answer[1].val = -845411262;
        answer[2].val = -747565033;
        answer[3].val = -722670047;
        answer[4].val = -656397917;
        answer[5].val = -486034209;
        answer[6].val = -462656177;
        answer[7].val = -309155223;
        answer[8].val = -165698384;
        answer[9].val = -158992610;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00230() {
        TimeTicket[] output = new TimeTicket[30];
        output[0].val = -23235023;
        output[1].val = -144341626;
        output[2].val = 782101472;
        output[3].val = -568510169;
        output[4].val = -666415455;
        output[5].val = 8158637;
        output[6].val = -755002598;
        output[7].val = 682046865;
        output[8].val = -376339957;
        output[9].val = 146056818;
        output[10].val = 988817316;
        output[11].val = -648126074;
        output[12].val = 762443300;
        output[13].val = 572468765;
        output[14].val = -277347560;
        output[15].val = -265520892;
        output[16].val = 110217862;
        output[17].val = 145344308;
        output[18].val = -704069296;
        output[19].val = 82726322;
        output[20].val = 895714039;
        output[21].val = -71254490;
        output[22].val = -328641448;
        output[23].val = 348080009;
        output[24].val = -32324163;
        output[25].val = -102575448;
        output[26].val = -176207643;
        output[27].val = -626304210;
        output[28].val = -355747964;
        output[29].val = 996778100;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[30];
        answer[0].val = -755002598;
        answer[1].val = -704069296;
        answer[2].val = -666415455;
        answer[3].val = -648126074;
        answer[4].val = -626304210;
        answer[5].val = -568510169;
        answer[6].val = -376339957;
        answer[7].val = -355747964;
        answer[8].val = -328641448;
        answer[9].val = -277347560;
        answer[10].val = -265520892;
        answer[11].val = -176207643;
        answer[12].val = -144341626;
        answer[13].val = -102575448;
        answer[14].val = -71254490;
        answer[15].val = -32324163;
        answer[16].val = -23235023;
        answer[17].val = 8158637;
        answer[18].val = 82726322;
        answer[19].val = 110217862;
        answer[20].val = 145344308;
        answer[21].val = 146056818;
        answer[22].val = 348080009;
        answer[23].val = 572468765;
        answer[24].val = 682046865;
        answer[25].val = 762443300;
        answer[26].val = 782101472;
        answer[27].val = 895714039;
        answer[28].val = 988817316;
        answer[29].val = 996778100;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00231() {
        TimeTicket[] output = new TimeTicket[9];
        output[0].val = 874998761;
        output[1].val = 395759042;
        output[2].val = -355418579;
        output[3].val = -603412640;
        output[4].val = -314380616;
        output[5].val = -854837674;
        output[6].val = -5530311;
        output[7].val = 882664171;
        output[8].val = -867726019;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[9];
        answer[0].val = -867726019;
        answer[1].val = -854837674;
        answer[2].val = -603412640;
        answer[3].val = -355418579;
        answer[4].val = -314380616;
        answer[5].val = -5530311;
        answer[6].val = 395759042;
        answer[7].val = 874998761;
        answer[8].val = 882664171;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00232() {
        TimeTicket[] output = new TimeTicket[9];
        output[0].val = 769962547;
        output[1].val = 827766213;
        output[2].val = 627073245;
        output[3].val = -705583100;
        output[4].val = 5805584;
        output[5].val = -763955089;
        output[6].val = -698534911;
        output[7].val = 594616164;
        output[8].val = -14461571;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[9];
        answer[0].val = -763955089;
        answer[1].val = -705583100;
        answer[2].val = -698534911;
        answer[3].val = -14461571;
        answer[4].val = 5805584;
        answer[5].val = 594616164;
        answer[6].val = 627073245;
        answer[7].val = 769962547;
        answer[8].val = 827766213;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00233() {
        int[] output = new int[9];
        output[0] = 32000403;
        output[1] = 494586833;
        output[2] = -123595291;
        output[3] = -436048662;
        output[4] = 121560066;
        output[5] = 754504524;
        output[6] = 496009644;
        output[7] = -8113239;
        output[8] = 408541216;
        Sorting.radixSort(output);
        int[] answer = new int[9];
        answer[0] = -436048662;
        answer[1] = -123595291;
        answer[2] = -8113239;
        answer[3] = 32000403;
        answer[4] = 121560066;
        answer[5] = 408541216;
        answer[6] = 494586833;
        answer[7] = 496009644;
        answer[8] = 754504524;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00234() {
        TimeTicket[] output = new TimeTicket[13];
        output[0].val = -731570135;
        output[1].val = -922338916;
        output[2].val = 995024344;
        output[3].val = -77030073;
        output[4].val = -215675186;
        output[5].val = -143821739;
        output[6].val = -934077540;
        output[7].val = -215067489;
        output[8].val = -35236778;
        output[9].val = 270033754;
        output[10].val = 557260372;
        output[11].val = 923896780;
        output[12].val = -122320051;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[13];
        answer[0].val = -934077540;
        answer[1].val = -922338916;
        answer[2].val = -731570135;
        answer[3].val = -215675186;
        answer[4].val = -215067489;
        answer[5].val = -143821739;
        answer[6].val = -122320051;
        answer[7].val = -77030073;
        answer[8].val = -35236778;
        answer[9].val = 270033754;
        answer[10].val = 557260372;
        answer[11].val = 923896780;
        answer[12].val = 995024344;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00235() {
        TimeTicket[] output = new TimeTicket[14];
        output[0].val = 174175116;
        output[1].val = -398840025;
        output[2].val = -835306891;
        output[3].val = 12994636;
        output[4].val = -454201969;
        output[5].val = -107451311;
        output[6].val = 986829774;
        output[7].val = 908998855;
        output[8].val = 49852453;
        output[9].val = -476316918;
        output[10].val = -130424315;
        output[11].val = 432761041;
        output[12].val = -274177999;
        output[13].val = -172481502;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[14];
        answer[0].val = -835306891;
        answer[1].val = -476316918;
        answer[2].val = -454201969;
        answer[3].val = -398840025;
        answer[4].val = -274177999;
        answer[5].val = -172481502;
        answer[6].val = -130424315;
        answer[7].val = -107451311;
        answer[8].val = 12994636;
        answer[9].val = 49852453;
        answer[10].val = 174175116;
        answer[11].val = 432761041;
        answer[12].val = 908998855;
        answer[13].val = 986829774;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00236() {
        TimeTicket[] output = new TimeTicket[8];
        output[0].val = 185599485;
        output[1].val = 583577550;
        output[2].val = -601669614;
        output[3].val = -469252256;
        output[4].val = -794074003;
        output[5].val = -257217425;
        output[6].val = -335825108;
        output[7].val = -952620815;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[8];
        answer[0].val = -952620815;
        answer[1].val = -794074003;
        answer[2].val = -601669614;
        answer[3].val = -469252256;
        answer[4].val = -335825108;
        answer[5].val = -257217425;
        answer[6].val = 185599485;
        answer[7].val = 583577550;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00237() {
        TimeTicket[] output = new TimeTicket[15];
        output[0].val = -91919535;
        output[1].val = -689446091;
        output[2].val = -834148848;
        output[3].val = 269713498;
        output[4].val = -219993667;
        output[5].val = -778858523;
        output[6].val = -841541658;
        output[7].val = 695039226;
        output[8].val = -989513740;
        output[9].val = -496521404;
        output[10].val = 839807191;
        output[11].val = -796427699;
        output[12].val = 23813012;
        output[13].val = -459216099;
        output[14].val = 23344608;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[15];
        answer[0].val = -989513740;
        answer[1].val = -841541658;
        answer[2].val = -834148848;
        answer[3].val = -796427699;
        answer[4].val = -778858523;
        answer[5].val = -689446091;
        answer[6].val = -496521404;
        answer[7].val = -459216099;
        answer[8].val = -219993667;
        answer[9].val = -91919535;
        answer[10].val = 23344608;
        answer[11].val = 23813012;
        answer[12].val = 269713498;
        answer[13].val = 695039226;
        answer[14].val = 839807191;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00238() {
        TimeTicket[] output = new TimeTicket[25];
        output[0].val = 943654146;
        output[1].val = 294137541;
        output[2].val = -187579662;
        output[3].val = 111596991;
        output[4].val = 387071100;
        output[5].val = 55077092;
        output[6].val = -4732879;
        output[7].val = 934604727;
        output[8].val = -240660837;
        output[9].val = -719040459;
        output[10].val = -207545114;
        output[11].val = -813139375;
        output[12].val = -803062937;
        output[13].val = -322637543;
        output[14].val = 978545255;
        output[15].val = 253822993;
        output[16].val = 477309616;
        output[17].val = -318050987;
        output[18].val = 744598982;
        output[19].val = 313389277;
        output[20].val = -696570769;
        output[21].val = 514202915;
        output[22].val = -205876077;
        output[23].val = -718356672;
        output[24].val = -881050083;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[25];
        answer[0].val = -881050083;
        answer[1].val = -813139375;
        answer[2].val = -803062937;
        answer[3].val = -719040459;
        answer[4].val = -718356672;
        answer[5].val = -696570769;
        answer[6].val = -322637543;
        answer[7].val = -318050987;
        answer[8].val = -240660837;
        answer[9].val = -207545114;
        answer[10].val = -205876077;
        answer[11].val = -187579662;
        answer[12].val = -4732879;
        answer[13].val = 55077092;
        answer[14].val = 111596991;
        answer[15].val = 253822993;
        answer[16].val = 294137541;
        answer[17].val = 313389277;
        answer[18].val = 387071100;
        answer[19].val = 477309616;
        answer[20].val = 514202915;
        answer[21].val = 744598982;
        answer[22].val = 934604727;
        answer[23].val = 943654146;
        answer[24].val = 978545255;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00239() {
        int[] output = new int[29];
        output[0] = -64873321;
        output[1] = 330372358;
        output[2] = -504577639;
        output[3] = -246745289;
        output[4] = -488147262;
        output[5] = 590104685;
        output[6] = 81217510;
        output[7] = -339805353;
        output[8] = -451686193;
        output[9] = -943888327;
        output[10] = -999092233;
        output[11] = 337889027;
        output[12] = -843086662;
        output[13] = -573000000;
        output[14] = 608895820;
        output[15] = -107211921;
        output[16] = 202048400;
        output[17] = -361216247;
        output[18] = 676289525;
        output[19] = 564557409;
        output[20] = 846184937;
        output[21] = 249560612;
        output[22] = -954499838;
        output[23] = 324346167;
        output[24] = 166213028;
        output[25] = -444237918;
        output[26] = 307187351;
        output[27] = -494860031;
        output[28] = -131780165;
        Sorting.radixSort(output);
        int[] answer = new int[29];
        answer[0] = -999092233;
        answer[1] = -954499838;
        answer[2] = -943888327;
        answer[3] = -843086662;
        answer[4] = -573000000;
        answer[5] = -504577639;
        answer[6] = -494860031;
        answer[7] = -488147262;
        answer[8] = -451686193;
        answer[9] = -444237918;
        answer[10] = -361216247;
        answer[11] = -339805353;
        answer[12] = -246745289;
        answer[13] = -131780165;
        answer[14] = -107211921;
        answer[15] = -64873321;
        answer[16] = 81217510;
        answer[17] = 166213028;
        answer[18] = 202048400;
        answer[19] = 249560612;
        answer[20] = 307187351;
        answer[21] = 324346167;
        answer[22] = 330372358;
        answer[23] = 337889027;
        answer[24] = 564557409;
        answer[25] = 590104685;
        answer[26] = 608895820;
        answer[27] = 676289525;
        answer[28] = 846184937;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00240() {
        TimeTicket[] output = new TimeTicket[19];
        output[0].val = -72455327;
        output[1].val = 972315812;
        output[2].val = -616556851;
        output[3].val = 955749871;
        output[4].val = -106206951;
        output[5].val = -901877930;
        output[6].val = 187555454;
        output[7].val = 231254083;
        output[8].val = 546322281;
        output[9].val = -286848605;
        output[10].val = 379715952;
        output[11].val = -963697636;
        output[12].val = -27008579;
        output[13].val = 902061079;
        output[14].val = 525841842;
        output[15].val = -739050074;
        output[16].val = 438450826;
        output[17].val = 850238077;
        output[18].val = 401247245;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[19];
        answer[0].val = -963697636;
        answer[1].val = -901877930;
        answer[2].val = -739050074;
        answer[3].val = -616556851;
        answer[4].val = -286848605;
        answer[5].val = -106206951;
        answer[6].val = -72455327;
        answer[7].val = -27008579;
        answer[8].val = 187555454;
        answer[9].val = 231254083;
        answer[10].val = 379715952;
        answer[11].val = 401247245;
        answer[12].val = 438450826;
        answer[13].val = 525841842;
        answer[14].val = 546322281;
        answer[15].val = 850238077;
        answer[16].val = 902061079;
        answer[17].val = 955749871;
        answer[18].val = 972315812;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00241() {
        TimeTicket[] output = new TimeTicket[11];
        output[0].val = 799794094;
        output[1].val = -510873108;
        output[2].val = 391880546;
        output[3].val = -816779418;
        output[4].val = 95740456;
        output[5].val = -756766455;
        output[6].val = -663894364;
        output[7].val = 739679988;
        output[8].val = 192462769;
        output[9].val = 166076476;
        output[10].val = 677856720;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[11];
        answer[0].val = -816779418;
        answer[1].val = -756766455;
        answer[2].val = -663894364;
        answer[3].val = -510873108;
        answer[4].val = 95740456;
        answer[5].val = 166076476;
        answer[6].val = 192462769;
        answer[7].val = 391880546;
        answer[8].val = 677856720;
        answer[9].val = 739679988;
        answer[10].val = 799794094;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00242() {
        TimeTicket[] output = new TimeTicket[20];
        output[0].val = -682187745;
        output[1].val = 162509356;
        output[2].val = -517136357;
        output[3].val = -220189009;
        output[4].val = -774086180;
        output[5].val = 38805619;
        output[6].val = 239353424;
        output[7].val = 259028800;
        output[8].val = 896313675;
        output[9].val = -627006729;
        output[10].val = -608901055;
        output[11].val = -88944136;
        output[12].val = -438252987;
        output[13].val = -196397047;
        output[14].val = 651537316;
        output[15].val = 943550965;
        output[16].val = 11011203;
        output[17].val = -232114192;
        output[18].val = 192893783;
        output[19].val = -515165944;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[20];
        answer[0].val = -774086180;
        answer[1].val = -682187745;
        answer[2].val = -627006729;
        answer[3].val = -608901055;
        answer[4].val = -517136357;
        answer[5].val = -515165944;
        answer[6].val = -438252987;
        answer[7].val = -232114192;
        answer[8].val = -220189009;
        answer[9].val = -196397047;
        answer[10].val = -88944136;
        answer[11].val = 11011203;
        answer[12].val = 38805619;
        answer[13].val = 162509356;
        answer[14].val = 192893783;
        answer[15].val = 239353424;
        answer[16].val = 259028800;
        answer[17].val = 651537316;
        answer[18].val = 896313675;
        answer[19].val = 943550965;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00243() {
        TimeTicket[] output = new TimeTicket[25];
        output[0].val = -633640115;
        output[1].val = -442127142;
        output[2].val = 723142736;
        output[3].val = -11247652;
        output[4].val = 570981671;
        output[5].val = -158117177;
        output[6].val = 567709272;
        output[7].val = 194161258;
        output[8].val = 902833568;
        output[9].val = 280164122;
        output[10].val = 146283199;
        output[11].val = -942673655;
        output[12].val = 115691166;
        output[13].val = -486426778;
        output[14].val = -13025928;
        output[15].val = -934449789;
        output[16].val = 114704299;
        output[17].val = 984572612;
        output[18].val = 700777111;
        output[19].val = 655979666;
        output[20].val = -714109076;
        output[21].val = -751619708;
        output[22].val = 965232021;
        output[23].val = 494918598;
        output[24].val = -485708343;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[25];
        answer[0].val = -942673655;
        answer[1].val = -934449789;
        answer[2].val = -751619708;
        answer[3].val = -714109076;
        answer[4].val = -633640115;
        answer[5].val = -486426778;
        answer[6].val = -485708343;
        answer[7].val = -442127142;
        answer[8].val = -158117177;
        answer[9].val = -13025928;
        answer[10].val = -11247652;
        answer[11].val = 114704299;
        answer[12].val = 115691166;
        answer[13].val = 146283199;
        answer[14].val = 194161258;
        answer[15].val = 280164122;
        answer[16].val = 494918598;
        answer[17].val = 567709272;
        answer[18].val = 570981671;
        answer[19].val = 655979666;
        answer[20].val = 700777111;
        answer[21].val = 723142736;
        answer[22].val = 902833568;
        answer[23].val = 965232021;
        answer[24].val = 984572612;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00244() {
        TimeTicket[] output = new TimeTicket[5];
        output[0].val = 430278282;
        output[1].val = 74432327;
        output[2].val = 724633626;
        output[3].val = -119630550;
        output[4].val = -181498228;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[5];
        answer[0].val = -181498228;
        answer[1].val = -119630550;
        answer[2].val = 74432327;
        answer[3].val = 430278282;
        answer[4].val = 724633626;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00245() {
        int[] output = new int[28];
        output[0] = -98285175;
        output[1] = -131217117;
        output[2] = 30511474;
        output[3] = -31764273;
        output[4] = 71010611;
        output[5] = -822786337;
        output[6] = -57045812;
        output[7] = 4269875;
        output[8] = 428380653;
        output[9] = -243275376;
        output[10] = 25562253;
        output[11] = 471535903;
        output[12] = -526239364;
        output[13] = -252528586;
        output[14] = 385902917;
        output[15] = 608472545;
        output[16] = -535758301;
        output[17] = -77410199;
        output[18] = 764895749;
        output[19] = 112201483;
        output[20] = 400582050;
        output[21] = -775658078;
        output[22] = -168933430;
        output[23] = -558296607;
        output[24] = -52523607;
        output[25] = -808341638;
        output[26] = 271751125;
        output[27] = 949737098;
        Sorting.radixSort(output);
        int[] answer = new int[28];
        answer[0] = -822786337;
        answer[1] = -808341638;
        answer[2] = -775658078;
        answer[3] = -558296607;
        answer[4] = -535758301;
        answer[5] = -526239364;
        answer[6] = -252528586;
        answer[7] = -243275376;
        answer[8] = -168933430;
        answer[9] = -131217117;
        answer[10] = -98285175;
        answer[11] = -77410199;
        answer[12] = -57045812;
        answer[13] = -52523607;
        answer[14] = -31764273;
        answer[15] = 4269875;
        answer[16] = 25562253;
        answer[17] = 30511474;
        answer[18] = 71010611;
        answer[19] = 112201483;
        answer[20] = 271751125;
        answer[21] = 385902917;
        answer[22] = 400582050;
        answer[23] = 428380653;
        answer[24] = 471535903;
        answer[25] = 608472545;
        answer[26] = 764895749;
        answer[27] = 949737098;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00246() {
        TimeTicket[] output = new TimeTicket[28];
        output[0].val = 278956138;
        output[1].val = -819221731;
        output[2].val = 62050761;
        output[3].val = -142558360;
        output[4].val = 378791251;
        output[5].val = -4354802;
        output[6].val = 356584675;
        output[7].val = 934691802;
        output[8].val = -495274774;
        output[9].val = 633650570;
        output[10].val = 930840812;
        output[11].val = 124999761;
        output[12].val = 480028429;
        output[13].val = -710468402;
        output[14].val = 618166288;
        output[15].val = 490037490;
        output[16].val = 163568801;
        output[17].val = 936165347;
        output[18].val = 173215410;
        output[19].val = 940706053;
        output[20].val = 390870090;
        output[21].val = -500549585;
        output[22].val = 573119970;
        output[23].val = 417637879;
        output[24].val = 822061057;
        output[25].val = 643342186;
        output[26].val = 355686538;
        output[27].val = 32553622;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[28];
        answer[0].val = -819221731;
        answer[1].val = -710468402;
        answer[2].val = -500549585;
        answer[3].val = -495274774;
        answer[4].val = -142558360;
        answer[5].val = -4354802;
        answer[6].val = 32553622;
        answer[7].val = 62050761;
        answer[8].val = 124999761;
        answer[9].val = 163568801;
        answer[10].val = 173215410;
        answer[11].val = 278956138;
        answer[12].val = 355686538;
        answer[13].val = 356584675;
        answer[14].val = 378791251;
        answer[15].val = 390870090;
        answer[16].val = 417637879;
        answer[17].val = 480028429;
        answer[18].val = 490037490;
        answer[19].val = 573119970;
        answer[20].val = 618166288;
        answer[21].val = 633650570;
        answer[22].val = 643342186;
        answer[23].val = 822061057;
        answer[24].val = 930840812;
        answer[25].val = 934691802;
        answer[26].val = 936165347;
        answer[27].val = 940706053;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00247() {
        TimeTicket[] output = new TimeTicket[6];
        output[0].val = -504569642;
        output[1].val = -444975680;
        output[2].val = -863731432;
        output[3].val = 554428398;
        output[4].val = -336465707;
        output[5].val = 900107805;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[6];
        answer[0].val = -863731432;
        answer[1].val = -504569642;
        answer[2].val = -444975680;
        answer[3].val = -336465707;
        answer[4].val = 554428398;
        answer[5].val = 900107805;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00248() {
        TimeTicket[] output = new TimeTicket[7];
        output[0].val = 434483975;
        output[1].val = -118435308;
        output[2].val = 971467146;
        output[3].val = 371370921;
        output[4].val = 443531570;
        output[5].val = 788063927;
        output[6].val = -34711645;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[7];
        answer[0].val = -118435308;
        answer[1].val = -34711645;
        answer[2].val = 371370921;
        answer[3].val = 434483975;
        answer[4].val = 443531570;
        answer[5].val = 788063927;
        answer[6].val = 971467146;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00249() {
        TimeTicket[] output = new TimeTicket[25];
        output[0].val = -512139044;
        output[1].val = 456730981;
        output[2].val = 36933468;
        output[3].val = -479995070;
        output[4].val = 84327211;
        output[5].val = -218086762;
        output[6].val = -637341188;
        output[7].val = 348016662;
        output[8].val = -53956211;
        output[9].val = 14035707;
        output[10].val = -300944149;
        output[11].val = 533491132;
        output[12].val = -375334811;
        output[13].val = 137260733;
        output[14].val = 82465314;
        output[15].val = -311939015;
        output[16].val = -147441839;
        output[17].val = 819953980;
        output[18].val = 950744016;
        output[19].val = -210791193;
        output[20].val = -616927528;
        output[21].val = 25963018;
        output[22].val = -224213300;
        output[23].val = -190307613;
        output[24].val = -340012427;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[25];
        answer[0].val = -637341188;
        answer[1].val = -616927528;
        answer[2].val = -512139044;
        answer[3].val = -479995070;
        answer[4].val = -375334811;
        answer[5].val = -340012427;
        answer[6].val = -311939015;
        answer[7].val = -300944149;
        answer[8].val = -224213300;
        answer[9].val = -218086762;
        answer[10].val = -210791193;
        answer[11].val = -190307613;
        answer[12].val = -147441839;
        answer[13].val = -53956211;
        answer[14].val = 14035707;
        answer[15].val = 25963018;
        answer[16].val = 36933468;
        answer[17].val = 82465314;
        answer[18].val = 84327211;
        answer[19].val = 137260733;
        answer[20].val = 348016662;
        answer[21].val = 456730981;
        answer[22].val = 533491132;
        answer[23].val = 819953980;
        answer[24].val = 950744016;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00250() {
        TimeTicket[] output = new TimeTicket[4];
        output[0].val = -393037084;
        output[1].val = -784056564;
        output[2].val = -753459898;
        output[3].val = -939514746;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[4];
        answer[0].val = -939514746;
        answer[1].val = -784056564;
        answer[2].val = -753459898;
        answer[3].val = -393037084;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00251() {
        int[] output = new int[28];
        output[0] = -769475184;
        output[1] = -577146055;
        output[2] = -403209654;
        output[3] = -404366028;
        output[4] = -982895408;
        output[5] = 188036220;
        output[6] = -8462184;
        output[7] = 234906221;
        output[8] = 570690561;
        output[9] = -539638875;
        output[10] = 29133987;
        output[11] = -450481423;
        output[12] = 106694464;
        output[13] = 189006826;
        output[14] = 795296941;
        output[15] = -458855273;
        output[16] = 785450012;
        output[17] = 899086173;
        output[18] = -173651595;
        output[19] = -840391657;
        output[20] = 887459184;
        output[21] = -588121534;
        output[22] = 592844331;
        output[23] = -335268079;
        output[24] = 173961284;
        output[25] = -423935026;
        output[26] = -674225313;
        output[27] = -128116519;
        Sorting.radixSort(output);
        int[] answer = new int[28];
        answer[0] = -982895408;
        answer[1] = -840391657;
        answer[2] = -769475184;
        answer[3] = -674225313;
        answer[4] = -588121534;
        answer[5] = -577146055;
        answer[6] = -539638875;
        answer[7] = -458855273;
        answer[8] = -450481423;
        answer[9] = -423935026;
        answer[10] = -404366028;
        answer[11] = -403209654;
        answer[12] = -335268079;
        answer[13] = -173651595;
        answer[14] = -128116519;
        answer[15] = -8462184;
        answer[16] = 29133987;
        answer[17] = 106694464;
        answer[18] = 173961284;
        answer[19] = 188036220;
        answer[20] = 189006826;
        answer[21] = 234906221;
        answer[22] = 570690561;
        answer[23] = 592844331;
        answer[24] = 785450012;
        answer[25] = 795296941;
        answer[26] = 887459184;
        answer[27] = 899086173;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00252() {
        TimeTicket[] output = new TimeTicket[15];
        output[0].val = -744904172;
        output[1].val = 658553583;
        output[2].val = 463675560;
        output[3].val = 549646125;
        output[4].val = -475597244;
        output[5].val = -430035097;
        output[6].val = 345351662;
        output[7].val = -920306931;
        output[8].val = -557769697;
        output[9].val = -508232129;
        output[10].val = -240415811;
        output[11].val = 29174631;
        output[12].val = 926924917;
        output[13].val = 766582842;
        output[14].val = 998971341;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[15];
        answer[0].val = -920306931;
        answer[1].val = -744904172;
        answer[2].val = -557769697;
        answer[3].val = -508232129;
        answer[4].val = -475597244;
        answer[5].val = -430035097;
        answer[6].val = -240415811;
        answer[7].val = 29174631;
        answer[8].val = 345351662;
        answer[9].val = 463675560;
        answer[10].val = 549646125;
        answer[11].val = 658553583;
        answer[12].val = 766582842;
        answer[13].val = 926924917;
        answer[14].val = 998971341;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00253() {
        TimeTicket[] output = new TimeTicket[20];
        output[0].val = 104339426;
        output[1].val = 285269083;
        output[2].val = -744351223;
        output[3].val = -20228016;
        output[4].val = -345035192;
        output[5].val = 280029570;
        output[6].val = 542200840;
        output[7].val = -478817507;
        output[8].val = 707260278;
        output[9].val = -616640942;
        output[10].val = 572741227;
        output[11].val = -689662929;
        output[12].val = -526128129;
        output[13].val = 791481811;
        output[14].val = 663199337;
        output[15].val = 64769299;
        output[16].val = -708762781;
        output[17].val = -140183533;
        output[18].val = -17353377;
        output[19].val = 776816145;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[20];
        answer[0].val = -744351223;
        answer[1].val = -708762781;
        answer[2].val = -689662929;
        answer[3].val = -616640942;
        answer[4].val = -526128129;
        answer[5].val = -478817507;
        answer[6].val = -345035192;
        answer[7].val = -140183533;
        answer[8].val = -20228016;
        answer[9].val = -17353377;
        answer[10].val = 64769299;
        answer[11].val = 104339426;
        answer[12].val = 280029570;
        answer[13].val = 285269083;
        answer[14].val = 542200840;
        answer[15].val = 572741227;
        answer[16].val = 663199337;
        answer[17].val = 707260278;
        answer[18].val = 776816145;
        answer[19].val = 791481811;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00254() {
        TimeTicket[] output = new TimeTicket[11];
        output[0].val = 554911040;
        output[1].val = 63710934;
        output[2].val = 342666329;
        output[3].val = 281244648;
        output[4].val = -986472546;
        output[5].val = -949837966;
        output[6].val = -612484203;
        output[7].val = -719943948;
        output[8].val = -88728454;
        output[9].val = -562700042;
        output[10].val = -120072229;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[11];
        answer[0].val = -986472546;
        answer[1].val = -949837966;
        answer[2].val = -719943948;
        answer[3].val = -612484203;
        answer[4].val = -562700042;
        answer[5].val = -120072229;
        answer[6].val = -88728454;
        answer[7].val = 63710934;
        answer[8].val = 281244648;
        answer[9].val = 342666329;
        answer[10].val = 554911040;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00255() {
        TimeTicket[] output = new TimeTicket[7];
        output[0].val = 601769612;
        output[1].val = 576792767;
        output[2].val = 679;
        output[3].val = -289543816;
        output[4].val = -580546757;
        output[5].val = -707527601;
        output[6].val = 472702744;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[7];
        answer[0].val = -707527601;
        answer[1].val = -580546757;
        answer[2].val = -289543816;
        answer[3].val = 679;
        answer[4].val = 472702744;
        answer[5].val = 576792767;
        answer[6].val = 601769612;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00256() {
        TimeTicket[] output = new TimeTicket[20];
        output[0].val = 810953255;
        output[1].val = -966799436;
        output[2].val = 836446191;
        output[3].val = -857393752;
        output[4].val = -823249393;
        output[5].val = -834491633;
        output[6].val = -350335216;
        output[7].val = 212178555;
        output[8].val = -60036800;
        output[9].val = 355464652;
        output[10].val = -187175350;
        output[11].val = -146590893;
        output[12].val = -83741594;
        output[13].val = -723005186;
        output[14].val = -109856520;
        output[15].val = 19145707;
        output[16].val = 510133923;
        output[17].val = -907429938;
        output[18].val = -177332157;
        output[19].val = -499881380;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[20];
        answer[0].val = -966799436;
        answer[1].val = -907429938;
        answer[2].val = -857393752;
        answer[3].val = -834491633;
        answer[4].val = -823249393;
        answer[5].val = -723005186;
        answer[6].val = -499881380;
        answer[7].val = -350335216;
        answer[8].val = -187175350;
        answer[9].val = -177332157;
        answer[10].val = -146590893;
        answer[11].val = -109856520;
        answer[12].val = -83741594;
        answer[13].val = -60036800;
        answer[14].val = 19145707;
        answer[15].val = 212178555;
        answer[16].val = 355464652;
        answer[17].val = 510133923;
        answer[18].val = 810953255;
        answer[19].val = 836446191;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00257() {
        int[] output = new int[28];
        output[0] = -835867349;
        output[1] = -576711027;
        output[2] = -909872799;
        output[3] = -321256330;
        output[4] = -468918825;
        output[5] = -127114810;
        output[6] = -35038890;
        output[7] = -807291052;
        output[8] = 789951435;
        output[9] = 74644107;
        output[10] = 880912367;
        output[11] = -958437739;
        output[12] = 560487351;
        output[13] = -929350297;
        output[14] = 25583699;
        output[15] = -691804934;
        output[16] = -814385536;
        output[17] = 524830244;
        output[18] = 958632933;
        output[19] = 391603932;
        output[20] = 400748627;
        output[21] = -141021334;
        output[22] = -378021296;
        output[23] = 622811873;
        output[24] = -437490865;
        output[25] = 535323125;
        output[26] = 34856596;
        output[27] = 774621259;
        Sorting.radixSort(output);
        int[] answer = new int[28];
        answer[0] = -958437739;
        answer[1] = -929350297;
        answer[2] = -909872799;
        answer[3] = -835867349;
        answer[4] = -814385536;
        answer[5] = -807291052;
        answer[6] = -691804934;
        answer[7] = -576711027;
        answer[8] = -468918825;
        answer[9] = -437490865;
        answer[10] = -378021296;
        answer[11] = -321256330;
        answer[12] = -141021334;
        answer[13] = -127114810;
        answer[14] = -35038890;
        answer[15] = 25583699;
        answer[16] = 34856596;
        answer[17] = 74644107;
        answer[18] = 391603932;
        answer[19] = 400748627;
        answer[20] = 524830244;
        answer[21] = 535323125;
        answer[22] = 560487351;
        answer[23] = 622811873;
        answer[24] = 774621259;
        answer[25] = 789951435;
        answer[26] = 880912367;
        answer[27] = 958632933;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00258() {
        TimeTicket[] output = new TimeTicket[17];
        output[0].val = -388373511;
        output[1].val = -310685815;
        output[2].val = -119664624;
        output[3].val = -61463283;
        output[4].val = 254495427;
        output[5].val = -510318532;
        output[6].val = -195235995;
        output[7].val = 36308985;
        output[8].val = 853183652;
        output[9].val = -303855682;
        output[10].val = -5407894;
        output[11].val = 199238496;
        output[12].val = -472397691;
        output[13].val = -854867950;
        output[14].val = -638839517;
        output[15].val = -95839294;
        output[16].val = -610532470;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[17];
        answer[0].val = -854867950;
        answer[1].val = -638839517;
        answer[2].val = -610532470;
        answer[3].val = -510318532;
        answer[4].val = -472397691;
        answer[5].val = -388373511;
        answer[6].val = -310685815;
        answer[7].val = -303855682;
        answer[8].val = -195235995;
        answer[9].val = -119664624;
        answer[10].val = -95839294;
        answer[11].val = -61463283;
        answer[12].val = -5407894;
        answer[13].val = 36308985;
        answer[14].val = 199238496;
        answer[15].val = 254495427;
        answer[16].val = 853183652;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00259() {
        TimeTicket[] output = new TimeTicket[25];
        output[0].val = 932547775;
        output[1].val = 727644802;
        output[2].val = 44658673;
        output[3].val = -760555864;
        output[4].val = -235954244;
        output[5].val = -770416103;
        output[6].val = -297421637;
        output[7].val = -594637565;
        output[8].val = 100799115;
        output[9].val = -361265511;
        output[10].val = -842923701;
        output[11].val = 435921156;
        output[12].val = 428188556;
        output[13].val = -519607783;
        output[14].val = 333502605;
        output[15].val = -311063644;
        output[16].val = -510783275;
        output[17].val = -767057245;
        output[18].val = 829982594;
        output[19].val = 314448028;
        output[20].val = 498788830;
        output[21].val = -963614057;
        output[22].val = 463387526;
        output[23].val = 786709548;
        output[24].val = 836163101;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[25];
        answer[0].val = -963614057;
        answer[1].val = -842923701;
        answer[2].val = -770416103;
        answer[3].val = -767057245;
        answer[4].val = -760555864;
        answer[5].val = -594637565;
        answer[6].val = -519607783;
        answer[7].val = -510783275;
        answer[8].val = -361265511;
        answer[9].val = -311063644;
        answer[10].val = -297421637;
        answer[11].val = -235954244;
        answer[12].val = 44658673;
        answer[13].val = 100799115;
        answer[14].val = 314448028;
        answer[15].val = 333502605;
        answer[16].val = 428188556;
        answer[17].val = 435921156;
        answer[18].val = 463387526;
        answer[19].val = 498788830;
        answer[20].val = 727644802;
        answer[21].val = 786709548;
        answer[22].val = 829982594;
        answer[23].val = 836163101;
        answer[24].val = 932547775;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00260() {
        TimeTicket[] output = new TimeTicket[6];
        output[0].val = -146190056;
        output[1].val = -627646256;
        output[2].val = 845562508;
        output[3].val = 83984458;
        output[4].val = 811880579;
        output[5].val = 591756510;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[6];
        answer[0].val = -627646256;
        answer[1].val = -146190056;
        answer[2].val = 83984458;
        answer[3].val = 591756510;
        answer[4].val = 811880579;
        answer[5].val = 845562508;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00261() {
        TimeTicket[] output = new TimeTicket[1];
        output[0].val = 276875800;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[1];
        answer[0].val = 276875800;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00262() {
        TimeTicket[] output = new TimeTicket[15];
        output[0].val = -562728350;
        output[1].val = -40355976;
        output[2].val = -71387443;
        output[3].val = 373850173;
        output[4].val = 140023913;
        output[5].val = 192207573;
        output[6].val = -36048004;
        output[7].val = 531447918;
        output[8].val = 696892245;
        output[9].val = -341300561;
        output[10].val = 62551966;
        output[11].val = -540406825;
        output[12].val = -983485479;
        output[13].val = 242496183;
        output[14].val = 477783814;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[15];
        answer[0].val = -983485479;
        answer[1].val = -562728350;
        answer[2].val = -540406825;
        answer[3].val = -341300561;
        answer[4].val = -71387443;
        answer[5].val = -40355976;
        answer[6].val = -36048004;
        answer[7].val = 62551966;
        answer[8].val = 140023913;
        answer[9].val = 192207573;
        answer[10].val = 242496183;
        answer[11].val = 373850173;
        answer[12].val = 477783814;
        answer[13].val = 531447918;
        answer[14].val = 696892245;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00263() {
        int[] output = new int[19];
        output[0] = 958666264;
        output[1] = 165783420;
        output[2] = -810910332;
        output[3] = -974357571;
        output[4] = 610372346;
        output[5] = 30280202;
        output[6] = 16002932;
        output[7] = -214225866;
        output[8] = -545888786;
        output[9] = -343818937;
        output[10] = 369838723;
        output[11] = -581147942;
        output[12] = -38223717;
        output[13] = -405424172;
        output[14] = -813881922;
        output[15] = -88975873;
        output[16] = -758487922;
        output[17] = -581305261;
        output[18] = -882813777;
        Sorting.radixSort(output);
        int[] answer = new int[19];
        answer[0] = -974357571;
        answer[1] = -882813777;
        answer[2] = -813881922;
        answer[3] = -810910332;
        answer[4] = -758487922;
        answer[5] = -581305261;
        answer[6] = -581147942;
        answer[7] = -545888786;
        answer[8] = -405424172;
        answer[9] = -343818937;
        answer[10] = -214225866;
        answer[11] = -88975873;
        answer[12] = -38223717;
        answer[13] = 16002932;
        answer[14] = 30280202;
        answer[15] = 165783420;
        answer[16] = 369838723;
        answer[17] = 610372346;
        answer[18] = 958666264;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00264() {
        TimeTicket[] output = new TimeTicket[27];
        output[0].val = 876815885;
        output[1].val = -261333331;
        output[2].val = -704000843;
        output[3].val = -587300596;
        output[4].val = -108465581;
        output[5].val = 626868499;
        output[6].val = 57832350;
        output[7].val = 478443545;
        output[8].val = -726236834;
        output[9].val = 52182688;
        output[10].val = 385593875;
        output[11].val = 250305284;
        output[12].val = -204895739;
        output[13].val = -968913971;
        output[14].val = -388030179;
        output[15].val = 334925478;
        output[16].val = 529177854;
        output[17].val = 272756862;
        output[18].val = -12575204;
        output[19].val = 423299202;
        output[20].val = -926321982;
        output[21].val = 640334114;
        output[22].val = -367950499;
        output[23].val = -684989333;
        output[24].val = -949161374;
        output[25].val = -868428501;
        output[26].val = -698343805;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[27];
        answer[0].val = -968913971;
        answer[1].val = -949161374;
        answer[2].val = -926321982;
        answer[3].val = -868428501;
        answer[4].val = -726236834;
        answer[5].val = -704000843;
        answer[6].val = -698343805;
        answer[7].val = -684989333;
        answer[8].val = -587300596;
        answer[9].val = -388030179;
        answer[10].val = -367950499;
        answer[11].val = -261333331;
        answer[12].val = -204895739;
        answer[13].val = -108465581;
        answer[14].val = -12575204;
        answer[15].val = 52182688;
        answer[16].val = 57832350;
        answer[17].val = 250305284;
        answer[18].val = 272756862;
        answer[19].val = 334925478;
        answer[20].val = 385593875;
        answer[21].val = 423299202;
        answer[22].val = 478443545;
        answer[23].val = 529177854;
        answer[24].val = 626868499;
        answer[25].val = 640334114;
        answer[26].val = 876815885;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00265() {
        TimeTicket[] output = new TimeTicket[23];
        output[0].val = -674887900;
        output[1].val = 618671397;
        output[2].val = 627041468;
        output[3].val = -663792923;
        output[4].val = -42248100;
        output[5].val = 347011913;
        output[6].val = 371200688;
        output[7].val = 288292177;
        output[8].val = -955038432;
        output[9].val = -12187194;
        output[10].val = 779757462;
        output[11].val = -110493765;
        output[12].val = -584935878;
        output[13].val = -591000149;
        output[14].val = 148706021;
        output[15].val = -491940126;
        output[16].val = 156574122;
        output[17].val = 478195167;
        output[18].val = -527071849;
        output[19].val = 758394910;
        output[20].val = -935507;
        output[21].val = 120068305;
        output[22].val = 878246316;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[23];
        answer[0].val = -955038432;
        answer[1].val = -674887900;
        answer[2].val = -663792923;
        answer[3].val = -591000149;
        answer[4].val = -584935878;
        answer[5].val = -527071849;
        answer[6].val = -491940126;
        answer[7].val = -110493765;
        answer[8].val = -42248100;
        answer[9].val = -12187194;
        answer[10].val = -935507;
        answer[11].val = 120068305;
        answer[12].val = 148706021;
        answer[13].val = 156574122;
        answer[14].val = 288292177;
        answer[15].val = 347011913;
        answer[16].val = 371200688;
        answer[17].val = 478195167;
        answer[18].val = 618671397;
        answer[19].val = 627041468;
        answer[20].val = 758394910;
        answer[21].val = 779757462;
        answer[22].val = 878246316;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00266() {
        TimeTicket[] output = new TimeTicket[26];
        output[0].val = -219300338;
        output[1].val = -165514519;
        output[2].val = -885504184;
        output[3].val = -928538113;
        output[4].val = 575856998;
        output[5].val = -33344781;
        output[6].val = 54096744;
        output[7].val = 110610654;
        output[8].val = -658349286;
        output[9].val = -105739955;
        output[10].val = 715963842;
        output[11].val = 666427722;
        output[12].val = 93431862;
        output[13].val = -315857262;
        output[14].val = -622644647;
        output[15].val = -736731814;
        output[16].val = 883536619;
        output[17].val = -302988687;
        output[18].val = 854455960;
        output[19].val = 402249395;
        output[20].val = -503725590;
        output[21].val = -177978424;
        output[22].val = -494279040;
        output[23].val = 389695923;
        output[24].val = -939168858;
        output[25].val = 896423288;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[26];
        answer[0].val = -939168858;
        answer[1].val = -928538113;
        answer[2].val = -885504184;
        answer[3].val = -736731814;
        answer[4].val = -658349286;
        answer[5].val = -622644647;
        answer[6].val = -503725590;
        answer[7].val = -494279040;
        answer[8].val = -315857262;
        answer[9].val = -302988687;
        answer[10].val = -219300338;
        answer[11].val = -177978424;
        answer[12].val = -165514519;
        answer[13].val = -105739955;
        answer[14].val = -33344781;
        answer[15].val = 54096744;
        answer[16].val = 93431862;
        answer[17].val = 110610654;
        answer[18].val = 389695923;
        answer[19].val = 402249395;
        answer[20].val = 575856998;
        answer[21].val = 666427722;
        answer[22].val = 715963842;
        answer[23].val = 854455960;
        answer[24].val = 883536619;
        answer[25].val = 896423288;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00267() {
        TimeTicket[] output = new TimeTicket[21];
        output[0].val = 756711095;
        output[1].val = 502580014;
        output[2].val = 180445489;
        output[3].val = 388645125;
        output[4].val = -554674849;
        output[5].val = -666672207;
        output[6].val = -435526918;
        output[7].val = 317902937;
        output[8].val = -687973374;
        output[9].val = -969996861;
        output[10].val = 599704626;
        output[11].val = 400357498;
        output[12].val = -618026069;
        output[13].val = -588930391;
        output[14].val = -5218512;
        output[15].val = 129315631;
        output[16].val = -466528159;
        output[17].val = -303575537;
        output[18].val = -441721575;
        output[19].val = -201395226;
        output[20].val = -225425220;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[21];
        answer[0].val = -969996861;
        answer[1].val = -687973374;
        answer[2].val = -666672207;
        answer[3].val = -618026069;
        answer[4].val = -588930391;
        answer[5].val = -554674849;
        answer[6].val = -466528159;
        answer[7].val = -441721575;
        answer[8].val = -435526918;
        answer[9].val = -303575537;
        answer[10].val = -225425220;
        answer[11].val = -201395226;
        answer[12].val = -5218512;
        answer[13].val = 129315631;
        answer[14].val = 180445489;
        answer[15].val = 317902937;
        answer[16].val = 388645125;
        answer[17].val = 400357498;
        answer[18].val = 502580014;
        answer[19].val = 599704626;
        answer[20].val = 756711095;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00268() {
        TimeTicket[] output = new TimeTicket[7];
        output[0].val = -395178814;
        output[1].val = 246100977;
        output[2].val = 374633307;
        output[3].val = 218782351;
        output[4].val = -456999101;
        output[5].val = -154880116;
        output[6].val = 902664095;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[7];
        answer[0].val = -456999101;
        answer[1].val = -395178814;
        answer[2].val = -154880116;
        answer[3].val = 218782351;
        answer[4].val = 246100977;
        answer[5].val = 374633307;
        answer[6].val = 902664095;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00269() {
        int[] output = new int[24];
        output[0] = -141164883;
        output[1] = -323870179;
        output[2] = -288530686;
        output[3] = 532297678;
        output[4] = -424908249;
        output[5] = 509481324;
        output[6] = 986149914;
        output[7] = 998866820;
        output[8] = 327272576;
        output[9] = -647026054;
        output[10] = -337857338;
        output[11] = -36798280;
        output[12] = -385138540;
        output[13] = -768355287;
        output[14] = 221736142;
        output[15] = 438983751;
        output[16] = 676103866;
        output[17] = 497893869;
        output[18] = -554702255;
        output[19] = 504798866;
        output[20] = 931975276;
        output[21] = -878657722;
        output[22] = 615883407;
        output[23] = 238064516;
        Sorting.radixSort(output);
        int[] answer = new int[24];
        answer[0] = -878657722;
        answer[1] = -768355287;
        answer[2] = -647026054;
        answer[3] = -554702255;
        answer[4] = -424908249;
        answer[5] = -385138540;
        answer[6] = -337857338;
        answer[7] = -323870179;
        answer[8] = -288530686;
        answer[9] = -141164883;
        answer[10] = -36798280;
        answer[11] = 221736142;
        answer[12] = 238064516;
        answer[13] = 327272576;
        answer[14] = 438983751;
        answer[15] = 497893869;
        answer[16] = 504798866;
        answer[17] = 509481324;
        answer[18] = 532297678;
        answer[19] = 615883407;
        answer[20] = 676103866;
        answer[21] = 931975276;
        answer[22] = 986149914;
        answer[23] = 998866820;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00270() {
        TimeTicket[] output = new TimeTicket[22];
        output[0].val = 677283363;
        output[1].val = -106351702;
        output[2].val = -695454213;
        output[3].val = 163278878;
        output[4].val = 993464348;
        output[5].val = -7924658;
        output[6].val = -582920546;
        output[7].val = -609985841;
        output[8].val = -695331773;
        output[9].val = 957962736;
        output[10].val = 895534811;
        output[11].val = -524304743;
        output[12].val = 444939765;
        output[13].val = 170464861;
        output[14].val = 965459763;
        output[15].val = -952946824;
        output[16].val = -267404841;
        output[17].val = -3049446;
        output[18].val = 127575519;
        output[19].val = -575485748;
        output[20].val = -166087482;
        output[21].val = 351573522;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[22];
        answer[0].val = -952946824;
        answer[1].val = -695454213;
        answer[2].val = -695331773;
        answer[3].val = -609985841;
        answer[4].val = -582920546;
        answer[5].val = -575485748;
        answer[6].val = -524304743;
        answer[7].val = -267404841;
        answer[8].val = -166087482;
        answer[9].val = -106351702;
        answer[10].val = -7924658;
        answer[11].val = -3049446;
        answer[12].val = 127575519;
        answer[13].val = 163278878;
        answer[14].val = 170464861;
        answer[15].val = 351573522;
        answer[16].val = 444939765;
        answer[17].val = 677283363;
        answer[18].val = 895534811;
        answer[19].val = 957962736;
        answer[20].val = 965459763;
        answer[21].val = 993464348;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00271() {
        TimeTicket[] output = new TimeTicket[8];
        output[0].val = -786091978;
        output[1].val = -135734922;
        output[2].val = 888339241;
        output[3].val = 893906843;
        output[4].val = 166272808;
        output[5].val = -843259613;
        output[6].val = -696820549;
        output[7].val = -606675950;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[8];
        answer[0].val = -843259613;
        answer[1].val = -786091978;
        answer[2].val = -696820549;
        answer[3].val = -606675950;
        answer[4].val = -135734922;
        answer[5].val = 166272808;
        answer[6].val = 888339241;
        answer[7].val = 893906843;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00272() {
        TimeTicket[] output = new TimeTicket[1];
        output[0].val = -852765344;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[1];
        answer[0].val = -852765344;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00273() {
        TimeTicket[] output = new TimeTicket[12];
        output[0].val = 513786074;
        output[1].val = -923903489;
        output[2].val = -168188938;
        output[3].val = -81248679;
        output[4].val = 127888734;
        output[5].val = -734344883;
        output[6].val = -383134520;
        output[7].val = -999138095;
        output[8].val = 141469150;
        output[9].val = -175006617;
        output[10].val = -667004632;
        output[11].val = 92779857;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[12];
        answer[0].val = -999138095;
        answer[1].val = -923903489;
        answer[2].val = -734344883;
        answer[3].val = -667004632;
        answer[4].val = -383134520;
        answer[5].val = -175006617;
        answer[6].val = -168188938;
        answer[7].val = -81248679;
        answer[8].val = 92779857;
        answer[9].val = 127888734;
        answer[10].val = 141469150;
        answer[11].val = 513786074;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00274() {
        TimeTicket[] output = new TimeTicket[13];
        output[0].val = 282953655;
        output[1].val = -987978336;
        output[2].val = 416552033;
        output[3].val = -144652766;
        output[4].val = 907891046;
        output[5].val = -448806558;
        output[6].val = 26081355;
        output[7].val = -74752175;
        output[8].val = -628632030;
        output[9].val = 987098332;
        output[10].val = 889605875;
        output[11].val = -250538392;
        output[12].val = -994208153;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[13];
        answer[0].val = -994208153;
        answer[1].val = -987978336;
        answer[2].val = -628632030;
        answer[3].val = -448806558;
        answer[4].val = -250538392;
        answer[5].val = -144652766;
        answer[6].val = -74752175;
        answer[7].val = 26081355;
        answer[8].val = 282953655;
        answer[9].val = 416552033;
        answer[10].val = 889605875;
        answer[11].val = 907891046;
        answer[12].val = 987098332;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00275() {
        int[] output = new int[5];
        output[0] = -86338598;
        output[1] = -70809394;
        output[2] = 450293453;
        output[3] = -767312009;
        output[4] = -337271377;
        Sorting.radixSort(output);
        int[] answer = new int[5];
        answer[0] = -767312009;
        answer[1] = -337271377;
        answer[2] = -86338598;
        answer[3] = -70809394;
        answer[4] = 450293453;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00276() {
        TimeTicket[] output = new TimeTicket[11];
        output[0].val = 460891778;
        output[1].val = -418023691;
        output[2].val = -515226642;
        output[3].val = 52134891;
        output[4].val = -530911783;
        output[5].val = 363576200;
        output[6].val = 671440141;
        output[7].val = 37958212;
        output[8].val = 533326255;
        output[9].val = 21594410;
        output[10].val = 459538211;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[11];
        answer[0].val = -530911783;
        answer[1].val = -515226642;
        answer[2].val = -418023691;
        answer[3].val = 21594410;
        answer[4].val = 37958212;
        answer[5].val = 52134891;
        answer[6].val = 363576200;
        answer[7].val = 459538211;
        answer[8].val = 460891778;
        answer[9].val = 533326255;
        answer[10].val = 671440141;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00277() {
        TimeTicket[] output = new TimeTicket[7];
        output[0].val = 112230904;
        output[1].val = -343168989;
        output[2].val = 658687478;
        output[3].val = -165112968;
        output[4].val = 298096714;
        output[5].val = 192867596;
        output[6].val = -269500649;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[7];
        answer[0].val = -343168989;
        answer[1].val = -269500649;
        answer[2].val = -165112968;
        answer[3].val = 112230904;
        answer[4].val = 192867596;
        answer[5].val = 298096714;
        answer[6].val = 658687478;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00278() {
        TimeTicket[] output = new TimeTicket[29];
        output[0].val = -544933149;
        output[1].val = -533685518;
        output[2].val = 292269618;
        output[3].val = 507524193;
        output[4].val = -667232034;
        output[5].val = -158467408;
        output[6].val = -732508148;
        output[7].val = 255777705;
        output[8].val = -535883558;
        output[9].val = -139106220;
        output[10].val = -64629352;
        output[11].val = -331512118;
        output[12].val = -598535992;
        output[13].val = 406434472;
        output[14].val = -321093015;
        output[15].val = -267333244;
        output[16].val = 316187075;
        output[17].val = 348885283;
        output[18].val = 255609725;
        output[19].val = 142220650;
        output[20].val = -33534848;
        output[21].val = 571179099;
        output[22].val = -986194970;
        output[23].val = -68109995;
        output[24].val = 199162169;
        output[25].val = 412435984;
        output[26].val = -184705717;
        output[27].val = 12705226;
        output[28].val = -7310039;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[29];
        answer[0].val = -986194970;
        answer[1].val = -732508148;
        answer[2].val = -667232034;
        answer[3].val = -598535992;
        answer[4].val = -544933149;
        answer[5].val = -535883558;
        answer[6].val = -533685518;
        answer[7].val = -331512118;
        answer[8].val = -321093015;
        answer[9].val = -267333244;
        answer[10].val = -184705717;
        answer[11].val = -158467408;
        answer[12].val = -139106220;
        answer[13].val = -68109995;
        answer[14].val = -64629352;
        answer[15].val = -33534848;
        answer[16].val = -7310039;
        answer[17].val = 12705226;
        answer[18].val = 142220650;
        answer[19].val = 199162169;
        answer[20].val = 255609725;
        answer[21].val = 255777705;
        answer[22].val = 292269618;
        answer[23].val = 316187075;
        answer[24].val = 348885283;
        answer[25].val = 406434472;
        answer[26].val = 412435984;
        answer[27].val = 507524193;
        answer[28].val = 571179099;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00279() {
        TimeTicket[] output = new TimeTicket[14];
        output[0].val = -221674425;
        output[1].val = -493734728;
        output[2].val = -416083658;
        output[3].val = -119910414;
        output[4].val = 359123836;
        output[5].val = -429701643;
        output[6].val = 463949166;
        output[7].val = 536168489;
        output[8].val = -247225962;
        output[9].val = -457513806;
        output[10].val = -185116656;
        output[11].val = -27999099;
        output[12].val = 493849282;
        output[13].val = -802164608;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[14];
        answer[0].val = -802164608;
        answer[1].val = -493734728;
        answer[2].val = -457513806;
        answer[3].val = -429701643;
        answer[4].val = -416083658;
        answer[5].val = -247225962;
        answer[6].val = -221674425;
        answer[7].val = -185116656;
        answer[8].val = -119910414;
        answer[9].val = -27999099;
        answer[10].val = 359123836;
        answer[11].val = 463949166;
        answer[12].val = 493849282;
        answer[13].val = 536168489;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00280() {
        TimeTicket[] output = new TimeTicket[7];
        output[0].val = 174574375;
        output[1].val = 330660206;
        output[2].val = 266725430;
        output[3].val = -222769039;
        output[4].val = -410550449;
        output[5].val = 270174959;
        output[6].val = 113536039;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[7];
        answer[0].val = -410550449;
        answer[1].val = -222769039;
        answer[2].val = 113536039;
        answer[3].val = 174574375;
        answer[4].val = 266725430;
        answer[5].val = 270174959;
        answer[6].val = 330660206;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00281() {
        int[] output = new int[23];
        output[0] = 126089068;
        output[1] = 551730477;
        output[2] = 279372091;
        output[3] = -133654234;
        output[4] = -679311712;
        output[5] = 120747768;
        output[6] = -699959814;
        output[7] = -551904931;
        output[8] = -69176945;
        output[9] = -721128151;
        output[10] = 40777752;
        output[11] = -266721271;
        output[12] = 389210521;
        output[13] = -116800252;
        output[14] = -723665786;
        output[15] = 122770666;
        output[16] = 302442808;
        output[17] = 8865466;
        output[18] = 693287513;
        output[19] = 323116519;
        output[20] = -476267527;
        output[21] = 141724704;
        output[22] = -191995658;
        Sorting.radixSort(output);
        int[] answer = new int[23];
        answer[0] = -723665786;
        answer[1] = -721128151;
        answer[2] = -699959814;
        answer[3] = -679311712;
        answer[4] = -551904931;
        answer[5] = -476267527;
        answer[6] = -266721271;
        answer[7] = -191995658;
        answer[8] = -133654234;
        answer[9] = -116800252;
        answer[10] = -69176945;
        answer[11] = 8865466;
        answer[12] = 40777752;
        answer[13] = 120747768;
        answer[14] = 122770666;
        answer[15] = 126089068;
        answer[16] = 141724704;
        answer[17] = 279372091;
        answer[18] = 302442808;
        answer[19] = 323116519;
        answer[20] = 389210521;
        answer[21] = 551730477;
        answer[22] = 693287513;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00282() {
        TimeTicket[] output = new TimeTicket[15];
        output[0].val = 49687207;
        output[1].val = 660977528;
        output[2].val = -97619738;
        output[3].val = 892570214;
        output[4].val = -529078269;
        output[5].val = 863377250;
        output[6].val = 713969999;
        output[7].val = -314699917;
        output[8].val = 331108140;
        output[9].val = -798429756;
        output[10].val = 197413696;
        output[11].val = 977848384;
        output[12].val = 533079369;
        output[13].val = 528669638;
        output[14].val = -805965864;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[15];
        answer[0].val = -805965864;
        answer[1].val = -798429756;
        answer[2].val = -529078269;
        answer[3].val = -314699917;
        answer[4].val = -97619738;
        answer[5].val = 49687207;
        answer[6].val = 197413696;
        answer[7].val = 331108140;
        answer[8].val = 528669638;
        answer[9].val = 533079369;
        answer[10].val = 660977528;
        answer[11].val = 713969999;
        answer[12].val = 863377250;
        answer[13].val = 892570214;
        answer[14].val = 977848384;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00283() {
        TimeTicket[] output = new TimeTicket[12];
        output[0].val = 161684626;
        output[1].val = -480953252;
        output[2].val = -79500426;
        output[3].val = 28240832;
        output[4].val = 545692140;
        output[5].val = 528017385;
        output[6].val = 984357879;
        output[7].val = 618743109;
        output[8].val = 118892088;
        output[9].val = -223153346;
        output[10].val = -487675559;
        output[11].val = 85571047;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[12];
        answer[0].val = -487675559;
        answer[1].val = -480953252;
        answer[2].val = -223153346;
        answer[3].val = -79500426;
        answer[4].val = 28240832;
        answer[5].val = 85571047;
        answer[6].val = 118892088;
        answer[7].val = 161684626;
        answer[8].val = 528017385;
        answer[9].val = 545692140;
        answer[10].val = 618743109;
        answer[11].val = 984357879;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00284() {
        TimeTicket[] output = new TimeTicket[26];
        output[0].val = 576327211;
        output[1].val = 556552221;
        output[2].val = 600592937;
        output[3].val = -89607411;
        output[4].val = 690803783;
        output[5].val = -717810884;
        output[6].val = -278350648;
        output[7].val = 215770036;
        output[8].val = 915209417;
        output[9].val = 858943399;
        output[10].val = -813835793;
        output[11].val = 571501101;
        output[12].val = -604007619;
        output[13].val = -790373873;
        output[14].val = 130068320;
        output[15].val = -258337027;
        output[16].val = 272862316;
        output[17].val = -104368549;
        output[18].val = -494646889;
        output[19].val = -483821582;
        output[20].val = -922800542;
        output[21].val = 719753248;
        output[22].val = -538545502;
        output[23].val = 316820650;
        output[24].val = 157665961;
        output[25].val = -972620396;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[26];
        answer[0].val = -972620396;
        answer[1].val = -922800542;
        answer[2].val = -813835793;
        answer[3].val = -790373873;
        answer[4].val = -717810884;
        answer[5].val = -604007619;
        answer[6].val = -538545502;
        answer[7].val = -494646889;
        answer[8].val = -483821582;
        answer[9].val = -278350648;
        answer[10].val = -258337027;
        answer[11].val = -104368549;
        answer[12].val = -89607411;
        answer[13].val = 130068320;
        answer[14].val = 157665961;
        answer[15].val = 215770036;
        answer[16].val = 272862316;
        answer[17].val = 316820650;
        answer[18].val = 556552221;
        answer[19].val = 571501101;
        answer[20].val = 576327211;
        answer[21].val = 600592937;
        answer[22].val = 690803783;
        answer[23].val = 719753248;
        answer[24].val = 858943399;
        answer[25].val = 915209417;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00285() {
        TimeTicket[] output = new TimeTicket[24];
        output[0].val = -907124465;
        output[1].val = -803498134;
        output[2].val = -2204081;
        output[3].val = -177800093;
        output[4].val = 72040947;
        output[5].val = -237192902;
        output[6].val = 486786235;
        output[7].val = 704255431;
        output[8].val = 771069436;
        output[9].val = 557067832;
        output[10].val = -2851078;
        output[11].val = 368183058;
        output[12].val = -481623311;
        output[13].val = -101207184;
        output[14].val = -273929673;
        output[15].val = 629643936;
        output[16].val = 415615474;
        output[17].val = -668296610;
        output[18].val = 939126611;
        output[19].val = -731205164;
        output[20].val = 43161313;
        output[21].val = 826344;
        output[22].val = -607043319;
        output[23].val = 356163250;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[24];
        answer[0].val = -907124465;
        answer[1].val = -803498134;
        answer[2].val = -731205164;
        answer[3].val = -668296610;
        answer[4].val = -607043319;
        answer[5].val = -481623311;
        answer[6].val = -273929673;
        answer[7].val = -237192902;
        answer[8].val = -177800093;
        answer[9].val = -101207184;
        answer[10].val = -2851078;
        answer[11].val = -2204081;
        answer[12].val = 826344;
        answer[13].val = 43161313;
        answer[14].val = 72040947;
        answer[15].val = 356163250;
        answer[16].val = 368183058;
        answer[17].val = 415615474;
        answer[18].val = 486786235;
        answer[19].val = 557067832;
        answer[20].val = 629643936;
        answer[21].val = 704255431;
        answer[22].val = 771069436;
        answer[23].val = 939126611;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00286() {
        TimeTicket[] output = new TimeTicket[3];
        output[0].val = 999252907;
        output[1].val = 391720344;
        output[2].val = -332385187;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[3];
        answer[0].val = -332385187;
        answer[1].val = 391720344;
        answer[2].val = 999252907;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00287() {
        int[] output = new int[4];
        output[0] = 97416965;
        output[1] = -530184685;
        output[2] = -658461525;
        output[3] = 544131805;
        Sorting.radixSort(output);
        int[] answer = new int[4];
        answer[0] = -658461525;
        answer[1] = -530184685;
        answer[2] = 97416965;
        answer[3] = 544131805;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00288() {
        TimeTicket[] output = new TimeTicket[12];
        output[0].val = -61467895;
        output[1].val = 40359405;
        output[2].val = -323854984;
        output[3].val = 589485320;
        output[4].val = 291341715;
        output[5].val = 685638767;
        output[6].val = -41991818;
        output[7].val = 846471712;
        output[8].val = -858444100;
        output[9].val = -647932878;
        output[10].val = 368711543;
        output[11].val = 87869871;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[12];
        answer[0].val = -858444100;
        answer[1].val = -647932878;
        answer[2].val = -323854984;
        answer[3].val = -61467895;
        answer[4].val = -41991818;
        answer[5].val = 40359405;
        answer[6].val = 87869871;
        answer[7].val = 291341715;
        answer[8].val = 368711543;
        answer[9].val = 589485320;
        answer[10].val = 685638767;
        answer[11].val = 846471712;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00289() {
        TimeTicket[] output = new TimeTicket[22];
        output[0].val = 241798441;
        output[1].val = -534234069;
        output[2].val = -690034532;
        output[3].val = 482864080;
        output[4].val = -122374089;
        output[5].val = 132655209;
        output[6].val = 137142438;
        output[7].val = -51021498;
        output[8].val = 603450345;
        output[9].val = 364791524;
        output[10].val = 737662750;
        output[11].val = 139466428;
        output[12].val = 293889801;
        output[13].val = -126444355;
        output[14].val = -982246689;
        output[15].val = 54062346;
        output[16].val = -890498227;
        output[17].val = -268416474;
        output[18].val = -625234903;
        output[19].val = 452103495;
        output[20].val = -597931884;
        output[21].val = -341753141;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[22];
        answer[0].val = -982246689;
        answer[1].val = -890498227;
        answer[2].val = -690034532;
        answer[3].val = -625234903;
        answer[4].val = -597931884;
        answer[5].val = -534234069;
        answer[6].val = -341753141;
        answer[7].val = -268416474;
        answer[8].val = -126444355;
        answer[9].val = -122374089;
        answer[10].val = -51021498;
        answer[11].val = 54062346;
        answer[12].val = 132655209;
        answer[13].val = 137142438;
        answer[14].val = 139466428;
        answer[15].val = 241798441;
        answer[16].val = 293889801;
        answer[17].val = 364791524;
        answer[18].val = 452103495;
        answer[19].val = 482864080;
        answer[20].val = 603450345;
        answer[21].val = 737662750;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00290() {
        TimeTicket[] output = new TimeTicket[30];
        output[0].val = 883695635;
        output[1].val = -471739372;
        output[2].val = -230349837;
        output[3].val = 432256501;
        output[4].val = 111764341;
        output[5].val = 447575511;
        output[6].val = 597700715;
        output[7].val = -356171389;
        output[8].val = -522435449;
        output[9].val = -185858024;
        output[10].val = -135558749;
        output[11].val = 322296259;
        output[12].val = 76615852;
        output[13].val = 522102435;
        output[14].val = 346960726;
        output[15].val = 318025376;
        output[16].val = -450850750;
        output[17].val = -247374144;
        output[18].val = 908544611;
        output[19].val = -510753947;
        output[20].val = 324864699;
        output[21].val = -204916567;
        output[22].val = 98243846;
        output[23].val = 47650616;
        output[24].val = 665299716;
        output[25].val = -511279157;
        output[26].val = 935191830;
        output[27].val = -734651262;
        output[28].val = 436437308;
        output[29].val = -338180986;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[30];
        answer[0].val = -734651262;
        answer[1].val = -522435449;
        answer[2].val = -511279157;
        answer[3].val = -510753947;
        answer[4].val = -471739372;
        answer[5].val = -450850750;
        answer[6].val = -356171389;
        answer[7].val = -338180986;
        answer[8].val = -247374144;
        answer[9].val = -230349837;
        answer[10].val = -204916567;
        answer[11].val = -185858024;
        answer[12].val = -135558749;
        answer[13].val = 47650616;
        answer[14].val = 76615852;
        answer[15].val = 98243846;
        answer[16].val = 111764341;
        answer[17].val = 318025376;
        answer[18].val = 322296259;
        answer[19].val = 324864699;
        answer[20].val = 346960726;
        answer[21].val = 432256501;
        answer[22].val = 436437308;
        answer[23].val = 447575511;
        answer[24].val = 522102435;
        answer[25].val = 597700715;
        answer[26].val = 665299716;
        answer[27].val = 883695635;
        answer[28].val = 908544611;
        answer[29].val = 935191830;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00291() {
        TimeTicket[] output = new TimeTicket[19];
        output[0].val = 904311234;
        output[1].val = 409916377;
        output[2].val = 497669066;
        output[3].val = 670190262;
        output[4].val = -500165670;
        output[5].val = -172037152;
        output[6].val = 971800106;
        output[7].val = -988990302;
        output[8].val = 761198586;
        output[9].val = 37904512;
        output[10].val = 744384527;
        output[11].val = 757510369;
        output[12].val = 931521895;
        output[13].val = -450046992;
        output[14].val = -67283830;
        output[15].val = -377958868;
        output[16].val = -86229301;
        output[17].val = 438465196;
        output[18].val = 435436894;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[19];
        answer[0].val = -988990302;
        answer[1].val = -500165670;
        answer[2].val = -450046992;
        answer[3].val = -377958868;
        answer[4].val = -172037152;
        answer[5].val = -86229301;
        answer[6].val = -67283830;
        answer[7].val = 37904512;
        answer[8].val = 409916377;
        answer[9].val = 435436894;
        answer[10].val = 438465196;
        answer[11].val = 497669066;
        answer[12].val = 670190262;
        answer[13].val = 744384527;
        answer[14].val = 757510369;
        answer[15].val = 761198586;
        answer[16].val = 904311234;
        answer[17].val = 931521895;
        answer[18].val = 971800106;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00292() {
        TimeTicket[] output = new TimeTicket[2];
        output[0].val = -259444464;
        output[1].val = -179777803;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[2];
        answer[0].val = -259444464;
        answer[1].val = -179777803;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00293() {
        int[] output = new int[30];
        output[0] = 630649211;
        output[1] = 971391009;
        output[2] = 602062513;
        output[3] = -917195664;
        output[4] = 12326800;
        output[5] = -629675848;
        output[6] = -629411456;
        output[7] = -619653214;
        output[8] = -705513439;
        output[9] = -582695292;
        output[10] = 870708205;
        output[11] = -174615152;
        output[12] = -29053335;
        output[13] = 910710098;
        output[14] = 998375625;
        output[15] = -270703502;
        output[16] = 83441382;
        output[17] = -777878100;
        output[18] = -851506556;
        output[19] = 233670625;
        output[20] = -357623126;
        output[21] = 110729136;
        output[22] = -973057137;
        output[23] = -462582676;
        output[24] = -381292494;
        output[25] = 636409969;
        output[26] = -448522808;
        output[27] = 513781750;
        output[28] = -111674792;
        output[29] = 896275151;
        Sorting.radixSort(output);
        int[] answer = new int[30];
        answer[0] = -973057137;
        answer[1] = -917195664;
        answer[2] = -851506556;
        answer[3] = -777878100;
        answer[4] = -705513439;
        answer[5] = -629675848;
        answer[6] = -629411456;
        answer[7] = -619653214;
        answer[8] = -582695292;
        answer[9] = -462582676;
        answer[10] = -448522808;
        answer[11] = -381292494;
        answer[12] = -357623126;
        answer[13] = -270703502;
        answer[14] = -174615152;
        answer[15] = -111674792;
        answer[16] = -29053335;
        answer[17] = 12326800;
        answer[18] = 83441382;
        answer[19] = 110729136;
        answer[20] = 233670625;
        answer[21] = 513781750;
        answer[22] = 602062513;
        answer[23] = 630649211;
        answer[24] = 636409969;
        answer[25] = 870708205;
        answer[26] = 896275151;
        answer[27] = 910710098;
        answer[28] = 971391009;
        answer[29] = 998375625;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00294() {
        TimeTicket[] output = new TimeTicket[10];
        output[0].val = -529906745;
        output[1].val = 342405138;
        output[2].val = -76695904;
        output[3].val = 535379637;
        output[4].val = -882696286;
        output[5].val = 134491915;
        output[6].val = 47757292;
        output[7].val = -196980172;
        output[8].val = -592934600;
        output[9].val = 712732065;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[10];
        answer[0].val = -882696286;
        answer[1].val = -592934600;
        answer[2].val = -529906745;
        answer[3].val = -196980172;
        answer[4].val = -76695904;
        answer[5].val = 47757292;
        answer[6].val = 134491915;
        answer[7].val = 342405138;
        answer[8].val = 535379637;
        answer[9].val = 712732065;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00295() {
        TimeTicket[] output = new TimeTicket[17];
        output[0].val = 735359184;
        output[1].val = 497418540;
        output[2].val = -452062526;
        output[3].val = -966276450;
        output[4].val = -238364265;
        output[5].val = -409034509;
        output[6].val = -262905123;
        output[7].val = 104006965;
        output[8].val = 581431087;
        output[9].val = -304205790;
        output[10].val = 625525978;
        output[11].val = -536260645;
        output[12].val = -546951036;
        output[13].val = 69561301;
        output[14].val = -754638580;
        output[15].val = 726289201;
        output[16].val = -418702888;
        Sorting.insertionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[17];
        answer[0].val = -966276450;
        answer[1].val = -754638580;
        answer[2].val = -546951036;
        answer[3].val = -536260645;
        answer[4].val = -452062526;
        answer[5].val = -418702888;
        answer[6].val = -409034509;
        answer[7].val = -304205790;
        answer[8].val = -262905123;
        answer[9].val = -238364265;
        answer[10].val = 69561301;
        answer[11].val = 104006965;
        answer[12].val = 497418540;
        answer[13].val = 581431087;
        answer[14].val = 625525978;
        answer[15].val = 726289201;
        answer[16].val = 735359184;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00296() {
        TimeTicket[] output = new TimeTicket[26];
        output[0].val = -269658714;
        output[1].val = 10596380;
        output[2].val = 447096820;
        output[3].val = -1045822;
        output[4].val = 856854451;
        output[5].val = -526492166;
        output[6].val = -126749076;
        output[7].val = -843021681;
        output[8].val = 591575640;
        output[9].val = -440186863;
        output[10].val = 705875605;
        output[11].val = -687748840;
        output[12].val = -761915557;
        output[13].val = -256943204;
        output[14].val = -573200016;
        output[15].val = -883547234;
        output[16].val = -890585610;
        output[17].val = -933508387;
        output[18].val = -942906047;
        output[19].val = -823635278;
        output[20].val = 820997572;
        output[21].val = 793054604;
        output[22].val = 353088304;
        output[23].val = 439991122;
        output[24].val = 287067569;
        output[25].val = 158689930;
        Sorting.quickSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600(), new Random(0x600dc0de));
        TimeTicket[] answer = new TimeTicket[26];
        answer[0].val = -942906047;
        answer[1].val = -933508387;
        answer[2].val = -890585610;
        answer[3].val = -883547234;
        answer[4].val = -843021681;
        answer[5].val = -823635278;
        answer[6].val = -761915557;
        answer[7].val = -687748840;
        answer[8].val = -573200016;
        answer[9].val = -526492166;
        answer[10].val = -440186863;
        answer[11].val = -269658714;
        answer[12].val = -256943204;
        answer[13].val = -126749076;
        answer[14].val = -1045822;
        answer[15].val = 10596380;
        answer[16].val = 158689930;
        answer[17].val = 287067569;
        answer[18].val = 353088304;
        answer[19].val = 439991122;
        answer[20].val = 447096820;
        answer[21].val = 591575640;
        answer[22].val = 705875605;
        answer[23].val = 793054604;
        answer[24].val = 820997572;
        answer[25].val = 856854451;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00297() {
        TimeTicket[] output = new TimeTicket[7];
        output[0].val = 474800005;
        output[1].val = 312607535;
        output[2].val = -833851538;
        output[3].val = -196416537;
        output[4].val = 786105901;
        output[5].val = 303516256;
        output[6].val = -263928429;
        Sorting.selectionSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[7];
        answer[0].val = -833851538;
        answer[1].val = -263928429;
        answer[2].val = -196416537;
        answer[3].val = 303516256;
        answer[4].val = 312607535;
        answer[5].val = 474800005;
        answer[6].val = 786105901;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00298() {
        TimeTicket[] output = new TimeTicket[25];
        output[0].val = -355006242;
        output[1].val = -132158877;
        output[2].val = -396717459;
        output[3].val = -467729416;
        output[4].val = -782701060;
        output[5].val = -757799502;
        output[6].val = -749628308;
        output[7].val = 210803189;
        output[8].val = -768266730;
        output[9].val = -790667188;
        output[10].val = 143660201;
        output[11].val = 179836034;
        output[12].val = -302364068;
        output[13].val = 543374832;
        output[14].val = 454084351;
        output[15].val = 653117166;
        output[16].val = -889000545;
        output[17].val = -745969950;
        output[18].val = -524562211;
        output[19].val = 101159995;
        output[20].val = -595295869;
        output[21].val = 930639434;
        output[22].val = 826079186;
        output[23].val = 216280515;
        output[24].val = 205951415;
        Sorting.mergeSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[25];
        answer[0].val = -889000545;
        answer[1].val = -790667188;
        answer[2].val = -782701060;
        answer[3].val = -768266730;
        answer[4].val = -757799502;
        answer[5].val = -749628308;
        answer[6].val = -745969950;
        answer[7].val = -595295869;
        answer[8].val = -524562211;
        answer[9].val = -467729416;
        answer[10].val = -396717459;
        answer[11].val = -355006242;
        answer[12].val = -302364068;
        answer[13].val = -132158877;
        answer[14].val = 101159995;
        answer[15].val = 143660201;
        answer[16].val = 179836034;
        answer[17].val = 205951415;
        answer[18].val = 210803189;
        answer[19].val = 216280515;
        answer[20].val = 454084351;
        answer[21].val = 543374832;
        answer[22].val = 653117166;
        answer[23].val = 826079186;
        answer[24].val = 930639434;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00299() {
        int[] output = new int[9];
        output[0] = 36442666;
        output[1] = -767049209;
        output[2] = 56543673;
        output[3] = 767543778;
        output[4] = 9310769;
        output[5] = 61953582;
        output[6] = -923758907;
        output[7] = 868289502;
        output[8] = -204762638;
        Sorting.radixSort(output);
        int[] answer = new int[9];
        answer[0] = -923758907;
        answer[1] = -767049209;
        answer[2] = -204762638;
        answer[3] = 9310769;
        answer[4] = 36442666;
        answer[5] = 56543673;
        answer[6] = 61953582;
        answer[7] = 767543778;
        answer[8] = 868289502;
        assertArrayEquals(answer, output);
    }
    @Test(timeout = TIMEOUT)
    public void test_00300() {
        TimeTicket[] output = new TimeTicket[9];
        output[0].val = -546595107;
        output[1].val = -826045226;
        output[2].val = 6312107;
        output[3].val = 889002811;
        output[4].val = -192204542;
        output[5].val = 6990602;
        output[6].val = -5098446;
        output[7].val = 972753432;
        output[8].val = -833851970;
        Sorting.cocktailShakerSort(output, new IhateRegistrationGiveMeCS2340ANDCS3510ANDCS3600());
        TimeTicket[] answer = new TimeTicket[9];
        answer[0].val = -833851970;
        answer[1].val = -826045226;
        answer[2].val = -546595107;
        answer[3].val = -192204542;
        answer[4].val = -5098446;
        answer[5].val = 6312107;
        answer[6].val = 6990602;
        answer[7].val = 889002811;
        answer[8].val = 972753432;
        assertArrayEquals(answer, output);
    }
}